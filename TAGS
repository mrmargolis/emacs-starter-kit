
vendor/apel/alist.el,380
(defun put-alist (key value alist)put-alist28,985
(defun del-alist (key alist)del-alist40,1362
(defun set-alist (symbol key value)set-alist49,1570
(defun remove-alist (symbol key)remove-alist56,1805
(defun modify-alist (modifier default)modify-alist62,2012
(defun set-modified-alist (symbol modifier)set-modified-alist72,2278
(defun vassoc (key avlist)vassoc84,2598

vendor/apel/apel-ver.el,44
(defun apel-version ()apel-version50,1896

vendor/apel/atype.el,459
(defun field-unifier-for-default (a b)field-unifier-for-default36,1151
(defun field-unify (a b)field-unify46,1339
(defun assoc-unify (class instance)assoc-unify62,1613
(defun get-unified-alist (db al)get-unified-alist118,2911
(defun delete-atype (atl al)delete-atype132,3118
(defun remove-atype (sym al)remove-atype145,3364
(defun replace-atype (atl old-al new-al)replace-atype150,3470
(defun set-atype (sym al &rest options)set-atype161,3707

vendor/apel/broken.el,371
(defmacro broken-facility (facility &optional docstring assertion no-notice)broken-facility53,1763
(defmacro if-broken (facility then &rest else)if-broken73,2483
(defmacro when-broken (facility &rest body)when-broken81,2716
(defmacro unless-broken (facility &rest body)unless-broken87,2937
(defmacro check-broken-facility (facility)check-broken-facility92,3121

vendor/apel/calist.el,1549
(defvar calist-package-alist nil)calist-package-alist33,1122
(defvar calist-field-match-method-obarray nil)calist-field-match-method-obarray34,1156
(defun find-calist-package (name)find-calist-package36,1204
(defun define-calist-field-match-method (field-type function)define-calist-field-match-method40,1318
(defun use-calist-package (name)use-calist-package45,1524
(defun make-calist-package (name &optional use)make-calist-package58,1969
(defun in-calist-package (name)in-calist-package66,2283
(defun calist-default-field-match-method (calist field-type field-value)calist-default-field-match-method74,2528
(define-calist-field-match-method t (function calist-default-field-match-method))t84,2815
(defsubst calist-field-match-method (field-type)calist-field-match-method86,2898
(defsubst calist-field-match (calist field-type field-value)calist-field-match94,3163
(defun ctree-match-calist (rule-tree alist)ctree-match-calist98,3311
(defun ctree-match-calist-partially (rule-tree alist)ctree-match-calist-partially127,4117
(defun ctree-find-calist (rule-tree alist &optional all)ctree-find-calist158,4994
(defun calist-to-ctree (calist)calist-to-ctree208,6427
(defun ctree-add-calist-strictly (ctree calist)ctree-add-calist-strictly217,6657
(defun ctree-add-calist-with-default (ctree calist)ctree-add-calist-with-default254,7562
(defun ctree-set-calist-strictly (ctree-var calist)ctree-set-calist-strictly314,9084
(defun ctree-set-calist-with-default (ctree-var calist)ctree-set-calist-with-default319,9285

vendor/apel/emu-mule.el,126
(defun regulate-latin-char (chr)regulate-latin-char34,1057
(defun regulate-latin-string (str)regulate-latin-string43,1305

vendor/apel/emu.el,1048
(defvar running-emacs-18 (<= emacs-major-version 18))running-emacs-1829,1029
(defvar running-xemacs (featurep 'xemacs))running-xemacs30,1083
(defvar running-mule-merged-emacs (and (not (boundp 'MULE))running-mule-merged-emacs32,1127
(defvar running-xemacs-with-mule (and running-xemacs (featurep 'mule)))running-xemacs-with-mule34,1238
(defvar running-emacs-19 (and (not running-xemacs) (= emacs-major-version 19)))running-emacs-1936,1311
(defvar running-emacs-19_29-or-laterrunning-emacs-19_29-or-later37,1391
(defvar running-xemacs-19 (and running-xemacsrunning-xemacs-1941,1548
(defvar running-xemacs-20-or-later (and running-xemacsrunning-xemacs-20-or-later43,1633
(defvar running-xemacs-19_14-or-laterrunning-xemacs-19_14-or-later45,1723
(defsubst char-list-to-string (char-list)char-list-to-string86,2832
(defalias 'insert-binary-file-contents 'insert-file-contents-as-binary)insert-binary-file-contents191,6006
(defun-maybe insert-binary-file-contents-literally (filenameinsert-binary-file-contents-literally194,6156

vendor/apel/env.el,262
(defvar read-envvar-name-history nil)read-envvar-name-history35,1278
(defun read-envvar-name (prompt &optional mustmatch)read-envvar-name37,1317
(defvar setenv-history nil)setenv-history50,1860
(defun setenv (variable &optional value unset)setenv53,1904

vendor/apel/file-detect.el,0

vendor/apel/filename.el,938
(defsubst poly-funcall (functions argument)poly-funcall33,1175
(defvar filename-limit-length 21 "Limit size of file-name.")filename-limit-length51,1597
(defvar filename-replacement-alistfilename-replacement-alist53,1659
(defvar filename-filters nilfilename-filters61,1964
(defun filename-japanese-to-roman-string (str)filename-japanese-to-roman-string80,2491
(defun filename-control-p (character)filename-control-p90,2773
(defun filename-special-filter (string)filename-special-filter126,3823
(defun filename-eliminate-top-low-lines (string)filename-eliminate-top-low-lines129,3902
(defun filename-canonicalize-low-lines (string)filename-canonicalize-low-lines134,4038
(defun filename-maybe-truncate-by-size (string)filename-maybe-truncate-by-size141,4304
(defun filename-eliminate-bottom-low-lines (string)filename-eliminate-bottom-low-lines147,4519
(defun replace-as-filename (string)replace-as-filename156,4688

vendor/apel/install.el,1257
(defun compile-elisp-module (module &optional path every-time)compile-elisp-module36,1201
(defun compile-elisp-modules (modules &optional path every-time)compile-elisp-modules44,1505
(defvar install-overwritten-file-modes (+ (* 64 6)(* 8 4) 4)) ; 0644install-overwritten-file-modes55,1708
(defun install-file (file src dest &optional move overwrite just-print)install-file57,1778
(defun install-files (files src dest &optional move overwrite just-print)install-files78,2530
(defun install-elisp-module (module src dest &optional just-print del-elc)install-elisp-module92,2834
(defun install-elisp-modules (modules src dest &optional just-print del-elc)install-elisp-modules132,4409
(defvar install-prefixinstall-prefix147,4769
(defvar install-elisp-prefixinstall-elisp-prefix156,5082
(defun install-detect-elisp-directory (&optional prefix elisp-prefixinstall-detect-elisp-directory165,5317
(defvar install-default-elisp-directoryinstall-default-elisp-directory223,7038
(defun install-get-default-package-directory ()install-get-default-package-directory230,7153
(defun install-update-package-files (package dir &optional just-print)install-update-package-files256,7928
(defun install-just-print-p ()install-just-print-p292,9067

vendor/apel/inv-18.el,401
(defun enable-invisible ()enable-invisible29,1049
(defun disable-invisible ()disable-invisible34,1213
(defalias 'end-of-invisible 'disable-invisible)end-of-invisible38,1346
(defun invisible-region (start end)invisible-region41,1448
(defun visible-region (start end)visible-region52,1754
(defun invisible-p (pos)invisible-p59,1958
(defun next-visible-point (pos)next-visible-point64,2054

vendor/apel/inv-19.el,403
(defun enable-invisible ())enable-invisible29,1058
(defun disable-invisible ())disable-invisible30,1086
(defalias 'end-of-invisible 'disable-invisible)end-of-invisible31,1115
(defun invisible-region (start end)invisible-region34,1217
(defun visible-region (start end)visible-region41,1399
(defun invisible-p (pos)invisible-p44,1482
(defun next-visible-point (pos)next-visible-point47,1546

vendor/apel/inv-xemacs.el,403
(defun enable-invisible ())enable-invisible30,1080
(defun disable-invisible ())disable-invisible31,1108
(defalias 'end-of-invisible 'disable-invisible)end-of-invisible32,1137
(defun invisible-region (start end)invisible-region35,1239
(defun visible-region (start end)visible-region42,1422
(defun invisible-p (pos)invisible-p45,1505
(defun next-visible-point (pos)next-visible-point52,1663

vendor/apel/invisible.el,0

vendor/apel/localhook.el,613
(defun make-local-hook (hook)make-local-hook89,3387
(defun add-hook (hook function &optional append local)add-hook118,4465
(defun remove-hook (hook function &optional local)remove-hook165,6546
(defun run-hook-with-args-internal (hook args cond)run-hook-with-args-internal206,8310
(defun run-hooks (&rest hooks)run-hooks254,9995
(defun run-hook-with-args (hook &rest args)run-hook-with-args269,10641
(defun run-hook-with-args-until-success (hook &rest args)run-hook-with-args-until-success284,11326
(defun run-hook-with-args-until-failure (hook &rest args)run-hook-with-args-until-failure296,11850

vendor/apel/make1.bat,220
set SUBMAKEOK=SUBMAKEOK16,421
set arg1=%1arg120,461
:compilecompile31,769
:installinstall35,877
:listinglisting39,985
:cleanclean43,1070
:prnusageprnusage47,1158
:pauseendpauseend51,1298
:endend55,1381

vendor/apel/Makefile,477
VERSION = 10.7VERSION5,26
TAR	= tarTAR7,42
RM	= /bin/rm -fRM8,52
CP	= /bin/cp -pCP9,68
EMACS	= emacsEMACS11,85
XEMACS	= xemacsXEMACS12,99
FLAGS   = -batch -q -no-site-file -l APEL-MKFLAGS13,115
PREFIX = NONEPREFIX15,161
LISPDIR = NONELISPDIR16,175
PACKAGEDIR = NONEPACKAGEDIR17,190
VERSION_SPECIFIC_LISPDIR = NONEVERSION_SPECIFIC_LISPDIR18,208
GOMI	= *.elcGOMI20,241
ARCHIVE_DIR_PREFIX = /home/kanji/tomo/public_html/lemi/distARCHIVE_DIR_PREFIX22,255

vendor/apel/makeit.bat,1646
set ELISPMK_APP=apelELISPMK_APP11,446
rem ---   set PREFIX=c:\usr\MeadowPREFIX92,4151
rem ---   set EMACS=%PREFIX%\1.10\bin\meadow95.exeEMACS93,4187
rem ---   set EXEC_PREFIX=EXEC_PREFIX94,4239
rem ---   set LISPDIR=%PREFIX%\site-lispLISPDIR95,4267
rem ---   set VERSION_SPECIFIC_LISPDIR=%PREFIX%\1.10\site-lispVERSION_SPECIFIC_LISPDIR96,4309
rem ---   set DEFAULT_MAKE_ARG=elcDEFAULT_MAKE_ARG97,4373
set PREFIX=PREFIX105,4834
set EMACS=EMACS106,4847
set LISPDIR=LISPDIR107,4859
set DEFAULT_MAKE_ARG=DEFAULT_MAKE_ARG108,4873
set ELISPMK=%HOME%\.elispmk.%ELISPMK_APP%.batELISPMK115,5026
set ELISPMK=%HOME%\elisp\elispmk.%ELISPMK_APP%.batELISPMK117,5108
set ELISPMK=%HOME%\config\elispmk.%ELISPMK_APP%.batELISPMK119,5195
set ELISPMK="c:\Program Files\Meadow\elispmk.%ELISPMK_APP%.bat"ELISPMK121,5283
set ELISPMK=c:\Meadow\elispmk.%ELISPMK_APP%.batELISPMK123,5383
set ELISPMK=d:\Meadow\elispmk.%ELISPMK_APP%.batELISPMK125,5467
set ELISPMK=%HOME%\.elispmk.batELISPMK128,5560
set ELISPMK=%HOME%\elisp\elispmk.batELISPMK130,5628
set ELISPMK=%HOME%\config\elispmk.batELISPMK132,5701
set ELISPMK="c:\Program Files\Meadow\elispmk.bat"ELISPMK134,5775
set ELISPMK=c:\Meadow\elispmk.batELISPMK136,5861
set ELISPMK=d:\Meadow\elispmk.batELISPMK138,5931
:execsubmkexecsubmk148,6257
set ELISPMK=ELISPMK149,6269
set SUBMAKEOK=OKSUBMAKEOK155,6435
set ARG=%1ARG168,6754
if "%ARG%"=="" set ARG=%DEFAULT_MAKE_ARG%ARG169,6766
:execelmkbexecelmkb178,7015
:errnotspecifiederrnotspecified188,7277
:errnonexistenterrnonexistent193,7424
:printenvprintenv196,7486
:pauseendpauseend210,7895
:endend215,8005

vendor/apel/mcharset.el,378
(defcustom default-mime-charset-for-writedefault-mime-charset-for-write41,1281
(defcustom default-mime-charset-detect-method-for-writedefault-mime-charset-detect-method-for-write51,1554
(defun charsets-to-mime-charset (charsets)charsets-to-mime-charset62,1976
(defun find-mime-charset-by-charsets (charsets &optional mode &rest args)find-mime-charset-by-charsets84,2541

vendor/apel/mcs-20.el,1373
(defcustom mime-charset-coding-system-alistmime-charset-coding-system-alist43,1281
(defcustom mime-charset-to-coding-system-default-methodmime-charset-to-coding-system-default-method71,2014
(defun mime-charset-to-coding-system (charset &optional lbt)mime-charset-to-coding-system79,2308
(defalias 'mime-charset-p 'mime-charset-to-coding-system)mime-charset-p106,3154
(defvar widget-mime-charset-prompt-value-history nilwidget-mime-charset-prompt-value-history108,3213
(define-widget 'mime-charset 'coding-systemmime-charset111,3328
(defun widget-mime-charset-prompt-value (widget prompt value unbound)widget-mime-charset-prompt-value119,3587
(defun widget-mime-charset-action (widget &optional event)widget-mime-charset-action128,3883
(defcustom default-mime-charset 'x-unknowndefault-mime-charset140,4228
(defun mcs-region-repertoire-p (start end charsets &optional buffer)mcs-region-repertoire-p149,4465
(defun mcs-string-repertoire-p (string charsets &optional start end)mcs-string-repertoire-p167,4896
(defun detect-mime-charset-region (start end)detect-mime-charset-region188,5398
(defun detect-mime-charset-string (string)detect-mime-charset-string200,5758
(defun detect-mime-charset-region (start end)detect-mime-charset-region214,6113
(defun write-region-as-mime-charset (charset start end filenamewrite-region-as-mime-charset220,6311

vendor/apel/mcs-e20.el,727
(defsubst encode-mime-charset-region (start end charset &optional lbt)encode-mime-charset-region34,1148
(defsubst decode-mime-charset-region (start end charset &optional lbt)decode-mime-charset-region42,1440
(defsubst encode-mime-charset-string (string charset &optional lbt)encode-mime-charset-string51,1733
(defsubst decode-mime-charset-string (string charset &optional lbt)decode-mime-charset-string59,2005
(defvar charsets-mime-charset-alistcharsets-mime-charset-alist68,2278
(defun-maybe coding-system-get (coding-system prop)coding-system-get114,4305
(defun coding-system-to-mime-charset (coding-system)coding-system-to-mime-charset119,4491
(defun-maybe-cond mime-charset-list ()mime-charset-list126,4775

vendor/apel/mcs-ltn1.el,955
(defvar charsets-mime-charset-alistcharsets-mime-charset-alist28,1061
(defvar default-mime-charset 'iso-8859-1)default-mime-charset31,1125
(defsubst lbt-to-string (lbt)lbt-to-string33,1168
(defun mime-charset-to-coding-system (charset &optional lbt)mime-charset-to-coding-system41,1313
(defalias 'mime-charset-p 'mime-charset-to-coding-system)mime-charset-p47,1524
(defun detect-mime-charset-region (start end)detect-mime-charset-region49,1583
(defun encode-mime-charset-region (start end charset &optional lbt)encode-mime-charset-region57,1814
(defun decode-mime-charset-region (start end charset &optional lbt)decode-mime-charset-region70,2188
(defun encode-mime-charset-string (string charset &optional lbt)encode-mime-charset-string83,2562
(defun decode-mime-charset-string (string charset &optional lbt)decode-mime-charset-string92,2814
(defalias 'write-region-as-mime-charset 'write-region)write-region-as-mime-charset101,3066

vendor/apel/mcs-nemacs.el,969
(defvar charsets-mime-charset-alistcharsets-mime-charset-alist27,1017
(defvar default-mime-charset 'iso-2022-jp)default-mime-charset30,1081
(defvar mime-charset-coding-system-alistmime-charset-coding-system-alist32,1125
(defsubst lbt-to-string (lbt)lbt-to-string37,1226
(defun mime-charset-to-coding-system (charset &optional lbt)mime-charset-to-coding-system45,1371
(defun detect-mime-charset-region (start end)detect-mime-charset-region53,1624
(defun encode-mime-charset-region (start end charset &optional lbt)encode-mime-charset-region64,1928
(defun decode-mime-charset-region (start end charset &optional lbt)decode-mime-charset-region83,2462
(defun encode-mime-charset-string (string charset &optional lbt)encode-mime-charset-string102,2996
(defun decode-mime-charset-string (string charset &optional lbt)decode-mime-charset-string109,3247
(defun write-region-as-mime-charset (charset start end filename)write-region-as-mime-charset116,3498

vendor/apel/mcs-om.el,946
(defsubst lbt-to-string (lbt)lbt-to-string29,1032
(defun encode-mime-charset-region (start end charset &optional lbt)encode-mime-charset-region37,1177
(defun decode-mime-charset-region (start end charset &optional lbt)decode-mime-charset-region53,1778
(defun encode-mime-charset-string (string charset &optional lbt)encode-mime-charset-string70,2432
(defun decode-mime-charset-string (string charset &optional lbt)decode-mime-charset-string88,3047
(defvar mime-charset-coding-system-alistmime-charset-coding-system-alist136,4593
(defsubst mime-charset-to-coding-system (charset &optional lbt)mime-charset-to-coding-system147,4917
(defvar charsets-mime-charset-alistcharsets-mime-charset-alist172,5681
(defvar default-mime-charset 'x-ctextdefault-mime-charset219,7128
(defvar default-mime-charset-for-writedefault-mime-charset-for-write224,7269
(defun detect-mime-charset-region (start end)detect-mime-charset-region230,7452

vendor/apel/mcs-xm.el,918
(defun encode-mime-charset-region (start end charset &optional lbt)encode-mime-charset-region35,1163
(defcustom mime-charset-decoder-alistmime-charset-decoder-alist43,1408
(defsubst decode-mime-charset-region-default (start end charset lbt)decode-mime-charset-region-default57,1888
(defun decode-mime-charset-region-for-hz (start end charset lbt)decode-mime-charset-region-for-hz66,2126
(defun decode-mime-charset-region (start end charset &optional lbt)decode-mime-charset-region75,2437
(defun encode-mime-charset-string (string charset &optional lbt)encode-mime-charset-string84,2801
(defun decode-mime-charset-string (string charset &optional lbt)decode-mime-charset-string97,3258
(defvar charsets-mime-charset-alistcharsets-mime-charset-alist105,3494
(defun coding-system-to-mime-charset (coding-system)coding-system-to-mime-charset173,5911
(defun mime-charset-list ()mime-charset-list181,6234

vendor/apel/mcs-xmu.el,414
(defcustom mime-iso646-character-unification-alistmime-iso646-character-unification-alist32,1155
(defcustom mime-unified-character-face nilmime-unified-character-face54,1705
(defcustom mime-character-unification-limit-size 2048mime-character-unification-limit-size59,1810
(defun decode-mime-charset-region-with-iso646-unification (start end charsetdecode-mime-charset-region-with-iso646-unification68,2239

vendor/apel/mule-caesar.el,88
(defun mule-caesar-region (start end &optional stride-ascii)mule-caesar-region32,1174

vendor/apel/path-util.el,561
(defvar default-load-path load-pathdefault-load-path29,1018
(defun add-path (path &rest options)add-path35,1188
(defun add-latest-path (pattern &optional all-paths)add-latest-path69,2253
(defun get-latest-path (pattern &optional all-paths)get-latest-path82,2684
(defun file-installed-p (file &optional paths)file-installed-p109,3417
(defvar exec-suffix-list '("")exec-suffix-list126,3818
(defun exec-installed-p (file &optional paths suffixes)exec-installed-p130,3904
(defun module-installed-p (module &optional paths)module-installed-p171,4906

vendor/apel/pccl-20.el,0

vendor/apel/pccl-om.el,155
(defun ccl-execute (ccl-prog reg)ccl-execute49,1675
(defun ccl-execute-on-string (ccl-prog status string &optional contin)ccl-execute-on-string56,1896

vendor/apel/pccl.el,0

vendor/apel/pces-20.el,1566
(defmacro as-binary-process (&rest body)as-binary-process42,1366
(defmacro as-binary-input-file (&rest body)as-binary-input-file48,1554
(defmacro as-binary-output-file (&rest body)as-binary-output-file52,1656
(defun write-region-as-binary (start end filenamewrite-region-as-binary56,1760
(defun insert-file-contents-as-raw-text (filenameinsert-file-contents-as-raw-text132,4494
(defun insert-file-contents-as-raw-text-CRLF (filenameinsert-file-contents-as-raw-text-CRLF144,5021
(defun write-region-as-raw-text-CRLF (start end filenamewrite-region-as-raw-text-CRLF156,5578
(defun find-file-noselect-as-binary (filename &optional nowarn rawfile)find-file-noselect-as-binary162,5857
(defun find-file-noselect-as-raw-text (filename &optional nowarn rawfile)find-file-noselect-as-raw-text168,6112
(defun find-file-noselect-as-raw-text-CRLF (filename &optional nowarn rawfile)find-file-noselect-as-raw-text-CRLF175,6404
(defun save-buffer-as-binary (&optional args)save-buffer-as-binary182,6705
(defun save-buffer-as-raw-text-CRLF (&optional args)save-buffer-as-raw-text-CRLF187,6868
(defun open-network-stream-as-binary (name buffer host service)open-network-stream-as-binary192,7062
(defun insert-file-contents-as-coding-systeminsert-file-contents-as-coding-system202,7355
(defun write-region-as-coding-systemwrite-region-as-coding-system210,7698
(defun find-file-noselect-as-coding-systemfind-file-noselect-as-coding-system218,8081
(defun save-buffer-as-coding-system (coding-system &optional args)save-buffer-as-coding-system226,8404

vendor/apel/pces-e20.el,179
(defsubst-maybe find-coding-system (obj)find-coding-system34,1164
(defalias 'set-process-input-coding-system 'set-process-coding-system)set-process-input-coding-system39,1287

vendor/apel/pces-e20_2.el,805
(defun insert-file-contents-as-binary (filenameinsert-file-contents-as-binary35,1153
(defun insert-file-contents-as-raw-text (filenameinsert-file-contents-as-raw-text52,1841
(defun insert-file-contents-as-raw-text-CRLF (filenameinsert-file-contents-as-raw-text-CRLF68,2493
(defun find-file-noselect-as-binary (filename &optional nowarn rawfile)find-file-noselect-as-binary84,3175
(defun find-file-noselect-as-raw-text (filename &optional nowarn rawfile)find-file-noselect-as-raw-text94,3547
(defun find-file-noselect-as-raw-text-CRLF (filename &optional nowarn rawfile)find-file-noselect-as-raw-text-CRLF105,3956
(defun insert-file-contents-as-coding-systeminsert-file-contents-as-coding-system120,4407
(defun find-file-noselect-as-coding-systemfind-file-noselect-as-coding-system131,4829

vendor/apel/pces-nemacs.el,2196
(defvar coding-system-kanji-code-alistcoding-system-kanji-code-alist30,1035
(defun decode-coding-string (string coding-system)decode-coding-string39,1198
(defun encode-coding-string (string coding-system)encode-coding-string50,1563
(defun decode-coding-region (start end coding-system)decode-coding-region61,1911
(defun encode-coding-region (start end coding-system)encode-coding-region73,2339
(defun detect-coding-region (start end)detect-coding-region85,2750
(defalias 'set-buffer-file-coding-system 'set-kanji-fileio-code)set-buffer-file-coding-system96,3071
(defmacro as-binary-process (&rest body)as-binary-process102,3173
(defmacro as-binary-input-file (&rest body)as-binary-input-file110,3390
(defmacro as-binary-output-file (&rest body)as-binary-output-file114,3497
(defun write-region-as-binary (start end filenamewrite-region-as-binary118,3586
(defun insert-file-contents-as-binary (filenameinsert-file-contents-as-binary124,3830
(defun insert-file-contents-as-raw-text (filenameinsert-file-contents-as-raw-text132,4150
(defalias 'insert-file-contents-as-raw-text-CRLFinsert-file-contents-as-raw-text-CRLF146,4745
(defun write-region-as-raw-text-CRLF (start end filenamewrite-region-as-raw-text-CRLF149,4832
(defun find-file-noselect-as-binary (filename &optional nowarn rawfile)find-file-noselect-as-binary161,5321
(defun find-file-noselect-as-raw-text (filename &optional nowarn rawfile)find-file-noselect-as-raw-text166,5538
(defalias 'find-file-noselect-as-raw-text-CRLFfind-file-noselect-as-raw-text-CRLF200,6672
(defun open-network-stream-as-binary (name buffer host service)open-network-stream-as-binary203,6755
(defun save-buffer-as-binary (&optional args)save-buffer-as-binary210,7021
(defun save-buffer-as-raw-text-CRLF (&optional args)save-buffer-as-raw-text-CRLF215,7181
(defun insert-file-contents-as-coding-systeminsert-file-contents-as-coding-system239,7832
(defun write-region-as-coding-systemwrite-region-as-coding-system247,8172
(defun find-file-noselect-as-coding-systemfind-file-noselect-as-coding-system255,8550
(defun save-buffer-as-coding-system (coding-system &optional args)save-buffer-as-coding-system263,8904

vendor/apel/pces-om.el,1973
(defun-maybe find-coding-system (obj)find-coding-system113,3159
(defun encode-coding-region (start end coding-system)encode-coding-region118,3279
(defun decode-coding-region (start end coding-system)decode-coding-region124,3529
(defun encode-coding-string (str coding-system)encode-coding-string131,3869
(defun decode-coding-string (str coding-system)decode-coding-string140,4224
(defalias 'detect-coding-region 'code-detect-region)detect-coding-region155,4626
(defalias 'set-buffer-file-coding-system 'set-file-coding-system)set-buffer-file-coding-system157,4680
(defun save-buffer-as-coding-system (coding-system &optional args)save-buffer-as-coding-system217,7173
(defmacro as-binary-process (&rest body)as-binary-process229,7507
(defmacro as-binary-input-file (&rest body)as-binary-input-file237,7748
(defmacro as-binary-output-file (&rest body)as-binary-output-file243,7881
(defalias 'set-process-input-coding-system 'set-process-coding-system)set-process-input-coding-system249,8006
(defun insert-file-contents-as-raw-text (filenameinsert-file-contents-as-raw-text279,9250
(defalias 'insert-file-contents-as-raw-text-CRLFinsert-file-contents-as-raw-text-CRLF290,9744
(defun write-region-as-binary (start end filenamewrite-region-as-binary293,9831
(defun write-region-as-raw-text-CRLF (start end filenamewrite-region-as-raw-text-CRLF299,10071
(defun find-file-noselect-as-binary (filename &optional nowarn rawfile)find-file-noselect-as-binary305,10324
(defun find-file-noselect-as-raw-text (filename &optional nowarn rawfile)find-file-noselect-as-raw-text309,10545
(defalias 'find-file-noselect-as-raw-text-CRLFfind-file-noselect-as-raw-text-CRLF314,10803
(defun save-buffer-as-binary (&optional args)save-buffer-as-binary317,10886
(defun save-buffer-as-raw-text-CRLF (&optional args)save-buffer-as-raw-text-CRLF322,11044
(defun open-network-stream-as-binary (name buffer host service)open-network-stream-as-binary327,11233

vendor/apel/pces-raw.el,2165
(defun decode-coding-string (string coding-system)decode-coding-string30,1059
(defun encode-coding-string (string coding-system)encode-coding-string34,1194
(defun decode-coding-region (start end coding-system)decode-coding-region38,1312
(defun encode-coding-region (start end coding-system)encode-coding-region42,1449
(defun detect-coding-region (start end)detect-coding-region46,1569
(defun set-buffer-file-coding-system (coding-system &optional force)set-buffer-file-coding-system50,1688
(defmacro as-binary-process (&rest body)as-binary-process58,1872
(defmacro as-binary-input-file (&rest body)as-binary-input-file62,1996
(defmacro as-binary-output-file (&rest body)as-binary-output-file66,2130
(defun write-region-as-binary (start end filenamewrite-region-as-binary70,2265
(defun insert-file-contents-as-binary (filenameinsert-file-contents-as-binary76,2507
(defun write-region-as-raw-text-CRLF (start end filenamewrite-region-as-raw-text-CRLF88,3043
(defalias 'insert-file-contents-as-raw-text 'insert-file-contents)insert-file-contents-as-raw-text99,3516
(defalias 'insert-file-contents-as-raw-text-CRLF 'insert-file-contents)insert-file-contents-as-raw-text-CRLF101,3584
(defun find-file-noselect-as-binary (filename &optional nowarn rawfile)find-file-noselect-as-binary103,3657
(defalias 'find-file-noselect-as-raw-text 'find-file-noselect)find-file-noselect-as-raw-text108,3885
(defalias 'find-file-noselect-as-raw-text-CRLF 'find-file-noselect)find-file-noselect-as-raw-text-CRLF110,3949
(defun save-buffer-as-binary (&optional args)save-buffer-as-binary112,4018
(defun save-buffer-as-raw-text-CRLF (&optional args)save-buffer-as-raw-text-CRLF117,4167
(defun open-network-stream-as-binary (name buffer host service)open-network-stream-as-binary136,4758
(defun insert-file-contents-as-coding-systeminsert-file-contents-as-coding-system145,5039
(defun write-region-as-coding-systemwrite-region-as-coding-system150,5277
(defun find-file-noselect-as-coding-systemfind-file-noselect-as-coding-system156,5578
(defun save-buffer-as-coding-system (coding-system &optional args)save-buffer-as-coding-system161,5792

vendor/apel/pces-xfc.el,0

vendor/apel/pces-xm.el,0

vendor/apel/pces.el,0

vendor/apel/pcustom.el,0

vendor/apel/poe-18.el,5998
(defun defalias (sym newdef)defalias53,1856
(defun byte-code-function-p (object)byte-code-function-p57,1974
(defun indirect-function (object)indirect-function82,2770
(defmacro-maybe inline (&rest body)inline113,4027
(defmacro-maybe defsubst (name arglist &rest body)defsubst122,4352
(defun-maybe make-obsolete (fn new)make-obsolete129,4647
(defun-maybe make-obsolete-variable (var new)make-obsolete-variable139,5027
(defmacro-maybe dont-compile (&rest body)dont-compile150,5442
(defmacro-maybe eval-when-compile (&rest body)eval-when-compile156,5751
(defmacro-maybe eval-and-compile (&rest body)eval-and-compile164,6037
(defun member (elt list)member175,6338
(defun delete (elt list)delete182,6584
(defun default-boundp (symbol)default-boundp200,7189
(defvar current-time-world-timezonescurrent-time-world-timezones213,7486
(defvar current-time-local-timezone nil current-time-local-timezone231,8414
(defun set-time-zone-rule (tz)set-time-zone-rule235,8550
(defun current-time-zone (&optional specified-time)current-time-zone255,9224
(defun current-time-string (&optional specified-time)current-time-string287,10560
(defun current-time ()current-time375,13310
(defun abs (arg)abs455,15611
(defmacro lambda (&rest cdr)lambda462,15732
(defun force-mode-line-update (&optional all)force-mode-line-update481,16612
(defalias 'set-match-data 'store-match-data)set-match-data487,16889
(defvar save-match-data-internal)save-match-data-internal489,16935
(defmacro save-match-data (&rest body)save-match-data493,17113
(defvar-maybe buffer-undo-list nilbuffer-undo-list504,17451
(defvar-maybe auto-fill-function nilauto-fill-function508,17581
(defvar-maybe unread-command-event nilunread-command-event512,17724
(defvar-maybe unread-command-events nilunread-command-events514,17817
(defvar-maybe minor-mode-map-alist nilminor-mode-map-alist523,18159
(defalias 'insert-and-inherit 'insert)insert-and-inherit527,18294
(defalias 'insert-before-markers-and-inherit 'insert-before-markers)insert-before-markers-and-inherit528,18333
(defalias 'number-to-string 'int-to-string)number-to-string529,18402
(defun generate-new-buffer-name (name &optional ignore)generate-new-buffer-name531,18447
(defun mark (&optional force)mark548,19119
(defun-maybe window-minibuffer-p (&optional window)window-minibuffer-p551,19163
(defun-maybe window-live-p (obj)window-live-p555,19325
(defun-maybe walk-windows (proc &optional minibuf all-frames)walk-windows590,20883
(defun buffer-disable-undo (&optional buffer)buffer-disable-undo611,21781
(defun frame-width (&optional frame)frame-width622,22274
(defun frame-height (&optional frame)frame-height627,22451
(defun set-frame-width (frame cols &optional pretend)set-frame-width632,22628
(defun set-frame-height (frame lines &optional pretend)set-frame-height638,22915
(defvar data-directory exec-directory)data-directory658,23570
(defun file-executable-p (filename)file-executable-p661,23667
(defun make-directory-internal (dirname)make-directory-internal669,24009
(defun make-directory (dir &optional parents)make-directory683,24618
(defun delete-directory (directory)delete-directory705,25349
(defun parse-colon-path (cd-path)parse-colon-path712,25668
(defun file-relative-name (filename &optional directory)file-relative-name728,26195
(defun directory-files (directory &optional full match nosort)directory-files741,26847
(defun write-region (start end filename &optional append visit)write-region752,27365
(defun text-properties-at (position &optional object))text-properties-at800,29447
(defun get-text-property (position prop &optional object))get-text-property801,29502
(defun get-char-property (position prop &optional object))get-char-property802,29561
(defun next-property-change (position &optional object limit))next-property-change803,29620
(defun next-single-property-change (position prop &optional object limit))next-single-property-change804,29683
(defun previous-property-change (position &optional object limit))previous-property-change805,29758
(defun previous-single-property-change (position prop &optional object limit))previous-single-property-change806,29825
(defun add-text-properties (start end properties &optional object))add-text-properties807,29904
(defun put-text-property (start end property value &optional object))put-text-property808,29972
(defun set-text-properties (start end properties &optional object))set-text-properties809,30042
(defun remove-text-properties (start end properties &optional object))remove-text-properties810,30110
(defun text-property-any (start end property value &optional object))text-property-any811,30181
(defun text-property-not-all (start end property value &optional object))text-property-not-all812,30251
(defun next-char-property-change (position &optional object))next-char-property-change814,30372
(defun previous-char-property-change (position &optional object))previous-char-property-change815,30434
(defun overlayp (object))overlayp824,30699
(defun make-overlay (beg end &optional buffer front-advance rear-advance))make-overlay825,30725
(defun move-overlay (overlay beg end &optional buffer))move-overlay826,30800
(defun delete-overlay (overlay))delete-overlay827,30856
(defun overlay-start (overlay))overlay-start828,30889
(defun overlay-end (overlay))overlay-end829,30921
(defun overlay-buffer (overlay))overlay-buffer830,30951
(defun overlay-properties (overlay))overlay-properties831,30984
(defun overlays-at (pos))overlays-at832,31021
(defun overlays-in (beg end))overlays-in833,31047
(defun next-overlay-change (pos))next-overlay-change834,31077
(defun previous-overlay-change (pos))previous-overlay-change835,31111
(defun overlay-lists ())overlay-lists836,31149
(defun overlay-recenter (pos))overlay-recenter837,31174
(defun overlay-get (overlay prop))overlay-get838,31205
(defun overlay-put (overlay prop value))overlay-put839,31240

vendor/apel/poe-xemacs.el,517
(defun-maybe set-cursor-color (color-name)set-cursor-color34,1076
(defalias-maybe 'face-list 'list-faces)face-list47,1500
(defun-maybe dired-other-frame (dirname &optional switches)dired-other-frame75,2130
(default: default-directory)."default-directory202,6452
(defalias-maybe 'line-beginning-position 'point-at-bol)line-beginning-position218,6942
(defalias-maybe 'line-end-position 'point-at-eol)line-end-position219,6998
(defun-maybe set-extent-properties (extent plist)set-extent-properties225,7143

vendor/apel/poe.el,3710
(defun-maybe minibuffer-prompt-width ()minibuffer-prompt-width160,5526
(defun-maybe buffer-substring-no-properties (start end)buffer-substring-no-properties490,18028
(defun-maybe buffer-live-p (object)buffer-live-p499,18413
(defun-maybe line-beginning-position (&optional n)line-beginning-position508,18727
(defun-maybe line-end-position (&optional n)line-end-position518,19117
(defmacro-maybe push (newelt listname)push599,22547
(defmacro-maybe pop (listname)pop606,22789
(defmacro-maybe when (cond &rest body)when614,23109
(defmacro-maybe unless (cond &rest body)unless619,23280
(defsubst-maybe caar (x)caar624,23455
(defsubst-maybe cadr (x)cadr628,23534
(defsubst-maybe cdar (x)cdar632,23613
(defsubst-maybe cddr (x)cddr636,23692
(defun-maybe last (x &optional n)last640,23771
(defun-maybe butlast (x &optional n)butlast656,24251
(defun-maybe nbutlast (x &optional n)nbutlast661,24412
(defun-maybe assoc-default (key alist &optional test default)assoc-default671,24710
(defun-maybe rassoc (key list)rassoc696,25751
(defun-maybe remassoc (key alist)remassoc708,26188
(defun-maybe remassq (key alist)remassq731,27114
(defun-maybe remrassoc (value alist)remrassoc754,28029
(defun-maybe remrassq (value alist)remrassq777,28971
(defun-maybe functionp (object)functionp802,29984
(defun-maybe add-to-list (list-var element)add-to-list818,30629
(defun-maybe eval-next-after-load (file)eval-next-after-load880,33304
(defvar-maybe buffer-file-type nilbuffer-file-type894,33793
(defvar-maybe minor-mode-overriding-map-alist nilminor-mode-overriding-map-alist901,34075
(defmacro-maybe save-current-buffer (&rest body)save-current-buffer915,34780
(defmacro-maybe with-current-buffer (buffer &rest body)with-current-buffer925,35172
(defmacro-maybe with-temp-file (file &rest forms)with-temp-file934,35532
(defmacro-maybe with-temp-buffer (&rest forms)with-temp-buffer979,37467
(defmacro-maybe with-output-to-string (&rest body)with-output-to-string992,38020
(defmacro-maybe combine-after-change-calls (&rest body)combine-after-change-calls1004,38478
(defun-maybe match-string (num &optional string)match-string1022,39224
(defun-maybe match-string-no-properties (num &optional string)match-string-no-properties1034,39854
(defconst-maybe split-string-default-separators "[ \f\t\n\r\v]+"split-string-default-separators1526,57178
(defun-maybe split-string (string &optional separators omit-nulls)split-string1536,57581
(defmacro-maybe save-selected-window (&rest body)save-selected-window1587,59548
(defun-maybe get-buffer-window-list (buffer &optional minibuf frame)get-buffer-window-list1597,59932
(defmacro-maybe save-selected-frame (&rest body)save-selected-frame1614,60489
(defvar-maybe temporary-file-directorytemporary-file-directory1630,60903
(defvar-maybe path-separator ":"path-separator1826,69660
(defun-maybe file-name-sans-extension (filename)file-name-sans-extension1889,72531
(defun-maybe current-fill-column ()current-fill-column1906,73114
(defun-maybe current-left-margin ()current-left-margin1911,73263
(defun-maybe find-face (face-or-name)find-face1919,73395
(defun-maybe point-at-bol (&optional n buffer)point-at-bol1928,73837
(defun-maybe point-at-eol (&optional n buffer)point-at-eol1940,74333
(defsubst-maybe define-obsolete-function-alias (oldfun newfun)define-obsolete-function-alias1950,74703
(defun-maybe character-to-event (ch)character-to-event1958,75033
(defun-maybe-cond event-to-character (event)event-to-character1966,75365
(defun-maybe-cond next-command-event (&optional event prompt)next-command-event1991,76264
(defun-maybe-cond cancel-undo-boundary ()cancel-undo-boundary2019,77171

vendor/apel/poem-e20.el,234
(defun fontset-pixel-size (fontset)fontset-pixel-size27,1022
(defun find-non-ascii-charset-string (string)find-non-ascii-charset-string43,1370
(defun find-non-ascii-charset-region (start end)find-non-ascii-charset-region47,1521

vendor/apel/poem-e20_2.el,511
(defun-maybe set-buffer-multibyte (flag)set-buffer-multibyte34,1116
(defalias 'char-length 'char-bytes)char-length48,1542
(defmacro char-next-index (char index)char-next-index50,1579
(defalias 'sset 'store-substring)sset58,1740
(defun string-to-char-list (string)string-to-char-list60,1775
(defalias 'string-to-int-list 'string-to-char-list)string-to-int-list72,2073
(defun looking-at-as-unibyte (regexp)looking-at-as-unibyte74,2126
(defalias 'string-columns 'string-width)string-columns83,2354

vendor/apel/poem-e20_3.el,440
(defsubst char-length (char)char-length37,1139
(defmacro char-next-index (char index)char-next-index41,1229
(defalias-maybe 'characterp 'char-valid-p)characterp45,1353
(defalias 'sset 'store-substring)sset51,1416
(defun string-to-char-list (string)string-to-char-list53,1451
(defalias 'string-to-int-list 'string-to-char-list)string-to-int-list57,1584
(defalias 'looking-at-as-unibyte 'looking-at)looking-at-as-unibyte59,1637

vendor/apel/poem-ltn1.el,1399
(defun-maybe set-buffer-multibyte (flag)set-buffer-multibyte33,1105
(defun charset-description (charset)charset-description52,1717
(defun charset-registry (charset)charset-registry56,1828
(defun charset-width (charset)charset-width60,1935
(defun charset-direction (charset)charset-direction64,2036
(defun find-charset-string (str)find-charset-string69,2173
(defalias 'find-non-ascii-charset-string 'find-charset-string)find-non-ascii-charset-string75,2323
(defun find-charset-region (start end)find-charset-region77,2387
(defalias 'find-non-ascii-charset-region 'find-charset-region)find-non-ascii-charset-region85,2609
(defun char-charset (char)char-charset91,2695
(defun char-bytes (char)char-bytes97,2821
(defun char-width (char)char-width101,2921
(defun split-char (character)split-char105,3013
(defalias 'char-length 'char-bytes)char-length109,3160
(defmacro char-next-index (char index)char-next-index111,3197
(defalias 'string-width 'length)string-width119,3346
(defun string-to-char-list (str)string-to-char-list121,3380
(defalias 'string-to-int-list 'string-to-char-list)string-to-int-list124,3450
(defalias 'sref 'aref)sref126,3503
(defun truncate-string (str width &optional start-column)truncate-string128,3527
(defalias 'looking-at-as-unibyte 'looking-at)looking-at-as-unibyte138,3867
(defalias 'string-columns 'length)string-columns144,3973

vendor/apel/poem-nemacs.el,1331
(defun charset-description (charset)charset-description40,1294
(defun charset-registry (charset)charset-registry44,1421
(defun charset-width (charset)charset-width48,1544
(defun charset-direction (charset)charset-direction55,1699
(defun find-charset-string (str)find-charset-string60,1852
(defalias 'find-non-ascii-charset-string 'find-charset-string)find-non-ascii-charset-string67,2046
(defun find-charset-region (start end)find-charset-region69,2110
(defalias 'find-non-ascii-charset-region 'find-charset-region)find-non-ascii-charset-region80,2432
(defun check-ASCII-string (str)check-ASCII-string82,2496
(defsubst-maybe set-buffer-multibyte (flag)set-buffer-multibyte103,2819
(defun char-charset (chr)char-charset117,3231
(defun char-bytes (chr)char-bytes124,3398
(defun char-width (char)char-width131,3556
(defalias 'char-length 'char-bytes)char-length138,3695
(defmacro char-next-index (char index)char-next-index140,3732
(defalias 'string-width 'length)string-width149,3919
(defun sref (str idx)sref151,3953
(defun string-to-char-list (str)string-to-char-list159,4169
(defun truncate-string (str width &optional start-column)truncate-string174,4548
(defalias 'looking-at-as-unibyte 'looking-at)looking-at-as-unibyte204,5405
(defalias 'string-columns 'length)string-columns210,5511

vendor/apel/poem-om.el,1273
(defalias 'make-char 'make-character)make-char57,1670
(defalias 'find-non-ascii-charset-string 'find-charset-string)find-non-ascii-charset-string59,1709
(defalias 'find-non-ascii-charset-region 'find-charset-region)find-non-ascii-charset-region60,1772
(defalias 'charset-bytes	'char-bytes)charset-bytes62,1836
(defalias 'charset-description	'char-description)charset-description63,1874
(defalias 'charset-registry	'char-registry)charset-registry64,1924
(defalias 'charset-columns	'char-width)charset-columns65,1968
(defalias 'charset-direction	'char-direction)charset-direction66,2008
(defun charset-chars (charset)charset-chars68,2055
(defsubst-maybe set-buffer-multibyte (flag)set-buffer-multibyte78,2256
(defalias 'char-charset 'char-leading-char)char-charset92,2665
(defun split-char (character)split-char94,2710
(defmacro char-next-index (char index)char-next-index103,3004
(defalias 'char-length 'char-bytes)char-length112,3215
(defalias 'string-columns 'string-width)string-columns119,3310
(defalias 'string-to-int-list 'string-to-char-list)string-to-int-list121,3352
(defun-maybe truncate-string (str width &optional start-column)truncate-string124,3431
(defalias 'looking-at-as-unibyte 'looking-at)looking-at-as-unibyte155,4296

vendor/apel/poem-xm.el,408
(defsubst-maybe set-buffer-multibyte (flag)set-buffer-multibyte34,1107
(defmacro char-next-index (char index)char-next-index67,2033
(defalias-maybe 'char-valid-p 'characterp)char-valid-p78,2386
(defun-maybe string-to-int-list (str)string-to-int-list84,2449
(defun-maybe string-to-char-list (str)string-to-char-list87,2515
(defalias 'looking-at-as-unibyte 'looking-at)looking-at-as-unibyte90,2582

vendor/apel/poem.el,485
(defsubst-maybe string-as-unibyte (string)string-as-unibyte53,1465
(defsubst-maybe string-as-multibyte (string)string-as-multibyte59,1670
(defun-maybe charset-after (&optional pos)charset-after65,1881
(defalias-maybe 'char-int 'identity)char-int76,2189
(defalias-maybe 'int-char 'identity)int-char78,2227
(defalias-maybe 'characterpcharacterp80,2265
(defalias-maybe 'char-or-char-int-pchar-or-char-int-p85,2364
(defun-maybe char-octet (ch &optional n)char-octet90,2471

vendor/apel/product.el,2999
(defvar product-obarray (make-vector 13 0))product-obarray46,1687
(defvar product-ignore-checkers nil)product-ignore-checkers48,1732
(defun product-define (name &optional family version code-name)product-define50,1770
(defun product-name (product)product-name60,2248
(defun product-family (product)product-family63,2340
(defun product-version (product)product-version66,2441
(defun product-code-name (product)product-code-name69,2548
(defun product-checkers (product)product-checkers72,2650
(defun product-family-products (product)product-family-products75,2761
(defun product-features (product)product-features78,2884
(defun product-version-string (product)product-version-string81,2993
(defun product-set-name (product name)product-set-name85,3106
(defun product-set-family (product family)product-set-family88,3203
(defun product-set-version (product version)product-set-version91,3315
(defun product-set-code-name (product code-name)product-set-code-name95,3471
(defun product-set-checkers (product checkers)product-set-checkers98,3593
(defun product-set-family-products (product products)product-set-family-products101,3719
(defun product-set-features (product features)product-set-features104,3850
(defun product-set-version-string (product version-string)product-set-version-string107,3967
(defun product-add-to-family (family product-name)product-add-to-family111,4115
(defun product-remove-from-family (family product-name)product-remove-from-family123,4630
(defun product-add-checkers (product &rest checkers)product-add-checkers134,5087
(defun product-remove-checkers (product &rest checkers)product-remove-checkers152,5790
(defun product-add-feature (product feature)product-add-feature164,6289
(defun product-remove-feature (product feature)product-remove-feature173,6660
(defun product-run-checkers (product version &optional force)product-run-checkers181,7024
(defun product-find-by-name (name)product-find-by-name196,7564
(defun product-find-by-feature (feature)product-find-by-feature201,7750
(defun product-find (product)product-find206,7906
(defmacro product-provide (feature-def product-def)product-provide224,8467
(defun product-version-as-string (product)product-version-as-string251,9536
(defun product-string-1 (product &optional verbose)product-string-1264,10056
(defun product-for-each (product all function &rest args)product-for-each277,10631
(defun product-string (product)product-string291,11327
(defun product-string-verbose (product)product-string-verbose305,11722
(defun product-version-compare (v1 v2)product-version-compare319,12135
(defun product-version>= (product require-version)product-version>=330,12535
(defun product-list-products ()product-list-products338,12852
(defun product-parse-version-string (verstr)product-parse-version-string348,13062
(defconst-maybe emacs-major-versionemacs-major-version385,14146
(defconst-maybe emacs-minor-versionemacs-minor-version390,14367

vendor/apel/pym.el,1622
(defmacro defun-maybe (name &rest everything-else)defun-maybe61,2300
(defmacro defmacro-maybe (name &rest everything-else)defmacro-maybe77,2935
(defmacro defsubst-maybe (name &rest everything-else)defsubst-maybe93,3585
(defmacro defalias-maybe (symbol definition)defalias-maybe108,4192
(defmacro defvar-maybe (name &rest everything-else)defvar-maybe120,4657
(defmacro defconst-maybe (name &rest everything-else)defconst-maybe132,5084
(defmacro defun-maybe-cond (name args &optional doc &rest clauses)defun-maybe-cond144,5530
(defmacro defmacro-maybe-cond (name args &optional doc &rest clauses)defmacro-maybe-cond176,6614
(defmacro defsubst-maybe-cond (name args &optional doc &rest clauses)defsubst-maybe-cond208,7713
(defmacro-maybe def-edebug-spec (symbol spec)def-edebug-spec245,8974
(def-edebug-spec defun-maybe defun)defun-maybe252,9298
(def-edebug-spec defmacro-maybe defmacro)defmacro-maybe253,9334
(def-edebug-spec defsubst-maybe defun)defsubst-maybe254,9376
(def-edebug-spec defun-maybe-conddefun-maybe-cond255,9415
(def-edebug-spec defmacro-maybe-conddefmacro-maybe-cond261,9637
(def-edebug-spec defsubst-maybe-conddefsubst-maybe-cond266,9798
(def-edebug-spec static-if t) static-if274,10084
(def-edebug-spec static-when when)static-when275,10115
(def-edebug-spec static-unless unless)static-unless276,10150
(def-edebug-spec static-condition-case condition-case)static-condition-case277,10189
(def-edebug-spec static-defconst defconst)static-defconst278,10244
(def-edebug-spec static-cond cond)static-cond279,10287
(defun subr-fboundp (symbol)subr-fboundp284,10357

vendor/apel/richtext.el,392
(defconst richtext-initial-annotationrichtext-initial-annotation35,1132
(defconst richtext-annotation-regexprichtext-annotation-regexp43,1470
(defconst richtext-translationsrichtext-translations47,1619
(defun richtext-encode (from to)richtext-encode80,2728
(defun richtext-next-annotation ()richtext-next-annotation111,3596
(defun richtext-decode (from to)richtext-decode141,4439

vendor/apel/static.el,424
(defmacro static-if (cond then &rest else)static-if28,1016
(defmacro static-when (cond &rest body)static-when35,1211
(defmacro static-unless (cond &rest body)static-unless41,1397
(defmacro static-condition-case (var bodyform &rest handlers)static-condition-case48,1603
(defmacro static-defconst (symbol initvalue &optional docstring)static-defconst66,2184
(defmacro static-cond (&rest clauses)static-cond74,2550

vendor/apel/timezone.el,1674
(defvar timezone-world-timezonestimezone-world-timezones37,1281
(defvar timezone-months-assoctimezone-months-assoc67,2416
(defun timezone-make-date-arpa-standard (date &optional local timezone)timezone-make-date-arpa-standard74,2691
(defun timezone-make-date-sortable (date &optional local timezone)timezone-make-date-sortable87,3263
(defun timezone-make-arpa-date (year month day time &optional timezone)timezone-make-arpa-date104,3858
(defun timezone-make-sortable-date (year month day time)timezone-make-sortable-date121,4410
(defun timezone-make-time-string (hour minute second)timezone-make-time-string126,4582
(defun timezone-parse-date (date)timezone-parse-date130,4737
(defun timezone-parse-time (time)timezone-parse-time237,9406
(defun timezone-zone-to-minute (timezone)timezone-zone-to-minute270,10434
(defun timezone-floor (arg &optional divisor)timezone-floor292,11175
(defun timezone-time-from-absolute (date seconds)timezone-time-from-absolute301,11475
(defun timezone-time-zone-from-absolute (date seconds)timezone-time-zone-from-absolute351,13375
(defsubst timezone-fix-time-1 (year month day hour minute second)timezone-fix-time-1363,13917
(defsubst timezone-fix-time-2 (date local timezone)timezone-fix-time-2406,15179
(defun timezone-fix-time (a1 a2 a3 &optional a4 a5 a6)timezone-fix-time465,17034
(defun timezone-last-day-of-month (month year)timezone-last-day-of-month479,17550
(defun timezone-leap-year-p (year)timezone-leap-year-p485,17760
(defun timezone-day-number (month day year)timezone-day-number491,17935
(defun timezone-absolute-from-gregorian (month day year)timezone-absolute-from-gregorian501,18290

vendor/apel/tinycustom.el,460
(defmacro-maybe defgroup (symbol members doc &rest args)defgroup39,1407
(defmacro-maybe defcustom (symbol value doc &rest args)defcustom47,1665
(defvar-maybe frame-background-mode nilframe-background-mode55,1967
(defun-maybe-cond custom-declare-face (face spec doc &rest args)custom-declare-face62,2316
(defmacro-maybe defface (face spec doc &rest args)defface115,4039
(defmacro-maybe define-widget (name class doc &rest args)define-widget168,5725

vendor/apel/tinyrich.el,371
(defvar mime-viewer/face-list-for-text/enrichedmime-viewer/face-list-for-text/enriched8,199
(defun enriched-decode (beg end)enriched-decode16,413
(defun richtext-to-enriched-region (beg end)richtext-to-enriched-region76,1913
(defun enriched-to-richtext-region (beg end)enriched-to-richtext-region116,2921
(defun richtext-decode (beg end)richtext-decode148,3705

vendor/browse-kill-ring.el,5772
(defun browse-kill-ring-depropertize-string (str)browse-kill-ring-depropertize-string207,8467
(defgroup browse-kill-ring nilbrowse-kill-ring233,9352
(defvar browse-kill-ring-display-stylesbrowse-kill-ring-display-styles238,9539
(defcustom browse-kill-ring-display-style 'separatedbrowse-kill-ring-display-style242,9690
(defcustom browse-kill-ring-quit-action 'bury-and-delete-windowbrowse-kill-ring-quit-action253,10041
(defcustom browse-kill-ring-resize-window nilbrowse-kill-ring-resize-window277,11014
(defcustom browse-kill-ring-separator "-------"browse-kill-ring-separator288,11500
(defcustom browse-kill-ring-recenter nilbrowse-kill-ring-recenter294,11691
(defcustom browse-kill-ring-highlight-current-entry nilbrowse-kill-ring-highlight-current-entry299,11855
(defcustom browse-kill-ring-highlight-inserted-item browse-kill-ring-highlight-current-entrybrowse-kill-ring-highlight-inserted-item304,12025
(defcustom browse-kill-ring-separator-face 'boldbrowse-kill-ring-separator-face309,12234
(defcustom browse-kill-ring-maximum-display-length nilbrowse-kill-ring-maximum-display-length314,12395
(defcustom browse-kill-ring-display-duplicates tbrowse-kill-ring-display-duplicates324,12737
(defadvice kill-new (around browse-kill-ring-no-kill-new-duplicates)kill-new329,12893
(defcustom browse-kill-ring-no-duplicates nilbrowse-kill-ring-no-duplicates338,13272
(defcustom browse-kill-ring-depropertize nilbrowse-kill-ring-depropertize361,14110
(defcustom browse-kill-ring-hook nilbrowse-kill-ring-hook369,14416
(defvar browse-kill-ring-original-window-config nilbrowse-kill-ring-original-window-config374,14554
(defvar browse-kill-ring-original-window nilbrowse-kill-ring-original-window378,14747
(defun browse-kill-ring-mouse-insert (e)browse-kill-ring-mouse-insert383,14958
(defun browse-kill-ring-resize-window ()browse-kill-ring-resize-window409,16020
(defun browse-kill-ring-undo-other-window ()browse-kill-ring-undo-other-window418,16369
(defun browse-kill-ring-insert (&optional quit)browse-kill-ring-insert426,16688
(defun browse-kill-ring-insert-and-delete (&optional quit)browse-kill-ring-insert-and-delete436,17011
(defun browse-kill-ring-insert-and-quit ()browse-kill-ring-insert-and-quit447,17377
(defun browse-kill-ring-insert-and-move (&optional quit)browse-kill-ring-insert-and-move452,17549
(defun browse-kill-ring-insert-move-and-quit ()browse-kill-ring-insert-move-and-quit465,17969
(defun browse-kill-ring-prepend-insert (&optional quit)browse-kill-ring-prepend-insert470,18153
(defun browse-kill-ring-prepend-insert-and-quit ()browse-kill-ring-prepend-insert-and-quit479,18459
(defun browse-kill-ring-prepend-insert-and-move (&optional quit)browse-kill-ring-prepend-insert-and-move484,18644
(defun browse-kill-ring-prepend-insert-move-and-quit ()browse-kill-ring-prepend-insert-move-and-quit498,19106
(defun browse-kill-ring-do-prepend-insert (buf pt)browse-kill-ring-do-prepend-insert504,19314
(defun browse-kill-ring-append-insert (&optional quit)browse-kill-ring-append-insert527,20148
(defun browse-kill-ring-append-insert-and-quit ()browse-kill-ring-append-insert-and-quit536,20442
(defun browse-kill-ring-append-insert-and-move (&optional quit)browse-kill-ring-append-insert-and-move541,20624
(defun browse-kill-ring-append-insert-move-and-quit ()browse-kill-ring-append-insert-move-and-quit555,21083
(defun browse-kill-ring-do-append-insert (buf pt)browse-kill-ring-do-append-insert561,21288
(defun browse-kill-ring-delete ()browse-kill-ring-delete585,22148
(defun browse-kill-ring-current-string (buf pt)browse-kill-ring-current-string614,23119
(defun browse-kill-ring-do-insert (buf pt)browse-kill-ring-do-insert621,23353
(defun browse-kill-ring-forward (&optional arg)browse-kill-ring-forward642,24127
(defun browse-kill-ring-previous (&optional arg)browse-kill-ring-previous682,25549
(defun browse-kill-ring-read-regexp (msg)browse-kill-ring-read-regexp687,25703
(defun browse-kill-ring-search-forward (regexp &optional backwards)browse-kill-ring-search-forward704,26048
(defun browse-kill-ring-search-backward (regexp)browse-kill-ring-search-backward729,26934
(defun browse-kill-ring-quit ()browse-kill-ring-quit735,27176
(define-derived-mode browse-kill-ring-mode fundamental-modebrowse-kill-ring-mode755,27818
(defun browse-kill-ring-default-keybindings ()browse-kill-ring-default-keybindings788,29913
(define-derived-mode browse-kill-ring-edit-mode fundamental-modebrowse-kill-ring-edit-mode809,30825
(defvar browse-kill-ring-edit-target nil)browse-kill-ring-edit-target819,31200
(defun browse-kill-ring-edit ()browse-kill-ring-edit822,31302
(defun browse-kill-ring-edit-finish ()browse-kill-ring-edit-finish845,32097
(defmacro browse-kill-ring-add-overlays-for (item &rest body)browse-kill-ring-add-overlays-for861,32691
(defun browse-kill-ring-elide (str)browse-kill-ring-elide874,33145
(defun browse-kill-ring-insert-as-one-line (items)browse-kill-ring-insert-as-one-line882,33460
(defun browse-kill-ring-insert-as-separated (items)browse-kill-ring-insert-as-separated897,33966
(defun browse-kill-ring-insert-as-separated-1 (origitem separatep)browse-kill-ring-insert-as-separated-1904,34206
(defun browse-kill-ring-occur (regexp)browse-kill-ring-occur922,35055
(defun browse-kill-ring-fontify-on-property (prop face beg end)browse-kill-ring-fontify-on-property933,35426
(defun browse-kill-ring-fontify-region (beg end &optional verbose)browse-kill-ring-fontify-region948,35988
(defun browse-kill-ring-update ()browse-kill-ring-update956,36379
(defun browse-kill-ring-setup (buf window &optional regexp window-config)browse-kill-ring-setup964,36663
(defun browse-kill-ring ()browse-kill-ring1036,39210

vendor/elscreen.el,12827
(defconst elscreen-version "1.4.6 (December 30, 2007)")elscreen-version5,49
(defgroup elscreen nilelscreen39,1311
(defcustom elscreen-prefix-key "\C-z"elscreen-prefix-key44,1419
(defcustom elscreen-default-buffer-name "*scratch*"elscreen-default-buffer-name54,1732
(defcustom elscreen-default-buffer-initial-major-mode initial-major-modeelscreen-default-buffer-initial-major-mode60,1901
(defcustom elscreen-default-buffer-initial-message initial-scratch-messageelscreen-default-buffer-initial-message66,2114
(defcustom elscreen-mode-to-nickname-alistelscreen-mode-to-nickname-alist74,2437
(defcustom elscreen-buffer-to-nickname-alistelscreen-buffer-to-nickname-alist97,3305
(defcustom elscreen-startup-command-line-processing telscreen-startup-command-line-processing113,3946
(defcustom elscreen-display-screen-number telscreen-display-screen-number120,4221
(defcustom elscreen-display-tab telscreen-display-tab126,4424
(defvar elscreen-map (make-sparse-keymap)elscreen-map209,7590
(define-key elscreen-map "\C-c" 'elscreen-create)elscreen-map211,7658
(define-key elscreen-map "c"    'elscreen-create)elscreen-map212,7708
(define-key elscreen-map "C"    'elscreen-clone)elscreen-map213,7758
(define-key elscreen-map "\C-k" 'elscreen-kill)elscreen-map214,7807
(define-key elscreen-map "k"    'elscreen-kill)elscreen-map215,7855
(define-key elscreen-map "\M-k" 'elscreen-kill-screen-and-buffers)elscreen-map216,7903
(define-key elscreen-map "K"    'elscreen-kill-others)elscreen-map217,7970
(define-key elscreen-map "\C-p" 'elscreen-previous)elscreen-map218,8025
(define-key elscreen-map "p"    'elscreen-previous)elscreen-map219,8077
(define-key elscreen-map "\C-n" 'elscreen-next)elscreen-map220,8129
(define-key elscreen-map "n"    'elscreen-next)elscreen-map221,8177
(define-key elscreen-map "\C-a" 'elscreen-toggle)elscreen-map222,8225
(define-key elscreen-map "a"    'elscreen-toggle)elscreen-map223,8275
(define-key elscreen-map "'"    'elscreen-goto)elscreen-map224,8325
(define-key elscreen-map "\""   'elscreen-select-and-goto)elscreen-map225,8373
(define-key elscreen-map "0"    'elscreen-jump-0)elscreen-map226,8432
(define-key elscreen-map "1"    'elscreen-jump)elscreen-map227,8482
(define-key elscreen-map "2"    'elscreen-jump)elscreen-map228,8530
(define-key elscreen-map "3"    'elscreen-jump)elscreen-map229,8578
(define-key elscreen-map "4"    'elscreen-jump)elscreen-map230,8626
(define-key elscreen-map "5"    'elscreen-jump)elscreen-map231,8674
(define-key elscreen-map "6"    'elscreen-jump)elscreen-map232,8722
(define-key elscreen-map "7"    'elscreen-jump)elscreen-map233,8770
(define-key elscreen-map "8"    'elscreen-jump)elscreen-map234,8818
(define-key elscreen-map "9"    'elscreen-jump-9)elscreen-map235,8866
(define-key elscreen-map "\C-s" 'elscreen-swap)elscreen-map236,8916
(define-key elscreen-map "\C-w" 'elscreen-display-screen-name-list)elscreen-map237,8964
(define-key elscreen-map "w"    'elscreen-display-screen-name-list)elscreen-map238,9032
(define-key elscreen-map "\C-m" 'elscreen-display-last-message)elscreen-map239,9100
(define-key elscreen-map "m"    'elscreen-display-last-message)elscreen-map240,9164
(define-key elscreen-map "\C-t" 'elscreen-display-time)elscreen-map241,9228
(define-key elscreen-map "t"    'elscreen-display-time)elscreen-map242,9284
(define-key elscreen-map "A"    'elscreen-screen-nickname)elscreen-map243,9340
(define-key elscreen-map "b"    'elscreen-find-and-goto-by-buffer)elscreen-map244,9399
(define-key elscreen-map "\C-f" 'elscreen-find-file)elscreen-map245,9466
(define-key elscreen-map "\C-r" 'elscreen-find-file-read-only)elscreen-map246,9519
(define-key elscreen-map "d"    'elscreen-dired)elscreen-map247,9582
(define-key elscreen-map "\M-x" 'elscreen-execute-extended-command)elscreen-map248,9631
(define-key elscreen-map "i"    'elscreen-toggle-display-screen-number)elscreen-map249,9699
(define-key elscreen-map "T"    'elscreen-toggle-display-tab)elscreen-map250,9771
(define-key elscreen-map "?"    'elscreen-help)elscreen-map251,9833
(define-key elscreen-map "v"    'elscreen-display-version)elscreen-map252,9881
(define-key elscreen-map "j"    'elscreen-link)elscreen-map253,9940
(define-key elscreen-map "s"    'elscreen-split)elscreen-map254,9988
(defun elscreen-set-prefix-key (prefix-key)elscreen-set-prefix-key256,10038
(defvar elscreen-help "ElScreen keys:elscreen-help272,10829
(defvar elscreen-frame-confs nilelscreen-frame-confs304,12541
(defun elscreen-current-window-configuration ()elscreen-current-window-configuration307,12645
(defun elscreen-default-window-configuration ()elscreen-default-window-configuration310,12750
(defun elscreen-apply-window-configuration (elscreen-window-configuration)elscreen-apply-window-configuration323,13325
(defun get-alist (key alist)get-alist330,13636
(defsubst elscreen-copy-tree (tree)elscreen-copy-tree333,13693
(defun elscreen-copy-tree-1 (tree)elscreen-copy-tree-1338,13814
(defmacro elscreen-save-screen-excursion (&rest body)elscreen-save-screen-excursion348,14147
(defsubst elscreen-get-frame-confs (frame)elscreen-get-frame-confs371,15106
(defun elscreen-make-frame-confs (frame &optional keep-window-configuration)elscreen-make-frame-confs374,15192
(defun elscreen-delete-frame-confs (frame)elscreen-delete-frame-confs398,16338
(defsubst elscreen-get-conf-list (type)elscreen-get-conf-list412,16850
(defsubst elscreen-set-conf-list (type conf-list)elscreen-set-conf-list415,16955
(defun elscreen-get-screen-property (screen)elscreen-get-screen-property419,17117
(defun elscreen-set-screen-property (screen property)elscreen-set-screen-property423,17283
(defun elscreen-delete-screen-property (screen)elscreen-delete-screen-property428,17535
(defun elscreen-get-number-of-screens ()elscreen-get-number-of-screens433,17775
(defun elscreen-one-screen-p ()elscreen-one-screen-p437,17907
(defun elscreen-get-screen-list ()elscreen-get-screen-list441,18024
(defun elscreen-screen-live-p (screen)elscreen-screen-live-p445,18156
(defun elscreen-get-window-configuration (screen)elscreen-get-window-configuration449,18285
(defun elscreen-set-window-configuration (screen winconf)elscreen-set-window-configuration455,18560
(defun elscreen-get-screen-nickname (screen)elscreen-get-screen-nickname461,18877
(defun elscreen-set-screen-nickname (screen nickname)elscreen-set-screen-nickname466,19101
(defun elscreen-delete-screen-nickname (screen)elscreen-delete-screen-nickname472,19373
(defun elscreen-append-screen-to-history (screen)elscreen-append-screen-to-history478,19652
(defun elscreen-delete-screen-from-history (screen)elscreen-delete-screen-from-history482,19821
(defun elscreen-set-current-screen (screen)elscreen-set-current-screen487,20058
(defun elscreen-get-current-screen ()elscreen-get-current-screen492,20301
(defun elscreen-get-previous-screen ()elscreen-get-previous-screen495,20390
(defun elscreen-status-label (screen &optional default)elscreen-status-label498,20481
(defvar elscreen-notify-screen-modification-suppress-flag nil)elscreen-notify-screen-modification-suppress-flag507,20793
(defmacro elscreen-notify-screen-modification-suppress (&rest body)elscreen-notify-screen-modification-suppress508,20856
(defvar elscreen-screen-update-hook nil)elscreen-screen-update-hook512,21003
(defun elscreen-run-screen-update-hook ()elscreen-run-screen-update-hook513,21044
(defun elscreen-screen-modified-p (inquirer)elscreen-screen-modified-p519,21283
(defun elscreen-set-screen-modified ()elscreen-set-screen-modified526,21575
(defvar elscreen-screen-modified-hook-pwc nil)elscreen-screen-modified-hook-pwc534,21923
(defun elscreen-notify-screen-modification (&optional mode)elscreen-notify-screen-modification535,21970
(defmacro elscreen-screen-modified-hook-setup (&rest hooks-and-functions)elscreen-screen-modified-hook-setup551,22714
(defun elscreen-get-screen-to-name-alist-cache ()elscreen-get-screen-to-name-alist-cache583,23943
(defun elscreen-set-screen-to-name-alist-cache (alist)elscreen-set-screen-to-name-alist-cache586,24050
(defvar elscreen-mode-to-nickname-alist-symbol-list nil)elscreen-mode-to-nickname-alist-symbol-list589,24168
(defvar elscreen-mode-to-nickname-alist-internal nil)elscreen-mode-to-nickname-alist-internal590,24225
(defun elscreen-rebuild-mode-to-nickname-alist ()elscreen-rebuild-mode-to-nickname-alist591,24279
(defun elscreen-set-mode-to-nickname-alist (mode-to-nickname-alist-symbol)elscreen-set-mode-to-nickname-alist597,24568
(defvar elscreen-buffer-to-nickname-alist-symbol-list nil)elscreen-buffer-to-nickname-alist-symbol-list603,24866
(defvar elscreen-buffer-to-nickname-alist-internal nil)elscreen-buffer-to-nickname-alist-internal604,24925
(defun elscreen-rebuild-buffer-to-nickname-alist ()elscreen-rebuild-buffer-to-nickname-alist605,24981
(defun elscreen-set-buffer-to-nickname-alist (buffer-to-nickname-alist-symbol)elscreen-set-buffer-to-nickname-alist611,25276
(defsubst elscreen-get-alist-to-nickname (alist op mode-or-buffer-name)elscreen-get-alist-to-nickname617,25588
(defun elscreen-get-screen-to-name-alist (&optional truncate-length padding)elscreen-get-screen-to-name-alist639,26374
(defun elscreen-truncate-screen-name (screen-name truncate-length &optional padding)elscreen-truncate-screen-name700,29337
(defun elscreen-goto-internal (screen)elscreen-goto-internal712,29795
(defvar elscreen-create-hook nil)elscreen-create-hook719,30090
(defun elscreen-create-internal (&optional noerror)elscreen-create-internal720,30124
(defun elscreen-kill-internal (screen)elscreen-kill-internal744,30969
(defun elscreen-find-screens (condition)elscreen-find-screens749,31109
(defun elscreen-find-screen (condition)elscreen-find-screen765,31643
(defun elscreen-find-screen-by-buffer (buffer &optional create)elscreen-find-screen-by-buffer771,31898
(defun elscreen-find-screen-by-major-mode (major-mode-or-re)elscreen-find-screen-by-major-mode794,32822
(defvar elscreen-last-message "Welcome to ElScreen!"elscreen-last-message816,33654
(defun elscreen-message (message &optional sec)elscreen-message818,33732
(defun elscreen-create ()elscreen-create830,34011
(defun elscreen-clone (&optional screen)elscreen-clone837,34190
(defvar elscreen-kill-hook nil)elscreen-kill-hook854,34902
(defun elscreen-kill (&optional screen)elscreen-kill855,34934
(defun elscreen-kill-screen-and-buffers (&optional screen)elscreen-kill-screen-and-buffers875,35631
(defun elscreen-kill-others (&optional screen)elscreen-kill-others892,36294
(defvar elscreen-goto-hook nil)elscreen-goto-hook921,37564
(defun elscreen-goto (screen)elscreen-goto922,37596
(defun elscreen-next ()elscreen-next943,38288
(defun elscreen-previous ()elscreen-previous958,38753
(defun elscreen-toggle ()elscreen-toggle973,39234
(defun elscreen-jump ()elscreen-jump984,39536
(defalias 'elscreen-jump-0 'elscreen-jump)elscreen-jump-0990,39768
(defalias 'elscreen-jump-9 'elscreen-jump)elscreen-jump-9991,39811
(defun elscreen-swap ()elscreen-swap993,39855
(defun elscreen-screen-nickname (nickname)elscreen-screen-nickname1010,40591
(defun elscreen-display-screen-name-list ()elscreen-display-screen-name-list1020,40962
(defvar elscreen-help-symbol-list nil)elscreen-help-symbol-list1037,41486
(defun elscreen-set-help (help-symbol)elscreen-set-help1038,41525
(defun elscreen-help ()elscreen-help1042,41658
(defun elscreen-display-version ()elscreen-display-version1054,41993
(defun elscreen-toggle-display-screen-number ()elscreen-toggle-display-screen-number1059,42143
(defun elscreen-toggle-display-tab ()elscreen-toggle-display-tab1065,42381
(defun elscreen-display-last-message ()elscreen-display-last-message1071,42583
(defun elscreen-display-time ()elscreen-display-time1076,42744
(defun elscreen-select-and-goto ()elscreen-select-and-goto1088,43068
(defun elscreen-find-and-goto-by-buffer (&optional buffer create noselect)elscreen-find-and-goto-by-buffer1178,47284
(defun elscreen-find-file (filename)elscreen-find-file1197,48154
(defun elscreen-find-file-read-only (filename)elscreen-find-file-read-only1204,48417
(defun elscreen-dired (dirname &optional switches)elscreen-dired1212,48743
(defun elscreen-execute-extended-command (prefix-arg)elscreen-execute-extended-command1218,49020
(defun elscreen-command-line-funcall (switch-string)elscreen-command-line-funcall1652,68637
(defun elscreen-command-line-find-file (file file-count &optional line column)elscreen-command-line-find-file1672,69486
(defun elscreen-link ()elscreen-link1749,72185
(defun elscreen-split ()elscreen-split1766,72827
(defun elscreen-start ()elscreen-start1779,73232

vendor/eproject/eproject-extras.el,2141
(defalias 'eproject-ifind-file 'eproject-find-file)  ;; ifind is deperecatedeproject-ifind-file62,1748
(defun eproject--shorten-filename (filename)eproject--shorten-filename64,1826
(defun eproject-find-file ()eproject-find-file73,2254
(defun eproject--completing-read (prompt choices)eproject--completing-read81,2572
(defun eproject--icompleting-read (prompt choices)eproject--icompleting-read85,2714
(defun eproject--ido-completing-read (prompt choices)eproject--ido-completing-read98,3215
(defcustom eproject-completing-read-functioneproject-completing-read-function102,3353
(defun eproject--do-completing-read (&rest args)eproject--do-completing-read115,4005
(defun eproject--icomplete-read-with-alist (prompt alist)eproject--icomplete-read-with-alist119,4181
(defun eproject--project-buffers ()eproject--project-buffers123,4361
(defun* eproject--get-name-root-alist (&key live-only)eproject--get-name-root-alist136,4932
(defun* eproject--read-project-name (&key live-only)eproject--read-project-name147,5378
(defun* eproject--handle-root-prefix-arg (prefix &key live-only)eproject--handle-root-prefix-arg151,5546
(define-ibuffer-filter eproject-rooteproject-root158,5730
(define-ibuffer-filter eprojecteproject166,6078
(define-ibuffer-column eproject (:name "Project" :inline t)eproject174,6377
(defun eproject-ibuffer (prefix)eproject-ibuffer177,6473
(defun eproject--ibuffer-byname (project-name)eproject--ibuffer-byname185,6813
(defmacro* with-each-buffer-in-projectwith-each-buffer-in-project195,7189
(defun eproject-kill-project-buffers (prefix)eproject-kill-project-buffers208,7730
(defun eproject-open-all-project-files (prefix)eproject-open-all-project-files218,8078
(defun eproject-project-root (project)eproject-project-root234,8605
(defun eproject-revisit-project (prefix)eproject-revisit-project239,8787
(defun eproject-grep (regexp)eproject-grep253,9283
(defcustom eproject-todo-expressionseproject-todo-expressions262,9619
(defun eproject-todo ()eproject-todo268,9809
(defun eproject-eshell-cd-here (&optional look-in-invisible-buffers)eproject-eshell-cd-here276,10102

vendor/eproject/eproject.el,3630
(defgroup eproject nileproject202,7177
(defvar eproject-project-types nileproject-project-types210,7542
(defvar eproject-project-names nileproject-project-names213,7660
(defvar eproject-extra-attributes nileproject-extra-attributes216,7823
(defun define-project-attribute (key attributes)define-project-attribute233,8392
(defmacro define-project-type (type supertypes selector &rest metadata)define-project-type242,8714
(defun eproject--build-parent-candidates (start-at)eproject--build-parent-candidates260,9513
(defun eproject--scan-parents-for (start-at predicate)eproject--scan-parents-for268,9956
(defun eproject--find-file-named (start-at filename)eproject--find-file-named273,10259
(define-project-type generic () nilgeneric280,10716
(define-project-type generic-eproject (generic) (look-for ".eproject"))generic-eproject287,10961
(define-project-type generic-git (generic) (look-for ".git")generic-git289,11034
(defun eproject--type-info (type)eproject--type-info292,11141
(defun eproject--project-supertypes (type)eproject--project-supertypes297,11252
(defun eproject--project-selector (type)eproject--project-selector300,11334
(defun* eproject--look-for-impl (file expression &optional (type :filename))eproject--look-for-impl303,11414
(defun eproject--buffer-file-name ()eproject--buffer-file-name320,12254
(defun* eproject--run-project-selector (type &optional (file (eproject--buffer-file-name)))eproject--run-project-selector324,12418
(defun eproject--linearized-isa (type &optional include-self)eproject--linearized-isa332,12837
(defun eproject--all-types ()eproject--all-types340,13117
(defun eproject--compute-all-applicable-metadata (type)eproject--compute-all-applicable-metadata348,13438
(defun eproject-get-project-metadatum (type key)eproject-get-project-metadatum352,13611
(defun eproject-add-project-metadatum (type key value)eproject-add-project-metadatum355,13724
(defvar eproject-root nileproject-root358,13851
(defmacro* eproject--do-in-buffer ((buffer) &body forms)eproject--do-in-buffer363,14026
(defun* eproject-root (&optional (buffer (current-buffer)))eproject-root369,14214
(defvar eproject-attributes-alist nileproject-attributes-alist374,14416
(defun* eproject-attribute (key &optional (root (eproject-root)))eproject-attribute377,14515
(defun eproject--known-project-roots ()eproject--known-project-roots382,14744
(defmacro define-eproject-accessor (variable)define-eproject-accessor386,14928
(define-eproject-accessor type)type394,15386
(define-eproject-accessor name)name395,15418
(defun eproject-reinitialize-project ()eproject-reinitialize-project397,15451
(defun eproject--eval-user-data (project-name root)eproject--eval-user-data406,15785
(defun eproject--interpret-metadata (data root)eproject--interpret-metadata422,16495
(defun eproject--init-attributes (root type)eproject--init-attributes429,16742
(define-minor-mode eproject-modeeproject-mode488,19464
(defun eproject-maybe-turn-on ()eproject-maybe-turn-on496,19766
(defun eproject--setup-local-variables ()eproject--setup-local-variables539,21593
(defun eproject--search-directory-tree (directory file-regexp ignore-regexp)eproject--search-directory-tree551,22209
(defun eproject-assert-type (type)eproject-assert-type565,22969
(defun eproject--combine-regexps (regexp-list)eproject--combine-regexps571,23242
(defun* eproject-list-project-files (&optional (root (eproject-root)))eproject-list-project-files576,23444
(defun* eproject-list-project-files-relative (&optional (root (eproject-root)))eproject-list-project-files-relative585,23927

vendor/haml-mode.el,3934
(defgroup haml nilhaml38,887
(defcustom haml-mode-hook nilhaml-mode-hook43,990
(defcustom haml-indent-offset 2haml-indent-offset48,1089
(defcustom haml-backspace-backdents-nesting thaml-backspace-backdents-nesting53,1202
(defface haml-tab-facehaml-tab-face60,1457
(defvar haml-indent-function 'haml-indent-phaml-indent-function67,1640
(defconst haml-tag-beg-rehaml-tag-beg-re75,1970
(defvar haml-block-openershaml-block-openers79,2142
(defun haml-nested-regexp (re)haml-nested-regexp95,2694
(defconst haml-font-lock-keywordshaml-font-lock-keywords100,2947
(defconst haml-filter-re "^ *:\\w+")haml-filter-re115,3906
(defconst haml-comment-re "^ *\\(?:-\\#\\|/\\)")haml-comment-re116,3943
(defun haml-fontify-region (beg end keywords syntax-table syntactic-keywords)haml-fontify-region118,3993
(defun haml-fontify-region-as-ruby (beg end)haml-fontify-region-as-ruby137,4869
(defun haml-handle-filter (filter-name limit fn)haml-handle-filter142,5111
(defun haml-fontify-filter-region (filter-name limit &rest fontify-region-args)haml-fontify-filter-region150,5464
(defun haml-highlight-ruby-filter-block (limit)haml-highlight-ruby-filter-block161,5942
(defun haml-highlight-css-filter-block (limit)haml-highlight-css-filter-block165,6116
(defun haml-highlight-js-filter-block (limit)haml-highlight-js-filter-block173,6424
(defun haml-highlight-textile-filter-block (limit)haml-highlight-textile-filter-block186,7116
(defun haml-highlight-markdown-filter-block (limit)haml-highlight-markdown-filter-block197,7606
(defun haml-highlight-ruby-script (limit)haml-highlight-ruby-script207,8041
(defun haml-highlight-ruby-tag (limit)haml-highlight-ruby-tag213,8325
(defun haml-move (re)haml-move288,11215
(defun haml-highlight-interpolation (limit)haml-highlight-interpolation295,11424
(defun haml-limited-forward-sexp (limit &optional arg)haml-limited-forward-sexp310,11936
(defun* haml-extend-region-filters-comments ()haml-extend-region-filters-comments323,12401
(defun* haml-extend-region-multiline-hashes ()haml-extend-region-multiline-hashes340,13028
(defvar haml-mode-syntax-tablehaml-mode-syntax-table376,14240
(defvar haml-mode-maphaml-mode-map383,14447
(define-derived-mode haml-mode fundamental-mode "Haml"haml-mode397,15002
(defun haml-comment-block ()haml-comment-block414,15736
(defun haml-uncomment-block ()haml-uncomment-block427,16078
(defun haml-replace-region (start end)haml-replace-region439,16402
(defun haml-output-region (start end)haml-output-region452,16908
(defun haml-output-buffer ()haml-output-buffer462,17298
(defun haml-forward-through-whitespace (&optional backward)haml-forward-through-whitespace469,17455
(defun haml-at-indent-p ()haml-at-indent-p481,17946
(defun haml-forward-sexp (&optional arg)haml-forward-sexp488,18141
(defun haml-backward-sexp (&optional arg)haml-backward-sexp508,18884
(defun haml-up-list (&optional arg)haml-up-list518,19228
(defun haml-down-list (&optional arg)haml-down-list531,19643
(defun haml-mark-sexp ()haml-mark-sexp546,20127
(defun haml-mark-sexp-but-not-next-line ()haml-mark-sexp-but-not-next-line551,20253
(defun* haml-indent-p ()haml-indent-p565,20634
(defun* haml-parse-multiline-attr-hash ()haml-parse-multiline-attr-hash576,21104
(defun* haml-unclosed-attr-hash-p ()haml-unclosed-attr-hash-p604,22227
(defun* haml-parse-new-attr-hash (&optional (fn (lambda (type beg end) ())))haml-parse-new-attr-hash613,22532
(defun haml-compute-indentation ()haml-compute-indentation636,23456
(defun haml-indent-region (start end)haml-indent-region649,23943
(defun haml-indent-line ()haml-indent-line683,25424
(defun haml-reindent-region-by (n)haml-reindent-region-by702,26259
(defun haml-electric-backspace (arg)haml-electric-backspace711,26679
(defun haml-kill-line-and-indent ()haml-kill-line-and-indent735,27563
(defun haml-indent-string ()haml-indent-string743,27816

vendor/keywiz.el,1252
(defgroup keywiz nilkeywiz80,2496
(defface keywiz-wrong-facekeywiz-wrong-face87,2646
(defface keywiz-right-facekeywiz-right-face92,2749
(defface keywiz-command-facekeywiz-command-face97,2859
(defface keywiz-heading-facekeywiz-heading-face105,3023
(defcustom keywiz-brief-flag tkeywiz-brief-flag112,3157
(defvar keywiz-cached-commands nilkeywiz-cached-commands118,3325
(defconst keywiz-right-phrases '("Excellent!" "Yes." "Indeed." "You're right."keywiz-right-phrases121,3402
(defconst keywiz-wrong-phrases '("Nope." "Wrong." "Nah." "nil." "No."keywiz-wrong-phrases123,3527
(defvar keywiz-temp-dir (if (fboundp 'temp-directory)keywiz-temp-dir126,3646
(defvar keywiz-score-filekeywiz-score-file130,3757
(defconst keywiz-time-limit 120)keywiz-time-limit137,3950
(defvar keywiz-not-key-regexpkeywiz-not-key-regexp139,3984
(defvar keywiz-global-map nil)keywiz-global-map145,4175
(defvar keywiz-local-map nil)keywiz-local-map146,4206
(defun keywiz-key-press-event-p (x)keywiz-key-press-event-p167,4717
(defun keywiz-insert-with-face (face &rest str)keywiz-insert-with-face178,5032
(defalias 'keywiz-float-timekeywiz-float-time188,5262
(defun keywiz-random (x)keywiz-random195,5423
(defun keywiz (rescan)keywiz199,5519

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-asymptote.el,325
(defvar org-babel-default-header-args:asymptote '((:results . "file") (:exports . "results"))org-babel-default-header-args:asymptote56,1750
(defun org-babel-execute:asymptote (body params)org-babel-execute:asymptote59,1917
(defun org-babel-prep-session:asymptote (session params)org-babel-prep-session:asymptote80,2863

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-clojure.el,2261
(defvar org-babel-clojure-wrapper-methodorg-babel-clojure-wrapper-method53,1556
(defn spitspit55,1601
(defn mainmain65,1923
(defun org-babel-clojure-clojure-slime-eval (string &optional handler)org-babel-clojure-clojure-slime-eval72,2081
(defun org-babel-clojure-slime-eval-sync (string)org-babel-clojure-slime-eval-sync76,2257
(defun org-babel-clojure-babel-clojure-cmd ()org-babel-clojure-babel-clojure-cmd80,2392
(defun org-babel-clojure-table-or-string (results)org-babel-clojure-table-or-string104,3300
(defun org-babel-clojure-var-to-clojure (var)org-babel-clojure-var-to-clojure117,3840
(defun org-babel-clojure-build-full-form (body vars)org-babel-clojure-build-full-form124,4052
(defun org-babel-prep-session:clojure (session params)org-babel-prep-session:clojure132,4464
(defun org-babel-load-session:clojure (session body params)org-babel-load-session:clojure143,5002
(defvar org-babel-clojure-buffers '())org-babel-clojure-buffers152,5307
(defvar org-babel-clojure-pending-sessions '())org-babel-clojure-pending-sessions153,5346
(defun org-babel-clojure-session-buffer (session)org-babel-clojure-session-buffer155,5395
(defun org-babel-clojure-initiate-session-by-key (&optional session)org-babel-clojure-initiate-session-by-key158,5497
(defun org-babel-clojure-initiate-session (&optional session)org-babel-clojure-initiate-session186,6902
(defun org-babel-clojure-session-connected-hook ()org-babel-clojure-session-connected-hook192,7212
(defun org-babel-clojure-bind-session-to-repl-buffer (session repl-buffer)org-babel-clojure-bind-session-to-repl-buffer203,7784
(defun org-babel-clojure-repl-buffer-pred ()org-babel-clojure-repl-buffer-pred209,8063
(defun org-babel-clojure-bind-session-to-repl (session)org-babel-clojure-bind-session-to-repl213,8279
(defun org-babel-clojure-evaluate-external-process (buffer body &optional result-type)org-babel-clojure-evaluate-external-process220,8686
(defun org-babel-clojure-evaluate-session (buffer body &optional result-type)org-babel-clojure-evaluate-session243,9715
(defun org-babel-clojure-evaluate (buffer body &optional result-type)org-babel-clojure-evaluate255,10228
(defun org-babel-execute:clojure (body params)org-babel-execute:clojure264,10688

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-css.el,159
(defun org-babel-execute:css (body params)org-babel-execute:css39,1215
(defun org-babel-prep-session:css (session params)org-babel-prep-session:css45,1420

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-ditaa.el,255
(defvar org-babel-default-header-args:ditaaorg-babel-default-header-args:ditaa48,1475
(defun org-babel-execute:ditaa (body params)org-babel-execute:ditaa52,1636
(defun org-babel-prep-session:ditaa (session params)org-babel-prep-session:ditaa67,2435

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-dot.el,289
(defvar org-babel-default-header-args:dot '((:results . "file") (:exports . "results"))org-babel-default-header-args:dot50,1519
(defun org-babel-execute:dot (body params)org-babel-execute:dot53,1674
(defun org-babel-prep-session:dot (session params)org-babel-prep-session:dot67,2343

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-emacs-lisp.el,87
(defun org-babel-execute:emacs-lisp (body params)org-babel-execute:emacs-lisp38,1196

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-gnuplot.el,938
(defvar org-babel-default-header-args:gnuplotorg-babel-default-header-args:gnuplot51,1545
(defvar org-babel-gnuplot-timestamp-fmt nil)org-babel-gnuplot-timestamp-fmt55,1727
(defun org-babel-gnuplot-process-vars (params)org-babel-gnuplot-process-vars57,1773
(defun org-babel-execute:gnuplot (body params)org-babel-execute:gnuplot71,2296
(defun org-babel-prep-session:gnuplot (session params)org-babel-prep-session:gnuplot142,5693
(defun org-babel-load-session:gnuplot (session body params)org-babel-load-session:gnuplot157,6367
(defun org-babel-gnuplot-initiate-session (&optional session)org-babel-gnuplot-initiate-session166,6713
(defun org-babel-gnuplot-quote-timestamp-field (s)org-babel-gnuplot-quote-timestamp-field174,7112
(defun org-babel-gnuplot-quote-tsv-field (s)org-babel-gnuplot-quote-tsv-field178,7319
(defun org-babel-gnuplot-table-to-data (table data-file params)org-babel-gnuplot-table-to-data187,7671

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-haskell.el,838
(defvar org-babel-haskell-lhs2tex-command "lhs2tex")org-babel-haskell-lhs2tex-command53,1729
(defvar org-babel-haskell-eoe "\"org-babel-haskell-eoe\"")org-babel-haskell-eoe55,1783
(defun org-babel-execute:haskell (body params)org-babel-execute:haskell57,1843
(defun org-babel-haskell-read-string (string)org-babel-haskell-read-string82,3076
(defun org-babel-haskell-initiate-session (&optional session)org-babel-haskell-initiate-session88,3258
(defun org-babel-load-session:haskell (session body params)org-babel-load-session:haskell94,3520
(defun org-babel-prep-session:haskell (session params)org-babel-prep-session:haskell104,3921
(defun org-babel-haskell-table-or-string (results)org-babel-haskell-table-or-string122,4725
(defun org-babel-haskell-export-to-lhs (&optional arg)org-babel-haskell-export-to-lhs135,5288

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-latex.el,255
(defvar org-babel-default-header-args:latexorg-babel-default-header-args:latex42,1352
(defun org-babel-execute:latex (body params)org-babel-execute:latex46,1514
(defun org-babel-prep-session:latex (session params)org-babel-prep-session:latex59,2058

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-ocaml.el,604
(defvar org-babel-ocaml-eoe-indicator "\"org-babel-ocaml-eoe\";;")org-babel-ocaml-eoe-indicator48,1516
(defvar org-babel-ocaml-eoe-output "org-babel-ocaml-eoe")org-babel-ocaml-eoe-output49,1583
(defun org-babel-execute:ocaml (body params)org-babel-execute:ocaml51,1642
(defun org-babel-prep-session:ocaml (session params)org-babel-prep-session:ocaml68,2504
(defun org-babel-ocaml-parse-output (output)org-babel-ocaml-parse-output78,3111
(defun org-babel-ocaml-read-list (results)org-babel-ocaml-read-list92,3751
(defun org-babel-ocaml-read-array (results)org-babel-ocaml-read-array105,4307

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-perl.el,676
(defun org-babel-execute:perl (body params)org-babel-execute:perl38,1217
(defun org-babel-prep-session:perl (session params)org-babel-prep-session:perl57,2053
(defun org-babel-perl-var-to-perl (var)org-babel-perl-var-to-perl63,2252
(defvar org-babel-perl-buffers '(:default . nil))org-babel-perl-buffers70,2503
(defun org-babel-perl-initiate-session (&optional session)org-babel-perl-initiate-session72,2554
(defvar org-babel-perl-wrapper-methodorg-babel-perl-wrapper-method76,2680
(defvar org-babel-perl-pp-wrapper-methodorg-babel-perl-pp-wrapper-method85,2805
(defun org-babel-perl-evaluate (session body &optional result-type)org-babel-perl-evaluate88,2854

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-python.el,1475
(defun org-babel-execute:python (body params)org-babel-execute:python39,1221
(defun org-babel-prep-session:python (session params)org-babel-prep-session:python59,2221
(defun org-babel-load-session:python (session body params)org-babel-load-session:python75,2962
(defun org-babel-python-var-to-python (var)org-babel-python-var-to-python86,3327
(defun org-babel-python-table-or-string (results)org-babel-python-table-or-string93,3588
(defvar org-babel-python-buffers '(:default . nil))org-babel-python-buffers106,4127
(defun org-babel-python-session-buffer (session)org-babel-python-session-buffer108,4180
(defun org-babel-python-initiate-session-by-key (&optional session)org-babel-python-initiate-session-by-key111,4280
(defun org-babel-python-initiate-session (&optional session)org-babel-python-initiate-session122,4784
(defvar org-babel-python-last-value-eval "_"org-babel-python-last-value-eval126,4972
(defvar org-babel-python-pp-last-value-evalorg-babel-python-pp-last-value-eval128,5100
(defvar org-babel-python-eoe-indicator "'org_babel_python_eoe'"org-babel-python-eoe-indicator134,5344
(defvar org-babel-python-wrapper-methodorg-babel-python-wrapper-method136,5464
(defvar org-babel-python-pp-wrapper-methodorg-babel-python-pp-wrapper-method142,5563
(defun org-babel-python-evaluate (buffer body &optional result-type)org-babel-python-evaluate150,5691
(defun org-babel-python-read-string (string)org-babel-python-read-string210,8854

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-R.el,1082
(defun org-babel-execute:R (body params)org-babel-execute:R38,1190
(defun org-babel-prep-session:R (session params)org-babel-prep-session:R58,2165
(defun org-babel-load-session:R (session body params)org-babel-load-session:R65,2501
(defun org-babel-R-quote-tsv-field (s)org-babel-R-quote-tsv-field76,2856
(defun org-babel-R-assign-elisp (name value)org-babel-R-assign-elisp82,3047
(defun org-babel-R-initiate-session (session)org-babel-R-initiate-session95,3742
(defun org-babel-R-construct-graphics-device-call (out-file params)org-babel-R-construct-graphics-device-call106,4149
(defvar org-babel-R-eoe-indicator "'org_babel_R_eoe'")org-babel-R-eoe-indicator131,5293
(defvar org-babel-R-eoe-output "[1] \"org_babel_R_eoe\"")org-babel-R-eoe-output132,5348
(defvar org-babel-R-wrapper-method "main <- function ()\n{\n%s\n}org-babel-R-wrapper-method133,5406
(defun org-babel-R-evaluate (session body result-type column-names-p)org-babel-R-evaluate136,5576
(defun org-babel-R-process-value-result (result column-names-p)org-babel-R-process-value-result197,8130

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-ruby.el,1145
(defun org-babel-execute:ruby (body params)org-babel-execute:ruby49,1553
(defun org-babel-prep-session:ruby (session params)org-babel-prep-session:ruby68,2408
(defun org-babel-load-session:ruby (session body params)org-babel-load-session:ruby87,3261
(defun org-babel-ruby-var-to-ruby (var)org-babel-ruby-var-to-ruby98,3622
(defun org-babel-ruby-table-or-string (results)org-babel-ruby-table-or-string105,3873
(defun org-babel-ruby-initiate-session (&optional session)org-babel-ruby-initiate-session118,4434
(defvar org-babel-ruby-last-value-eval "_"org-babel-ruby-last-value-eval128,4889
(defvar org-babel-ruby-pp-last-value-eval "require 'pp'; pp(_)"org-babel-ruby-pp-last-value-eval130,5013
(defvar org-babel-ruby-eoe-indicator ":org_babel_ruby_eoe"org-babel-ruby-eoe-indicator132,5153
(defvar org-babel-ruby-wrapper-methodorg-babel-ruby-wrapper-method134,5268
(defvar org-babel-ruby-pp-wrapper-methodorg-babel-ruby-pp-wrapper-method142,5439
(defun org-babel-ruby-evaluate (buffer body &optional result-type)org-babel-ruby-evaluate155,5595
(defun org-babel-ruby-read-string (string)org-babel-ruby-read-string203,7999

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-sass.el,163
(defun org-babel-execute:sass (body params)org-babel-execute:sass51,1653
(defun org-babel-prep-session:sass (session params)org-babel-prep-session:sass64,2363

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-screen.el,721
(defvar org-babel-screen-location "screen"org-babel-screen-location45,1452
(defvar org-babel-default-header-args:screenorg-babel-default-header-args:screen49,1610
(defun org-babel-execute:screen (body params)org-babel-execute:screen53,1807
(defun org-babel-prep-session:screen (session params)org-babel-prep-session:screen64,2386
(defun org-babel-screen-session-execute-string (session body)org-babel-screen-session-execute-string85,3418
(defun org-babel-screen-session-socketname (session)org-babel-screen-session-socketname96,3952
(defun org-babel-screen-session-write-temp-file (session body)org-babel-screen-session-write-temp-file109,4567
(defun org-babel-screen-test ()org-babel-screen-test120,4930

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-sh.el,869
(defun org-babel-execute:sh (body params)org-babel-execute:sh39,1202
(defun org-babel-prep-session:sh (session params)org-babel-prep-session:sh56,2052
(defun org-babel-load-session:sh (session body params)org-babel-load-session:sh72,2756
(defun org-babel-sh-var-to-sh (var)org-babel-sh-var-to-sh83,3113
(defun org-babel-sh-table-or-results (results)org-babel-sh-table-or-results90,3354
(defun org-babel-sh-initiate-session (&optional session)org-babel-sh-initiate-session103,3890
(defvar org-babel-sh-eoe-indicator "echo 'org_babel_sh_eoe'"org-babel-sh-eoe-indicator109,4128
(defvar org-babel-sh-eoe-output "org_babel_sh_eoe"org-babel-sh-eoe-output111,4245
(defun org-babel-sh-evaluate (session body &optional result-type)org-babel-sh-evaluate114,4353
(defun org-babel-sh-strip-weird-long-prompt (string)org-babel-sh-strip-weird-long-prompt161,6745

vendor/org-6.34c/contrib/babel/lisp/langs/org-babel-sql.el,159
(defun org-babel-execute:sql (body params)org-babel-execute:sql54,1737
(defun org-babel-prep-session:sql (session params)org-babel-prep-session:sql75,2711

vendor/org-6.34c/contrib/babel/lisp/org-babel-comint.el,478
(defun org-babel-comint-buffer-livep (buffer)org-babel-comint-buffer-livep39,1279
(defmacro org-babel-comint-in-buffer (buffer &rest body)org-babel-comint-in-buffer43,1453
(defmacro org-babel-comint-with-output (buffer eoe-indicator remove-echo &rest body)org-babel-comint-with-output55,1905
(defun org-babel-comint-input-command (buffer cmd)org-babel-comint-input-command90,3664
(defun org-babel-comint-wait-for-output (buffer)org-babel-comint-wait-for-output98,3955

vendor/org-6.34c/contrib/babel/lisp/org-babel-exp.el,671
(defvar org-babel-function-def-export-keyword "function"org-babel-function-def-export-keyword38,1349
(defvar org-babel-function-def-export-indent 4org-babel-function-def-export-indent53,1853
(defun org-babel-exp-src-blocks (body &rest headers)org-babel-exp-src-blocks59,2095
(defun org-babel-exp-inline-src-blocks (start end)org-babel-exp-inline-src-blocks80,2945
(defun org-babel-exp-lob-one-liners (start end)org-babel-exp-lob-one-liners95,3678
(defun org-babel-exp-do-export (info type)org-babel-exp-do-export119,4555
(defun org-babel-exp-code (info type)org-babel-exp-code128,4904
(defun org-babel-exp-results (info type)org-babel-exp-results147,5614

vendor/org-6.34c/contrib/babel/lisp/org-babel-keys.el,131
(defvar org-babel-key-prefix "\C-c\M-b"org-babel-key-prefix37,1267
(defvar org-babel-key-bindingsorg-babel-key-bindings42,1494

vendor/org-6.34c/contrib/babel/lisp/org-babel-lob.el,651
(defvar org-babel-library-of-babel nilorg-babel-library-of-babel36,1221
(defcustom org-babel-lob-files '()org-babel-lob-files40,1390
(defun org-babel-lob-ingest (&optional file)org-babel-lob-ingest46,1589
(defconst org-babel-lob-call-aliases '("lob" "call")org-babel-lob-call-aliases57,2048
(defconst org-babel-lob-one-liner-regexporg-babel-lob-one-liner-regexp63,2301
(defun org-babel-lob-execute-maybe ()org-babel-lob-execute-maybe71,2609
(defun org-babel-lob-get-info ()org-babel-lob-get-info81,2976
(defun org-babel-lob-execute (info)org-babel-lob-execute99,3717
(define-generic-mode org-babel-lob-modeorg-babel-lob-mode107,4045

vendor/org-6.34c/contrib/babel/lisp/org-babel-ref.el,596
(defun org-babel-ref-variables (params)org-babel-ref-variables57,1788
(defvar org-babel-ref-split-regexporg-babel-ref-split-regexp66,2244
(defun org-babel-ref-parse (assignment params)org-babel-ref-parse69,2360
(defun org-babel-ref-literal (ref)org-babel-ref-literal84,3136
(defun org-babel-ref-resolve-reference (ref params)org-babel-ref-resolve-reference95,3513
(defun org-babel-ref-index-list (index lis)org-babel-ref-index-list161,6794
(defun org-babel-ref-split-args (arg-string)org-babel-ref-split-args182,7865
(defun org-babel-ref-at-ref-p ()org-babel-ref-at-ref-p199,8632

vendor/org-6.34c/contrib/babel/lisp/org-babel-table.el,153
(defun org-babel-table-truncate-at-newline (string)org-babel-table-truncate-at-newline58,1706
(defmacro sbe (source-block &rest variables)sbe63,1894

vendor/org-6.34c/contrib/babel/lisp/org-babel-tangle.el,534
(defvar org-babel-tangle-langs nilorg-babel-tangle-langs34,1098
(defun org-babel-load-file (file)org-babel-load-file43,1553
(defun org-babel-tangle-file (file &optional target-file lang)org-babel-tangle-file60,2364
(defun org-babel-tangle (&optional target-file lang)org-babel-tangle69,2818
(defun org-babel-tangle-clean ()org-babel-tangle-clean137,6148
(defun org-babel-tangle-collect-blocks (&optional lang)org-babel-tangle-collect-blocks150,6781
(defun org-babel-spec-to-string (spec)org-babel-spec-to-string182,8563

vendor/org-6.34c/contrib/babel/lisp/org-babel.el,5522
(defun org-babel-execute-src-block-maybe ()org-babel-execute-src-block-maybe34,1134
(defadvice org-edit-special (around org-babel-prep-session-for-edit activate)org-edit-special43,1503
(defadvice org-open-at-point (around org-babel-open-at-point activate)org-open-at-point57,2195
(defun org-babel-load-in-session-maybe ()org-babel-load-in-session-maybe64,2513
(defun org-babel-pop-to-session-maybe ()org-babel-pop-to-session-maybe73,2867
(defvar org-babel-default-header-argsorg-babel-default-header-args82,3219
(defvar org-babel-default-inline-header-argsorg-babel-default-inline-header-args86,3420
(defvar org-babel-src-block-regexp nilorg-babel-src-block-regexp90,3606
(defvar org-babel-inline-src-block-regexp nilorg-babel-inline-src-block-regexp93,3708
(defvar org-babel-result-regexporg-babel-result-regexp96,3818
(defvar org-babel-source-name-regexporg-babel-source-name-regexp102,4067
(defvar org-babel-min-lines-for-block-output 10org-babel-min-lines-for-block-output106,4212
(defvar org-babel-noweb-error-langs nilorg-babel-noweb-error-langs113,4561
(defvar org-babel-hash-show 4org-babel-hash-show118,4752
(defun org-babel-named-src-block-regexp-for-name (name)org-babel-named-src-block-regexp-for-name121,4851
(defun org-babel-set-interpreters (var value)org-babel-set-interpreters126,5066
(defun org-babel-add-interpreter (interpreter)org-babel-add-interpreter144,5874
(defcustom org-babel-interpreters '()org-babel-interpreters151,6237
(defun org-babel-execute-src-block (&optional arg info params)org-babel-execute-src-block178,7186
(defun org-babel-load-in-session (&optional arg info)org-babel-load-in-session230,9780
(defun org-babel-pop-to-session (&optional arg info)org-babel-pop-to-session246,10549
(defun org-babel-open-src-block-result (&optional re-run)org-babel-open-src-block-result267,11623
(defun org-babel-execute-buffer (&optional arg)org-babel-execute-buffer296,12929
(defun org-babel-execute-subtree (&optional arg)org-babel-execute-subtree307,13305
(defun org-babel-get-src-block-info (&optional header-vars-only)org-babel-get-src-block-info316,13551
(defun org-babel-sha1-hash (&optional info)org-babel-sha1-hash352,15326
(defun org-babel-result-hash (&optional info)org-babel-result-hash361,15691
(defun org-babel-hide-hash ()org-babel-hide-hash365,15841
(defun org-babel-hide-all-hashes ()org-babel-hide-all-hashes383,16589
(defun org-babel-hash-at-point (&optional point)org-babel-hash-at-point395,17049
(defun org-babel-result-hide-spec ()org-babel-result-hide-spec406,17552
(defvar org-babel-hide-result-overlays nilorg-babel-hide-result-overlays410,17707
(defun org-babel-result-hide-all ()org-babel-result-hide-all413,17781
(defun org-babel-show-result-all ()org-babel-show-result-all422,18104
(defun org-babel-hide-result-toggle-maybe ()org-babel-hide-result-toggle-maybe427,18292
(defun org-babel-hide-result-toggle (&optional force)org-babel-hide-result-toggle438,18669
(defmacro org-babel-map-source-blocks (file &rest body)org-babel-map-source-blocks482,20780
(defun org-babel-params-from-properties ()org-babel-params-from-properties494,21306
(defun org-babel-parse-src-block-match ()org-babel-parse-src-block-match511,22067
(defun org-babel-parse-inline-src-block-match ()org-babel-parse-inline-src-block-match532,23050
(defun org-babel-parse-header-arguments (arg-string)org-babel-parse-header-arguments543,23659
(defun org-babel-process-params (params)org-babel-process-params556,24278
(defun org-babel-where-is-src-block-head ()org-babel-where-is-src-block-head568,24763
(defun org-babel-goto-named-source-block (&optional name)org-babel-goto-named-source-block592,25759
(defun org-babel-find-named-block (name)org-babel-find-named-block601,26128
(defun org-babel-find-named-result (name)org-babel-find-named-result614,26644
(defun org-babel-where-is-src-block-result (&optional insert info hash)org-babel-where-is-src-block-result623,27005
(defun org-babel-read-result ()org-babel-read-result655,28693
(defun org-babel-read-table ()org-babel-read-table675,29426
(defun org-babel-insert-result (result &optional result-params info hash)org-babel-insert-result682,29666
(defun org-babel-result-to-org-string (result)org-babel-result-to-org-string764,33379
(defun org-babel-remove-result (&optional info)org-babel-remove-result769,33600
(defun org-babel-result-end ()org-babel-result-end778,33954
(defun org-babel-result-to-file (result)org-babel-result-to-file801,34772
(defun org-babel-examplize-region (beg end &optional results-switches)org-babel-examplize-region807,34982
(defun org-babel-merge-params (&rest plists)org-babel-merge-params827,35768
(defun org-babel-expand-noweb-references (&optional info parent-buffer)org-babel-expand-noweb-references899,39928
(defun org-babel-clean-text-properties (text)org-babel-clean-text-properties980,43814
(defun org-babel-strip-protective-commas (body)org-babel-strip-protective-commas984,43959
(defun org-babel-read (cell)org-babel-read988,44111
(defun org-babel-number-p (string)org-babel-number-p1003,44702
(defun org-babel-import-elisp-from-file (file-name)org-babel-import-elisp-from-file1009,44929
(defun org-babel-string-read (cell)org-babel-string-read1030,45662
(defun org-babel-reverse-string (string)org-babel-reverse-string1037,45950
(defun org-babel-chomp (string &optional regexp)org-babel-chomp1040,46045
(defun org-babel-trim (string &optional regexp)org-babel-trim1049,46466

vendor/org-6.34c/contrib/lisp/htmlize.el,5539
(defconst htmlize-version "1.36")htmlize-version99,4323
(defgroup htmlize nilhtmlize118,5063
(defcustom htmlize-head-tags ""htmlize-head-tags122,5151
(defcustom htmlize-output-type 'csshtmlize-output-type127,5289
(defcustom htmlize-generate-hyperlinks thtmlize-generate-hyperlinks148,6239
(defcustom htmlize-hyperlink-style "htmlize-hyperlink-style156,6583
(defcustom htmlize-replace-form-feeds thtmlize-replace-form-feeds171,6909
(defcustom htmlize-html-charset nilhtmlize-html-charset187,7672
(defcustom htmlize-convert-nonascii-to-entities (featurep 'mule)htmlize-convert-nonascii-to-entities212,8762
(defcustom htmlize-ignore-face-size 'absolutehtmlize-ignore-face-size247,10509
(defcustom htmlize-css-name-prefix ""htmlize-css-name-prefix257,10967
(defcustom htmlize-use-rgb-txt thtmlize-use-rgb-txt266,11349
(defcustom htmlize-html-major-mode nilhtmlize-html-major-mode284,12110
(defvar htmlize-before-hook nilhtmlize-before-hook292,12422
(defvar htmlize-after-hook nilhtmlize-after-hook297,12577
(defvar htmlize-file-hook nilhtmlize-file-hook303,12799
(defvar htmlize-buffer-places)htmlize-buffer-places306,12908
(defconst htmlize-running-xemacs (string-match "XEmacs" emacs-version))htmlize-running-xemacs312,13110
(defvar htmlize-basic-character-tablehtmlize-basic-character-table400,16709
(defvar htmlize-extended-character-cache (make-hash-table :test 'eq))htmlize-extended-character-cache436,18210
(defun htmlize-protect-string (string)htmlize-protect-string438,18281
(defconst htmlize-ellipsis "...")htmlize-ellipsis475,19736
(defun htmlize-buffer-substring-no-invisible (beg end)htmlize-buffer-substring-no-invisible478,19856
(defun htmlize-trim-ellipsis (text)htmlize-trim-ellipsis533,22109
(defconst htmlize-tab-spaceshtmlize-tab-spaces542,22470
(defun htmlize-untabify (text start-column)htmlize-untabify550,22739
(defun htmlize-despam-address (string)htmlize-despam-address586,24151
(defun htmlize-make-hyperlinks ()htmlize-make-hyperlinks595,24480
(defun htmlize-defang-local-variables ()htmlize-defang-local-variables628,25690
(defvar htmlize-x-library-search-pathhtmlize-x-library-search-path647,26392
(defun htmlize-get-color-rgb-hash (&optional rgb-file)htmlize-get-color-rgb-hash669,26998
(defvar htmlize-color-rgb-hash (htmlize-get-color-rgb-hash))htmlize-color-rgb-hash708,28352
(defun htmlize-face-specifies-property (face prop)htmlize-face-specifies-property712,28435
(defun htmlize-face-color-internal (face fg)htmlize-face-color-internal723,28997
(defun htmlize-face-foreground (face)htmlize-face-foreground756,30401
(defun htmlize-face-background (face)htmlize-face-background767,30785
(defun htmlize-color-to-rgb (color)htmlize-color-to-rgb781,31273
(defstruct htmlize-fstructhtmlize-fstruct826,33066
(defun htmlize-face-emacs21-attr (fstruct attr value)htmlize-face-emacs21-attr838,33444
(defun htmlize-face-size (face)htmlize-face-size864,34401
(defun htmlize-face-to-fstruct (face)htmlize-face-to-fstruct875,34843
(defmacro htmlize-copy-attr-if-set (attr-list dest source)htmlize-copy-attr-if-set953,38298
(defun htmlize-merge-size (merged next)htmlize-merge-size964,38761
(defun htmlize-merge-two-faces (merged next)htmlize-merge-two-faces972,39030
(defun htmlize-merge-faces (fstruct-list)htmlize-merge-faces981,39326
(defun htmlize-attrlist-to-fstruct (attrlist)htmlize-attrlist-to-fstruct1001,40012
(defun htmlize-face-list-p (face-prop)htmlize-face-list-p1022,40832
(defun htmlize-make-face-map (faces)htmlize-make-face-map1049,41789
(defun htmlize-unstringify-face (face)htmlize-unstringify-face1075,42752
(defun htmlize-faces-in-buffer ()htmlize-faces-in-buffer1081,42920
(defmacro htmlize-method (method &rest args)htmlize-method1222,48719
(defun htmlize-method-function (method)htmlize-method-function1227,48932
(defvar htmlize-memoization-table (make-hash-table :test 'equal))htmlize-memoization-table1239,49374
(defmacro htmlize-memoize (key generator)htmlize-memoize1241,49441
(defun htmlize-default-doctype ()htmlize-default-doctype1255,49948
(defun htmlize-default-body-tag (face-map)htmlize-default-body-tag1283,51309
(defun htmlize-css-specs (fstruct)htmlize-css-specs1290,51459
(defun htmlize-css-insert-head (buffer-faces face-map)htmlize-css-insert-head1317,52597
(defun htmlize-css-insert-text (text fstruct-list buffer)htmlize-css-insert-text1350,53853
(defun htmlize-inline-css-body-tag (face-map)htmlize-inline-css-body-tag1365,54397
(defun htmlize-inline-css-insert-text (text fstruct-list buffer)htmlize-inline-css-insert-text1370,54563
(defun htmlize-font-body-tag (face-map)htmlize-font-body-tag1387,55063
(defun htmlize-font-insert-text (text fstruct-list buffer)htmlize-font-insert-text1393,55293
(defun htmlize-buffer-1 ()htmlize-buffer-11417,56358
(defmacro htmlize-with-fontify-message (&rest body)htmlize-with-fontify-message1550,61690
(defun htmlize-ensure-fontified ()htmlize-ensure-fontified1563,62164
(defun htmlize-buffer (&optional buffer)htmlize-buffer1593,63433
(defun htmlize-region (beg end)htmlize-region1614,64340
(defun htmlize-region-for-paste (beg end)htmlize-region-for-paste1628,64793
(defun htmlize-make-file-name (file)htmlize-make-file-name1641,65353
(defun htmlize-file (file &optional target)htmlize-file1665,66261
(defun htmlize-many-files (files &optional target-directory)htmlize-many-files1728,68933
(defun htmlize-many-files-dired (arg &optional target-directory)htmlize-many-files-dired1762,70247

vendor/org-6.34c/contrib/lisp/org-annotate-file.el,699
(defvar org-annotate-file-storage-file "~/.org-annotate-file.org"org-annotate-file-storage-file60,2110
(defvar org-annotate-file-add-search nilorg-annotate-file-add-search63,2217
(defvar org-annotate-file-always-open torg-annotate-file-always-open67,2344
(defun org-annotate-file-elipsify-desc (string &optional after)org-annotate-file-elipsify-desc71,2481
(defun org-annotate-file ()org-annotate-file85,3106
(defun org-annotate-file-show-section (&optional buffer)org-annotate-file-show-section92,3332
(defun org-annotate-file-add-upper-level (link)org-annotate-file-add-upper-level119,4559
(defun org-annotate-file-add-second-level (link)org-annotate-file-add-second-level124,4694

vendor/org-6.34c/contrib/lisp/org-babel-init.el,0

vendor/org-6.34c/contrib/lisp/org-bookmark.el,421
(defgroup org-bookmark nilorg-bookmark29,1100
(defcustom org-bookmark-in-dired nilorg-bookmark-in-dired34,1211
(defcustom org-bookmark-when-visiting-a-file nilorg-bookmark-when-visiting-a-file39,1321
(defcustom org-bookmark-use-first-bookmark nilorg-bookmark-use-first-bookmark44,1464
(defun org-bookmark-open (bookmark)org-bookmark-open53,1789
(defun org-bookmark-store-link ()org-bookmark-store-link57,1887

vendor/org-6.34c/contrib/lisp/org-checklist.el,599
(defgroup org-checklist nilorg-checklist47,1797
(defcustom org-checklist-export-time-format "%Y%m%d%H%M"org-checklist-export-time-format52,1904
(defcustom org-checklist-export-function 'org-export-as-asciiorg-checklist-export-function59,2147
(defcustom org-checklist-export-params nilorg-checklist-export-params67,2528
(defcustom org-checklist-a2ps-params nilorg-checklist-a2ps-params72,2676
(defun org-reset-checkbox-state-maybe ()org-reset-checkbox-state-maybe77,2802
(defun org-make-checklist-export ()org-make-checklist-export84,3038
(defun org-checklist ()org-checklist129,4670

vendor/org-6.34c/contrib/lisp/org-choose.el,1357
(defvar org-choose-mark-data org-choose-mark-data84,2628
(defun org-choose-filter-one (i)org-choose-filter-one93,2851
(defun org-choose-setup-vars (bot-lower-range top-upper-rangeorg-choose-setup-vars141,4075
(defun org-choose-filter-tail (raw)org-choose-filter-tail193,5395
(defun org-choose-setup-filter (raw)org-choose-setup-filter225,6351
(defun org-choose-conform-after-promotion (entry-pos keywords highest-ok-ix)org-choose-conform-after-promotion233,6574
(defun org-choose-conform-after-demotion (entry-pos keywordsorg-choose-conform-after-demotion256,7349
(defun org-choose-keep-sensible (change-plist)org-choose-keep-sensible282,8055
(defun org-choose-get-index-in-keywords (ix all-keywords)org-choose-get-index-in-keywords375,10483
(defun org-choose-get-entry-index (all-keywords)org-choose-get-entry-index383,10682
(defun org-choose-get-fn-map-group ()org-choose-get-fn-map-group392,10924
(defun org-choose-get-highest-mark-index (keywords)org-choose-get-highest-mark-index410,11458
(defun org-choose-highest-other-ok (ix data)org-choose-highest-other-ok433,11945
(defun org-choose-get-default-mark-index (data) org-choose-get-default-mark-index456,12573
(defun org-choose-get-mark-N (n data)org-choose-get-mark-N474,13010
(defun org-choose-get-default-mark (new-mark old-mark)org-choose-get-default-mark483,13233

vendor/org-6.34c/contrib/lisp/org-collector.el,485
(defvar org-propview-default-value 0org-propview-default-value96,3958
(defun and-rest (list)and-rest101,4176
(defun org-read-prop (prop)org-read-prop112,4418
(defun org-dblock-write:propview (params)org-dblock-write:propview129,5002
(defun org-propview-eval-w-props (props body)org-propview-eval-w-props165,6336
(defun org-propview-collect (cols &optional conds match scope)org-propview-collect175,6659
(defun org-propview-to-table (results)org-propview-to-table211,7998

vendor/org-6.34c/contrib/lisp/org-contribdir.el,0

vendor/org-6.34c/contrib/lisp/org-depend.el,318
(defcustom org-depend-tag-blocked torg-depend-tag-blocked125,4439
(defmacro org-depend-act-on-sibling (trigger-val &rest rest)org-depend-act-on-sibling130,4569
(defun org-depend-trigger-todo (change-plist)org-depend-trigger-todo146,5156
(defun org-depend-block-todo (change-plist)org-depend-block-todo210,7772

vendor/org-6.34c/contrib/lisp/org-elisp-symbol.el,140
(defun org-elisp-symbol-open (path)org-elisp-symbol-open83,2969
(defun org-elisp-symbol-store-link ()org-elisp-symbol-store-link90,3230

vendor/org-6.34c/contrib/lisp/org-eval-light.el,1062
(defgroup org-eval-light nilorg-eval-light48,1907
(defvar org-eval-light-example-size-cutoff 10org-eval-light-example-size-cutoff53,2050
(defvar org-eval-light-regexp nil)org-eval-light-regexp58,2241
(defun org-eval-light-set-interpreters (var value)org-eval-light-set-interpreters60,2277
(defcustom org-eval-light-interpreters '("lisp" "emacs-lisp" "ruby" "shell")org-eval-light-interpreters67,2491
(defun org-eval-light-inside-snippet ()org-eval-light-inside-snippet88,3199
(defun org-eval-light-make-region-example (beg end)org-eval-light-make-region-example101,3578
(defun org-eval-light-current-snippet (&optional arg)org-eval-light-current-snippet121,4345
(defun org-eval-light-eval-subtree (&optional arg)org-eval-light-eval-subtree146,5296
(defun org-eval-light-code (interpreter code)org-eval-light-code156,5608
(defun org-eval-light-lisp (form)org-eval-light-lisp166,6009
(defun org-eval-light-run (cmd code)org-eval-light-run188,6759
(defadvice org-ctrl-c-ctrl-c (around org-cc-eval-source activate)org-ctrl-c-ctrl-c194,6930

vendor/org-6.34c/contrib/lisp/org-eval.el,679
(defgroup org-eval nilorg-eval74,2810
(defface org-evalorg-eval79,2947
(defvar org-eval-regexp nil)org-eval-regexp94,3494
(defun org-eval-set-interpreters (var value)org-eval-set-interpreters96,3524
(defcustom org-eval-interpreters '("lisp")org-eval-interpreters105,3740
(defun org-eval-handle-snippets (limit &optional replace)org-eval-handle-snippets124,4362
(defun org-eval-replace-snippts ()org-eval-replace-snippts161,5662
(defun org-eval-get-attributes (str)org-eval-get-attributes170,5992
(defun org-eval-code (interpreter code)org-eval-code179,6280
(defun org-eval-lisp (form)org-eval-lisp189,6646
(defun org-eval-run (cmd code)org-eval-run211,7390

vendor/org-6.34c/contrib/lisp/org-exp-bibtex.el,234
(defun org-export-bibtex-preprocess ()org-export-bibtex-preprocess60,2043
(defun org-exp-bibtex-docites (fun)org-exp-bibtex-docites133,4819
(defun org-exp-bibtex-options-to-plist (options)org-exp-bibtex-options-to-plist142,5028

vendor/org-6.34c/contrib/lisp/org-expiry.el,1632
(defgroup org-expiry nilorg-expiry79,2775
(defcustom org-expiry-created-property-name "CREATED"org-expiry-created-property-name84,2860
(defcustom org-expiry-expiry-property-name "EXPIRY"org-expiry-expiry-property-name89,3013
(defcustom org-expiry-keyword "EXPIRED"org-expiry-keyword94,3168
(defcustom org-expiry-wait "+1y"org-expiry-wait99,3301
(defcustom org-expiry-created-date "+0d"org-expiry-created-date111,3789
(defcustom org-expiry-handler-function 'org-toggle-archive-tagorg-expiry-handler-function125,4311
(defcustom org-expiry-confirm-flag torg-expiry-confirm-flag135,4579
(defcustom org-expiry-advised-functionsorg-expiry-advised-functions144,4885
(defadvice org-schedule (after org-schedule-update-created)org-schedule154,5193
(defadvice org-deadline (after org-deadline-update-created)org-deadline158,5352
(defadvice org-time-stamp (after org-time-stamp-update-created)org-time-stamp162,5511
(defun org-expiry-insinuate (&optional arg)org-expiry-insinuate166,5676
(defun org-expiry-deinsinuate (&optional arg)org-expiry-deinsinuate187,6488
(defun org-expiry-expired-p ()org-expiry-expired-p210,7359
(defun org-expiry-process-entry (&optional force)org-expiry-process-entry230,8181
(defun org-expiry-process-entries (beg end)org-expiry-process-entries253,9061
(defun org-expiry-insert-created (&optional arg)org-expiry-insert-created279,9929
(defun org-expiry-insert-expiry (&optional today)org-expiry-insert-expiry302,10856
(defun org-expiry-archive-subtree ()org-expiry-archive-subtree321,11567
(defun org-expiry-add-keyword (&optional keyword)org-expiry-add-keyword330,11818

vendor/org-6.34c/contrib/lisp/org-export-generic.el,1832
(defgroup org-export-generic nilorg-export-generic101,3879
(defcustom org-export-generic-links-to-notes torg-export-generic-links-to-notes106,4018
(defvar org-generic-current-indentation nil) ; For communicationorg-generic-current-indentation114,4287
(defvar org-generic-alistorg-generic-alist116,4353
(defvar org-export-generic-section-type "")org-export-generic-section-type437,13883
(defvar org-export-generic-section-suffix "")org-export-generic-section-suffix438,13927
(defun org-set-generic-type (type definition)org-set-generic-type441,13989
(defun org-export-generic-remember-section (type suffix &optional prefix)org-export-generic-remember-section446,14172
(defun org-export-generic-check-section (type &optional prefix suffix)org-export-generic-check-section453,14381
(defun org-export-generic (arg)org-export-generic468,14989
(defun org-export-generic-format (export-plist prop &optional len n reverse)org-export-generic-format1005,32320
(defun org-export-generic-header (header export-plistorg-export-generic-header1035,33349
(defun org-export-generic-preprocess (parameters)org-export-generic-preprocess1047,33832
(defun org-html-expand-for-generic (line)org-html-expand-for-generic1062,34359
(defun org-export-generic-wrap (line where)org-export-generic-wrap1070,34611
(defun org-export-generic-push-links (link-buffer)org-export-generic-push-links1097,35310
(defun org-generic-level-start (level old-level title umax export-plistorg-generic-level-start1113,35822
(defun org-insert-centered (s &optional underline)org-insert-centered1186,38107
(defvar org-table-colgroup-info nil)org-table-colgroup-info1195,38442
(defun org-format-table-generic (lines)org-format-table-generic1196,38479
(defun org-colgroup-info-to-vline-list (info)org-colgroup-info-to-vline-list1228,39776

vendor/org-6.34c/contrib/lisp/org-git-link.el,1063
(defcustom org-git-program "git"org-git-program63,2547
(defun org-gitbare-open (str)org-gitbare-open72,2759
(defun org-git-open-file-internal (gitdir object)org-git-open-file-internal79,2956
(defun org-git-open (str)org-git-open95,3548
(defun org-git-split-dirpath (dirpath)org-git-split-dirpath107,3924
(defun org-git-find-gitdir (path)org-git-find-gitdir114,4222
(defun org-git-split-string (str)org-git-split-string142,5456
(defun org-git-link-filename (str)org-git-link-filename153,5946
(defun org-git-create-searchstring (branch timestring)org-git-create-searchstring164,6403
(defun org-git-create-git-link (file)org-git-create-git-link168,6499
(defun org-git-store-link ()org-git-store-link176,6886
(defun org-git-insert-link-interactively (file searchstring &optional description)org-git-insert-link-interactively186,7199
(defun org-git-show (gitdir object buffer)org-git-show191,7452
(defun org-git-blob-sha (gitdir object)org-git-blob-sha199,7844
(defun org-git-get-current-branch (gitdir)org-git-get-current-branch207,8237

vendor/org-6.34c/contrib/lisp/org-interactive-query.el,1177
(defcustom org-agenda-query-selection-single-key torg-agenda-query-selection-single-key43,1550
(defun org-agenda-query-selection (current op table &optional todo-table)org-agenda-query-selection55,2037
(defun org-agenda-query-op-line (op)org-agenda-query-op-line200,7515
(defun org-agenda-query-op-entry (matchp chars str)org-agenda-query-op-entry207,7835
(defun org-agenda-query-decompose (current)org-agenda-query-decompose213,8030
(defun org-agenda-query-clear (current prefix tag)org-agenda-query-clear216,8125
(defun org-agenda-query-manip (current op groups kind tag)org-agenda-query-manip221,8304
(defun org-agenda-query-global-todo-keys (&optional files)org-agenda-query-global-todo-keys251,9535
(defun org-agenda-query-merge-todo-key (alist entry)org-agenda-query-merge-todo-key264,10024
(defun org-agenda-query-generic-cmd (op)org-agenda-query-generic-cmd281,10656
(defun org-agenda-query-clear-cmd ()org-agenda-query-clear-cmd290,11035
(defun org-agenda-query-and-cmd ()org-agenda-query-and-cmd295,11192
(defun org-agenda-query-or-cmd ()org-agenda-query-or-cmd300,11353
(defun org-agenda-query-not-cmd ()org-agenda-query-not-cmd305,11512

vendor/org-6.34c/contrib/lisp/org-invoice.el,1508
(defgroup org-invoice nilorg-invoice56,2148
(defcustom org-invoice-long-date-format "%A, %B %d, %Y"org-invoice-long-date-format60,2236
(defcustom org-invoice-strip-ts torg-invoice-strip-ts64,2368
(defcustom org-invoice-default-level 2org-invoice-default-level68,2492
(defcustom org-invoice-start-hook nilorg-invoice-start-hook86,3132
(defvar org-invoice-current-invoice nilorg-invoice-current-invoice107,3948
(defvar org-invoice-current-item nilorg-invoice-current-item110,4033
(defvar org-invoice-table-params nilorg-invoice-table-params113,4120
(defvar org-invoice-total-time nilorg-invoice-total-time116,4206
(defvar org-invoice-total-price nilorg-invoice-total-price119,4292
(defconst org-invoice-version "1.0.0"org-invoice-version122,4380
(defun org-invoice-goto-tree (&optional tree)org-invoice-goto-tree125,4456
(defun org-invoice-heading-info ()org-invoice-heading-info138,5050
(defun org-invoice-level-min-max (ls)org-invoice-level-min-max173,6702
(defun org-invoice-collapse-list (ls)org-invoice-collapse-list183,7084
(defun org-invoice-info-to-table (info)org-invoice-info-to-table216,8587
(defun org-invoice-list-to-table (ls)org-invoice-list-to-table237,9467
(defun org-invoice-collect-invoice-data ()org-invoice-collect-invoice-data256,10336
(defun org-dblock-write:invoice (params)org-dblock-write:invoice272,11032
(defun org-invoice-in-report-p ()org-invoice-in-report-p309,12492
(defun org-invoice-report (&optional jump)org-invoice-report320,12840

vendor/org-6.34c/contrib/lisp/org-jira.el,106
(defconst org-jira-version "0.1")org-jira-version2,54
(defun org-jira-open (path)org-jira-open58,1767

vendor/org-6.34c/contrib/lisp/org-learn.el,943
(defgroup org-learn nilorg-learn42,1511
(defcustom org-learn-always-reschedule nilorg-learn-always-reschedule47,1633
(defcustom org-learn-fraction 0.5org-learn-fraction52,1791
(defun initial-optimal-factor (n ef)initial-optimal-factor59,2017
(defun get-optimal-factor (n ef of-matrix)get-optimal-factor64,2086
(defun set-optimal-factor (n ef of-matrix of)set-optimal-factor71,2304
(defun inter-repetition-interval (n ef &optional of-matrix)inter-repetition-interval81,2593
(defun modify-e-factor (ef quality)modify-e-factor87,2788
(defun modify-of (of q fraction)modify-of92,2923
(defun calculate-new-optimal-factor (interval-used quality used-ofcalculate-new-optimal-factor96,3050
(defvar initial-repetition-state '(-1 1 2.5 nil))initial-repetition-state139,4652
(defun determine-next-interval (n ef quality of-matrix)determine-next-interval141,4703
(defun org-smart-reschedule (quality)org-smart-reschedule159,5373

vendor/org-6.34c/contrib/lisp/org-mac-iCal.el,472
(defcustom org-mac-iCal-range 2org-mac-iCal-range58,2160
(defun org-mac-iCal ()org-mac-iCal66,2435
(defun omi-concat-leopard-ics (list)omi-concat-leopard-ics131,4659
(defun omi-import-ics (string)omi-import-ics147,5251
(defun omi-kill-diary-buffer (list)omi-kill-diary-buffer210,7369
(defun omi-kill-ics-buffer (list)omi-kill-ics-buffer217,7494
(defun omi-delete-ics-file (list)omi-delete-ics-file224,7615
(defun omi-checked (directory)omi-checked230,7705

vendor/org-6.34c/contrib/lisp/org-mairix.el,1878
(defgroup org-mairix nilorg-mairix45,1880
(defcustom org-mairix-threaded-links torg-mairix-threaded-links50,1980
(defcustom org-mairix-augmented-links nilorg-mairix-augmented-links57,2214
(defcustom org-mairix-display-hook 'org-mairix-gnus-display-resultsorg-mairix-display-hook68,2611
(defcustom org-mairix-open-command "mairix %args% '%search%'"org-mairix-open-command74,2848
(defun org-mairix-construct-link (message-id)org-mairix-construct-link90,3352
(defun org-store-mairix-link-props (&rest plist)org-store-mairix-link-props98,3633
(defun org-mairix-message-send-and-exit-with-link ()org-mairix-message-send-and-exit-with-link127,4994
(defun org-mairix-open (search)org-mairix-open141,5601
(defun org-mairix-command-substitution (cmd search args)org-mairix-command-substitution165,6733
(defcustom org-mairix-link-clipboard "~/.org-mairix-link"org-mairix-link-clipboard180,7373
(defun org-mairix-insert-link ()org-mairix-insert-link191,7808
(defgroup org-mairix-mutt nilorg-mairix-mutt204,8211
(defcustom org-mairix-mutt-display-commandorg-mairix-mutt-display-command209,8329
(defun org-mairix-mutt-display-results (search args)org-mairix-mutt-display-results220,8740
(defgroup org-mairix-gnus nilorg-mairix-gnus235,9459
(defcustom org-mairix-gnus-results-group "nnmaildir:mairix"org-mairix-gnus-results-group240,9577
(defcustom org-mairix-gnus-select-display-group-function org-mairix-gnus-select-display-group-function247,9859
(defun org-mairix-store-gnus-link ()org-mairix-store-gnus-link262,10479
(defun org-mairix-gnus-display-results (search args)org-mairix-gnus-display-results278,11175
(defun org-mairix-gnus-select-display-group-function-gg ()org-mairix-gnus-select-display-group-function-gg316,12928
(defun org-mairix-gnus-select-display-group-function-bzg ()org-mairix-gnus-select-display-group-function-bzg324,13291

vendor/org-6.34c/contrib/lisp/org-man.el,222
(defcustom org-man-command 'manorg-man-command33,1191
(defun org-man-open (path)org-man-open38,1344
(defun org-man-store-link ()org-man-store-link43,1499
(defun org-man-get-page-name ()org-man-get-page-name55,1900

vendor/org-6.34c/contrib/lisp/org-mtags.el,540
(defgroup org-mtags nilorg-mtags88,3550
(defface org-mtags    ; similar to shadoworg-mtags93,3659
(defcustom org-mtags-prefer-muse-templates torg-mtags-prefer-muse-templates107,4183
(defconst org-mtags-supported-tagsorg-mtags-supported-tags114,4425
(defconst org-mtags-fontification-reorg-mtags-fontification-re119,4665
(defun org-mtags-replace ()org-mtags-replace126,4876
(defun org-mtags-get-tag-and-attributes ()org-mtags-get-tag-and-attributes213,7856
(defun org-mtags-fontify-tags (limit)org-mtags-fontify-tags244,9100

vendor/org-6.34c/contrib/lisp/org-panel.el,2775
(defvar orgpan-minor-mode-version t)orgpan-minor-mode-version67,2142
(defface orgpan-fieldorgpan-field69,2180
(defvar orgpan-field-face 'orgpan-field)orgpan-field-face73,2273
(defface orgpan-active-fieldorgpan-active-field75,2315
(defvar orgpan-active-field-face 'orgpan-active-field)orgpan-active-field-face79,2412
(defface orgpan-spacelineorgpan-spaceline81,2468
(defcustom orgpan-panel-buttons nilorgpan-panel-buttons86,2562
(defconst orgpan-org-mode-commands nil)orgpan-org-mode-commands104,3150
(defconst orgpan-org-commandsorgpan-org-commands105,3190
(defun orgpan-delete-panel ()orgpan-delete-panel138,3837
(defvar orgpan-last-command-was-from-panel nil)orgpan-last-command-was-from-panel152,4325
(defun orgpan-mode-pre-command ()orgpan-mode-pre-command153,4373
(defun orgpan-mode-post-command ()orgpan-mode-post-command187,6069
(defun orgpan-last-buffer ()orgpan-last-buffer231,7852
(defun orgpan-switch-buffer ()orgpan-switch-buffer245,8310
(defun orgpan-paste-subtree ()orgpan-paste-subtree263,9079
(defun orgpan-cut-subtree ()orgpan-cut-subtree269,9226
(defun orgpan-copy-subtree ()orgpan-copy-subtree279,9558
(defvar orgpan-ovl-help nil)orgpan-ovl-help293,9962
(defun orgpan-check-panel-mode ()orgpan-check-panel-mode295,9992
(defun orgpan-display-bindings-help ()orgpan-display-bindings-help299,10120
(defun orgpan-forward-field ()orgpan-forward-field310,10545
(defun orgpan-backward-field ()orgpan-backward-field323,10922
(defconst orgpan-mode-maporgpan-mode-map338,11296
(defun orgpan-occur ()orgpan-occur375,12739
(defvar orgpan-panel-window nilorgpan-panel-window384,12990
(defvar orgpan-panel-buffer nilorgpan-panel-buffer387,13069
(defvar orgpan-org-window nil)orgpan-org-window391,13171
(defvar orgpan-org-buffer nil)orgpan-org-buffer395,13270
(defvar orgpan-last-org-buffer nil)orgpan-last-org-buffer398,13352
(defvar orgpan-point nil)orgpan-point401,13444
(defun orgpan-avoid-viper-in-buffer ()orgpan-avoid-viper-in-buffer404,13516
(define-derived-mode orgpan-mode nil "Org-Panel"orgpan-mode410,13803
(defun orgpan-insert-field (text keymap explain)orgpan-insert-field423,14209
(defconst orgpan-with-keymaporgpan-with-keymap433,14516
(defconst orgpan-without-keymaporgpan-without-keymap444,14972
(defun orgpan-make-panel-without-buttons (buf)orgpan-make-panel-without-buttons470,16076
(defun orgpan-make-panel-with-buttons (buf)orgpan-make-panel-with-buttons488,16778
(defun orgpan-make-panel-buffer ()orgpan-make-panel-buffer540,19120
(defun orgpan-help ()orgpan-help553,19607
(defun orgpan-panel ()orgpan-panel563,19926
(defun orgpan-minor-post-command ()orgpan-minor-post-command613,21927
(define-minor-mode orgpan-panel-minor-modeorgpan-panel-minor-mode630,22567

vendor/org-6.34c/contrib/lisp/org-R.el,1734
(defconst org-R-skeleton-funcall-1-argorg-R-skeleton-funcall-1-arg59,2641
(defconst org-R-skeleton-funcall-2-argsorg-R-skeleton-funcall-2-args64,2784
(defconst org-R-write-org-table-deforg-R-write-org-table-def69,2922
(defun org-R-apply-maybe ()org-R-apply-maybe94,3983
(defun org-R-apply ()org-R-apply105,4267
(defun org-R-apply-throughout-subtree ()org-R-apply-throughout-subtree146,5847
(defun org-R-apply-throughout-buffer ()org-R-apply-throughout-buffer163,6474
(defun org-R-construct-code (options)org-R-construct-code174,6782
(defun org-R-get-user-code (&optional R)org-R-get-user-code195,7525
(defun org-R-off-the-shelf-code (options)org-R-off-the-shelf-code205,7837
(defun org-R-set-user-supplied-args (args user-args)org-R-set-user-supplied-args396,14895
(defun org-R-plist-to-R-args (plist)org-R-plist-to-R-args402,15100
(defun org-R-alist-to-R-args (alist)org-R-alist-to-R-args414,15492
(defun org-R-make-index-vectors (cols)org-R-make-index-vectors428,15896
(defun org-R-number-of-columns (cols)org-R-number-of-columns504,19072
(defun org-R-eval (R-function csv-file options)org-R-eval511,19247
(defun org-R-export-to-csv (csv-file options)org-R-export-to-csv640,24515
(defun org-R-find-table (name-or-id &optional markerp)org-R-find-table669,25681
(defun org-R-make-expr (R-function csv-file options)org-R-make-expr726,28101
(defun org-R-get-options ()org-R-get-options759,29135
(defun org-R-add-options-to-plist (p opt-string op regexp)org-R-add-options-to-plist804,30376
(defun org-R-sanitise-options (options)org-R-sanitise-options822,30969
(defun org-R-showcode (R)org-R-showcode826,31103
(defun org-R-get-remote-range (name-or-id form)org-R-get-remote-range840,31507

vendor/org-6.34c/contrib/lisp/org-registry.el,985
(defgroup org-registry nilorg-registry68,2415
(defcustom org-registry-fileorg-registry-file72,2482
(defcustom org-registry-find-file 'find-file-other-windoworg-registry-find-file78,2624
(defvar org-registry-alist nilorg-registry-alist83,2754
(defun org-registry-show (&optional visit)org-registry-show87,2844
(defun org-registry-display-files (files link)org-registry-display-files133,4512
(defun org-registry-assoc-all (link &optional registry)org-registry-assoc-all146,4949
(defun org-registry-find-all (test &optional registry)org-registry-find-all152,5152
(defun org-registry-visit ()org-registry-visit160,5404
(defun org-registry-initialize (&optional from-scratch)org-registry-initialize167,5567
(defun org-registry-insinuate ()org-registry-insinuate190,6411
(defun org-registry-get-entries (file)org-registry-get-entries198,6674
(defun org-registry-update ()org-registry-update219,7495
(defun org-registry-create (entries)org-registry-create246,8492

vendor/org-6.34c/contrib/lisp/org-screen.el,313
(defcustom org-screen-program-name "/usr/bin/screen"org-screen-program-name59,2170
(defun org-screen (name)org-screen64,2306
(defun org-screen-buffer-name (name)org-screen-buffer-name71,2505
(defun org-screen-helper (name arg)org-screen-helper75,2643
(defun org-screen-goto (name)org-screen-goto93,3265

vendor/org-6.34c/contrib/lisp/org-special-blocks.el,433
(defvar org-special-blocks-ignore-regexp "^\\(LaTeX\\|HTML\\)$"org-special-blocks-ignore-regexp43,1664
(defun org-special-blocks-make-special-cookies ()org-special-blocks-make-special-cookies48,1886
(defun org-special-blocks-convert-latex-special-cookies ()org-special-blocks-convert-latex-special-cookies64,2546
(defun org-special-blocks-convert-html-special-cookies ()org-special-blocks-convert-html-special-cookies77,3023

vendor/org-6.34c/contrib/lisp/org-toc.el,4526
(defvar org-toc-base-buffer nil)org-toc-base-buffer38,1220
(defvar org-toc-columns-shown nil)org-toc-columns-shown39,1253
(defvar org-toc-odd-levels-only nil)org-toc-odd-levels-only40,1288
(defvar org-toc-config-alist nil)org-toc-config-alist41,1325
(defvar org-toc-cycle-global-status nil)org-toc-cycle-global-status42,1359
(defalias 'org-show-table-of-contents 'org-toc-show)org-show-table-of-contents43,1400
(defgroup org-toc nilorg-toc45,1454
(defcustom org-toc-default-depth 1org-toc-default-depth50,1577
(defcustom org-toc-follow-mode nilorg-toc-follow-mode57,1783
(defcustom org-toc-info-mode nilorg-toc-info-mode63,1965
(defcustom org-toc-show-subtree-mode nilorg-toc-show-subtree-mode69,2162
(defcustom org-toc-recenter-mode torg-toc-recenter-mode77,2415
(defcustom org-toc-recenter 0org-toc-recenter83,2577
(defcustom org-toc-info-exclude '("ALLTAGS")org-toc-info-exclude90,2829
(defvar org-toc-mode-map (make-sparse-keymap)org-toc-mode-map97,3039
(defun org-toc-mode ()org-toc-mode100,3118
(define-key org-toc-mode-map "f" 'org-toc-follow-mode)org-toc-mode-map111,3394
(define-key org-toc-mode-map "S" 'org-toc-show-subtree-mode)org-toc-mode-map112,3449
(define-key org-toc-mode-map "s" 'org-toc-store-config)org-toc-mode-map113,3510
(define-key org-toc-mode-map "g" 'org-toc-restore-config)org-toc-mode-map114,3566
(define-key org-toc-mode-map "i" 'org-toc-info-mode)org-toc-mode-map115,3624
(define-key org-toc-mode-map "r" 'org-toc-recenter-mode)org-toc-mode-map116,3677
(define-key org-toc-mode-map "p" 'org-toc-previous)org-toc-mode-map119,3754
(define-key org-toc-mode-map "n" 'org-toc-next)org-toc-mode-map120,3806
(define-key org-toc-mode-map [(left)] 'org-toc-previous)org-toc-mode-map121,3854
(define-key org-toc-mode-map [(right)] 'org-toc-next)org-toc-mode-map122,3911
(define-key org-toc-mode-map [(up)] 'org-toc-previous)org-toc-mode-map123,3965
(define-key org-toc-mode-map [(down)] 'org-toc-next)org-toc-mode-map124,4020
(define-key org-toc-mode-map "1" (lambda() (interactive) (org-toc-show 1 (point))))org-toc-mode-map125,4073
(define-key org-toc-mode-map "2" (lambda() (interactive) (org-toc-show 2 (point))))org-toc-mode-map126,4157
(define-key org-toc-mode-map "3" (lambda() (interactive) (org-toc-show 3 (point))))org-toc-mode-map127,4241
(define-key org-toc-mode-map "4" (lambda() (interactive) (org-toc-show 4 (point))))org-toc-mode-map128,4325
(define-key org-toc-mode-map " " 'org-toc-goto)org-toc-mode-map129,4409
(define-key org-toc-mode-map "q" 'org-toc-quit)org-toc-mode-map130,4457
(define-key org-toc-mode-map "x" 'org-toc-quit)org-toc-mode-map131,4505
(define-key org-toc-mode-map [(tab)] 'org-toc-jump)org-toc-mode-map133,4603
(define-key org-toc-mode-map "v" 'org-toc-jump)org-toc-mode-map134,4655
(define-key org-toc-mode-map [(return)]org-toc-mode-map136,4750
(define-key org-toc-mode-map "c" 'org-toc-columns)org-toc-mode-map140,4852
(define-key org-toc-mode-map "?" 'org-toc-help)org-toc-mode-map141,4903
(define-key org-toc-mode-map ":" 'org-toc-cycle-subtree)org-toc-mode-map142,4951
(define-key org-toc-mode-map "\C-c\C-o" 'org-open-at-point)org-toc-mode-map143,5008
(define-key org-toc-mode-map (kbd "C-S-<iso-lefttab>")org-toc-mode-map145,5105
(define-key org-toc-mode-map [(control tab)]org-toc-mode-map148,5228
(defun org-toc-follow-mode ()org-toc-follow-mode152,5345
(defun org-toc-info-mode ()org-toc-info-mode159,5571
(defun org-toc-show-subtree-mode ()org-toc-show-subtree-mode166,5785
(defun org-toc-recenter-mode (&optional line)org-toc-recenter-mode173,6047
(defun org-toc-cycle-subtree ()org-toc-cycle-subtree185,6505
(defun org-toc-before-first-heading-p ()org-toc-before-first-heading-p210,7306
(defun org-toc-show (&optional depth position)org-toc-show216,7456
(defun org-toc-goto (&optional jump cycle)org-toc-goto277,9755
(defun org-toc-cycle-base-buffer ()org-toc-cycle-base-buffer301,10586
(defun org-toc-jump (&optional delete)org-toc-jump308,10793
(defun org-toc-previous ()org-toc-previous315,11052
(defun org-toc-next ()org-toc-next326,11384
(defun org-toc-quit ()org-toc-quit333,11582
(defun org-toc-columns ()org-toc-columns341,11748
(defun org-toc-info ()org-toc-info353,12157
(defun org-toc-store-config ()org-toc-store-config376,12933
(defun org-toc-restore-config ()org-toc-restore-config395,13604
(defun org-toc-get-headlines-status ()org-toc-get-headlines-status436,14955
(defun org-toc-help ()org-toc-help457,15576

vendor/org-6.34c/contrib/lisp/org-track.el,651
(defgroup org-track nilorg-track62,1827
(defcustom org-track-directory "~/.emacs.d/org/lisp"org-track-directory76,2282
(defcustom org-track-compile-sources torg-track-compile-sources81,2462
(defcustom org-track-org-url "http://orgmode.org/"org-track-org-url89,2737
(defcustom org-track-org-package "org-latest.tar.gz"org-track-org-package94,2885
(defcustom org-track-remove-package nilorg-track-remove-package101,3129
(defun org-track-update ()org-track-update111,3251
(defun org-track-fetch-package (&optional directory)org-track-fetch-package144,4385
(defun org-track-compile-org (&optional directory)org-track-compile-org181,5774

vendor/org-6.34c/contrib/lisp/org2rem.el,2459
(defgroup org2rem nilorg2rem49,1482
(defcustom org-combined-agenda-remind-file "~/org.rem"org-combined-agenda-remind-file54,1612
(defcustom org-remind-combined-name "OrgMode"org-remind-combined-name61,1914
(defcustom org-remind-use-deadline '(event-if-not-todo todo-due)org-remind-use-deadline66,2069
(defcustom org-remind-use-scheduled '(todo-start)org-remind-use-scheduled82,2770
(defcustom org-remind-categories '(local-tags category)org-remind-categories101,3625
(defcustom org-remind-include-todo nilorg-remind-include-todo117,4260
(defcustom org-remind-include-sexps torg-remind-include-sexps125,4493
(defcustom org-remind-deadline-over-scheduled torg-remind-deadline-over-scheduled131,4713
(defcustom org-remind-escape-percentage torg-remind-escape-percentage137,4914
(defcustom org-remind-extra-warn-days 3org-remind-extra-warn-days142,5063
(defcustom org-remind-advanced-warn-days 3org-remind-advanced-warn-days147,5177
(defcustom org-remind-suppress-last-newline nilorg-remind-suppress-last-newline152,5298
(defcustom org-remind-include-body 100org-remind-include-body157,5450
(defcustom org-remind-store-UID nilorg-remind-store-UID168,5876
(defun org2rem-this-file ()org2rem-this-file187,6633
(defun org2rem-all-agenda-files ()org2rem-all-agenda-files195,6873
(defun org2rem-combine-agenda-files ()org2rem-combine-agenda-files203,7154
(defun org2rem (combine &rest files)org2rem209,7399
(defvar org-before-save-Remind-file-hook nilorg-before-save-Remind-file-hook258,9463
(defvar org-after-save-Remind-file-hook nilorg-after-save-Remind-file-hook262,9615
(defvar org-agenda-default-appointment-duration) ; defined in org-agenda.elorg-agenda-default-appointment-duration268,9863
(defun org-print-remind-entries (&optional combine)org-print-remind-entries269,9939
(defun org-export-get-remind-categories ()org-export-get-remind-categories516,19661
(defun org-remind-cleanup-string (s &optional is-body maxlength)org-remind-cleanup-string531,20225
(defun org-get-entry ()org-get-entry571,21738
(defun org-start-remind-file (name)org-start-remind-file577,21907
(defun org-finish-remind-file ()org-finish-remind-file592,22321
(defun org-rem-ts-to-remind-date-type (s)org-rem-ts-to-remind-date-type596,22447
(defun org-rem-ts-to-string (s keyword &optional inc day-repeat day-advance-warn)org-rem-ts-to-string612,23073
(defun org-rem-time-diff-days (end start)org-rem-time-diff-days638,24212

vendor/org-6.34c/contrib/lisp/orgtbl-sqlinsert.el,301
(defun orgtbl-to-sqlinsert (table params)orgtbl-to-sqlinsert28,975
(defun orgtbl-sql-quote (str)orgtbl-sql-quote93,3352
(defun orgtbl-sql-strip-dollars-escapes-tildes (str)orgtbl-sql-strip-dollars-escapes-tildes97,3528
(defun orgtbl-sql-strip-and-quote (str)orgtbl-sql-strip-and-quote106,3798

vendor/org-6.34c/contrib/scripts/dir2org.zsh,118
function headline {headline19,286
function scan_and_populate {scan_and_populate27,418
function main {main49,884

vendor/org-6.34c/doc/orgcard.tex,1039
\centerline{(for version \orgversionnumber)}Getting Started275,8889
\metax{To read the on-line documentation try}{M-x org-info}Visibility Cycling286,9170
\key{reveal context around point}{C-c C-r}Motion294,9488
\key{previous/next plain list item}{S-UP/DOWN$^3$}Structure Editing302,9737
\metax{narrow buffer to subtree / widen}{C-x n s/w}Archiving321,10470
\key{force cycling of an ARCHIVEd tree}{C-TAB}Filtering and Sparse Trees328,10712
\key{toggle table coordinate grid}{C-c \}}Links428,14289
\key{update checkbox statistics (\kbd{C-u} : whole file)}{C-c \#}Tags531,18155
\key{globally (agenda) match tags at cursor}{C-c C-o}Properties and Column View538,18382
\key{Delete current column}{M-S-left}Timestamps556,18984
\key{insert/update table with clock report}{C-c C-x C-r}Agenda Views589,20294
\key{insert citation using RefTeX}{C-c C-x [}Exporting and Publishing681,23447
\key{toggle COMMENT keyword on entry}{C-c ;}Dynamic Blocks739,25595
\metax{update all dynamic blocks}{C-u C-c C-x C-u}Notes744,25716

vendor/org-6.34c/lisp/org-agenda.el,33443
(defvar calendar-mode-map)calendar-mode-map65,3145
(defvar org-mobile-force-id-on-agenda-items) ; defined in org-mobile.elorg-mobile-force-id-on-agenda-items66,3172
(defvar org-habit-show-habits)org-habit-show-habits67,3244
(defvar org-habit-show-habits-only-for-today)org-habit-show-habits-only-for-today68,3275
(defvar org-agenda-buffer-name)org-agenda-buffer-name71,3385
(defvar org-agenda-overriding-header)org-agenda-overriding-header72,3417
(defvar org-agenda-title-append nil)org-agenda-title-append73,3455
(defvar entry)entry74,3492
(defvar date)date75,3507
(defvar org-agenda-undo-list)org-agenda-undo-list76,3521
(defvar org-agenda-pending-undo-list)org-agenda-pending-undo-list77,3551
(defvar original-date) ; dynamically scoped, calendar.el does scope thisoriginal-date78,3589
(defcustom org-agenda-confirm-kill 1org-agenda-confirm-kill80,3663
(defcustom org-agenda-compact-blocks nilorg-agenda-compact-blocks90,4063
(defcustom org-agenda-block-separator ?=org-agenda-block-separator96,4246
(defgroup org-agenda-export nilorg-agenda-export105,4548
(defcustom org-agenda-with-colors torg-agenda-with-colors110,4686
(defcustom org-agenda-exporter-settings nilorg-agenda-exporter-settings115,4816
(defcustom org-agenda-before-write-hook '(org-agenda-add-entry-text)org-agenda-before-write-hook130,5358
(defcustom org-agenda-add-entry-text-maxlines 0org-agenda-add-entry-text-maxlines137,5631
(defcustom org-agenda-add-entry-text-descriptive-links torg-agenda-add-entry-text-descriptive-links151,6266
(defcustom org-agenda-export-html-style ""org-agenda-export-html-style159,6610
(defgroup org-agenda-custom-commands nilorg-agenda-custom-commands201,8027
(defconst org-sorting-choiceorg-sorting-choice206,8173
(defconst org-agenda-custom-commands-local-optionsorg-agenda-custom-commands-local-options218,8611
(defcustom org-agenda-custom-commands nilorg-agenda-custom-commands294,11327
(defcustom org-agenda-query-register ?oorg-agenda-query-register429,17202
(defcustom org-stuck-projectsorg-stuck-projects436,17474
(defcustom org-agenda-filter-effort-default-operator "<"org-agenda-filter-effort-default-operator471,19411
(defgroup org-agenda-skip nilorg-agenda-skip480,19778
(defgroup org-agenda-daily/weekly nilorg-agenda-daily/weekly484,19907
(defgroup org-agenda-todo-list nilorg-agenda-todo-list488,20048
(defgroup org-agenda-match-view nilorg-agenda-match-view492,20192
(defgroup org-agenda-search-view nilorg-agenda-search-view496,20354
(defvar org-agenda-archives-mode nilorg-agenda-archives-mode501,20518
(defcustom org-agenda-skip-comment-trees torg-agenda-skip-comment-trees508,20856
(defcustom org-agenda-todo-list-sublevels torg-agenda-todo-list-sublevels514,21070
(defcustom org-agenda-todo-ignore-with-date nilorg-agenda-todo-ignore-with-date522,21375
(defcustom org-agenda-todo-ignore-scheduled nilorg-agenda-todo-ignore-scheduled534,21939
(defcustom org-agenda-todo-ignore-deadlines nilorg-agenda-todo-ignore-deadlines544,22337
(defcustom org-agenda-tags-todo-honor-ignore-options nilorg-agenda-tags-todo-honor-ignore-options554,22781
(defcustom org-agenda-skip-scheduled-if-done nilorg-agenda-skip-scheduled-if-done569,23403
(defcustom org-agenda-skip-scheduled-if-deadline-is-shown nilorg-agenda-skip-scheduled-if-deadline-is-shown579,23832
(defcustom org-agenda-skip-deadline-if-done nilorg-agenda-skip-deadline-if-done596,24631
(defcustom org-agenda-skip-additional-timestamps-same-entry torg-agenda-skip-additional-timestamps-same-entry606,25110
(defcustom org-agenda-skip-timestamp-if-done nilorg-agenda-skip-timestamp-if-done613,25417
(defcustom org-agenda-dim-blocked-tasks torg-agenda-dim-blocked-tasks619,25619
(defcustom org-timeline-show-empty-dates 3org-timeline-show-empty-dates641,26673
(defgroup org-agenda-startup nilorg-agenda-startup653,27179
(defcustom org-finalize-agenda-hook nilorg-finalize-agenda-hook658,27330
(defcustom org-agenda-mouse-1-follows-link nilorg-agenda-mouse-1-follows-link663,27469
(defcustom org-agenda-start-with-follow-mode nilorg-agenda-start-with-follow-mode670,27747
(defcustom org-agenda-show-outline-path torg-agenda-show-outline-path675,27915
(defcustom org-agenda-start-with-entry-text-mode nilorg-agenda-start-with-entry-text-mode680,28073
(defcustom org-agenda-entry-text-maxlines 5org-agenda-entry-text-maxlines685,28249
(defcustom org-agenda-entry-text-exclude-regexps nilorg-agenda-entry-text-exclude-regexps694,28570
(defvar org-agenda-entry-text-cleanup-hook nilorg-agenda-entry-text-cleanup-hook701,28856
(defvar org-agenda-include-inactive-timestamps nilorg-agenda-include-inactive-timestamps709,29294
(defgroup org-agenda-windows nilorg-agenda-windows712,29419
(defcustom org-agenda-window-setup 'reorganize-frameorg-agenda-window-setup717,29570
(defcustom org-agenda-window-frame-fractions '(0.5 . 0.75)org-agenda-window-frame-fractions735,30327
(defcustom org-agenda-restore-windows-after-quit nilorg-agenda-restore-windows-after-quit742,30703
(defcustom org-agenda-ndays 7org-agenda-ndays752,31159
(defcustom org-agenda-start-on-weekday 1org-agenda-start-on-weekday759,31373
(defcustom org-agenda-show-all-dates torg-agenda-show-all-dates768,31741
(defcustom org-agenda-format-date 'org-agenda-format-date-alignedorg-agenda-format-date774,31967
(defun org-agenda-format-date-aligned (date)org-agenda-format-date-aligned785,32474
(defcustom org-agenda-weekend-days '(6 0)org-agenda-weekend-days808,33262
(defcustom org-agenda-include-diary nilorg-agenda-include-diary822,33712
(defcustom org-agenda-include-all-todo nilorg-agenda-include-all-todo828,33946
(defcustom org-agenda-repeating-timestamp-show-all torg-agenda-repeating-timestamp-show-all836,34285
(defcustom org-scheduled-past-days 10000org-scheduled-past-days843,34552
(defcustom org-agenda-log-mode-items '(closed clock)org-agenda-log-mode-items851,34877
(defcustom org-agenda-log-mode-add-notes torg-agenda-log-mode-add-notes863,35446
(defcustom org-agenda-start-with-log-mode nilorg-agenda-start-with-log-mode871,35774
(defcustom org-agenda-start-with-clockreport-mode nilorg-agenda-start-with-clockreport-mode877,35970
(defcustom org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2)org-agenda-clockreport-parameter-plist883,36182
(defcustom org-agenda-search-view-always-boolean nilorg-agenda-search-view-always-boolean894,36747
(defcustom org-agenda-search-view-force-full-words nilorg-agenda-search-view-force-full-words925,38122
(defgroup org-agenda-time-grid nilorg-agenda-time-grid932,38343
(defcustom org-agenda-search-headline-for-time torg-agenda-search-headline-for-time937,38492
(defcustom org-agenda-use-time-grid torg-agenda-use-time-grid948,39015
(defcustom org-agenda-time-gridorg-agenda-time-grid958,39459
(defgroup org-agenda-sorting nilorg-agenda-sorting990,40708
(defcustom org-agenda-sorting-strategyorg-agenda-sorting-strategy995,40847
(defcustom org-agenda-cmp-user-defined nilorg-agenda-cmp-user-defined1055,43898
(defcustom org-sort-agenda-notime-is-late torg-sort-agenda-notime-is-late1065,44323
(defcustom org-sort-agenda-noeffort-is-high torg-sort-agenda-noeffort-is-high1075,44798
(defgroup org-agenda-line-format nilorg-agenda-line-format1084,45192
(defcustom org-agenda-prefix-formatorg-agenda-prefix-format1089,45356
(defvar org-prefix-format-compiled nilorg-prefix-format-compiled1155,48336
(defcustom org-agenda-todo-keyword-format "%-1s"org-agenda-todo-keyword-format1159,48488
(defcustom org-agenda-timerange-leaders '("" "(%d/%d): ")org-agenda-timerange-leaders1166,48751
(defcustom org-agenda-scheduled-leaders '("Scheduled: " "Sched.%2dx: ")org-agenda-scheduled-leaders1180,49350
(defcustom org-agenda-inactive-leader "["org-agenda-inactive-leader1193,50029
(defcustom org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: ")org-agenda-deadline-leaders1201,50334
(defcustom org-agenda-remove-times-when-in-prefix torg-agenda-remove-times-when-in-prefix1214,50868
(defcustom org-agenda-default-appointment-duration nilorg-agenda-default-appointment-duration1232,51707
(defcustom org-agenda-show-inherited-tags torg-agenda-show-inherited-tags1241,52073
(defcustom org-agenda-hide-tags-regexp nilorg-agenda-hide-tags-regexp1246,52229
(defcustom org-agenda-remove-tags nilorg-agenda-remove-tags1256,52631
(defcustom org-agenda-tags-column (if (featurep 'xemacs) -79 -80)org-agenda-tags-column1270,53132
(defcustom org-agenda-fontify-priorities 'cookiesorg-agenda-fontify-priorities1281,53597
(defgroup org-agenda-column-view nilorg-agenda-column-view1301,54482
(defcustom org-agenda-columns-show-summaries torg-agenda-columns-show-summaries1306,54624
(defcustom org-agenda-columns-remove-prefix-from-item torg-agenda-columns-remove-prefix-from-item1311,54799
(defcustom org-agenda-columns-compute-summary-properties torg-agenda-columns-compute-summary-properties1321,55323
(defcustom org-agenda-columns-add-appointments-to-effort-sum nilorg-agenda-columns-add-appointments-to-effort-sum1332,55849
(defcustom org-agenda-auto-exclude-function nilorg-agenda-auto-exclude-function1342,56349
(defun org-add-agenda-custom-command (entry)org-add-agenda-custom-command1358,56977
(defvar org-agenda-mode-map (make-sparse-keymap)org-agenda-mode-map1369,57413
(defvar org-agenda-menu) ; defined later in this file.org-agenda-menu1374,57584
(defvar org-agenda-restrict) ; defined later in this file.org-agenda-restrict1375,57639
(defvar org-agenda-follow-mode nil)org-agenda-follow-mode1376,57698
(defvar org-agenda-entry-text-mode nil)org-agenda-entry-text-mode1377,57734
(defvar org-agenda-clockreport-mode nil)org-agenda-clockreport-mode1378,57774
(defvar org-agenda-show-log nil)org-agenda-show-log1379,57815
(defvar org-agenda-redo-command nil)org-agenda-redo-command1380,57848
(defvar org-agenda-query-string nil)org-agenda-query-string1381,57885
(defvar org-agenda-mode-hook nilorg-agenda-mode-hook1382,57922
(defvar org-agenda-type nil)org-agenda-type1384,58019
(defvar org-agenda-force-single-file nil)org-agenda-force-single-file1385,58048
(defvar org-agenda-bulk-marked-entries) ;; Defined further down in this fileorg-agenda-bulk-marked-entries1386,58090
(defun org-agenda-mode ()org-agenda-mode1388,58168
(define-key org-agenda-mode-map "?" 'org-agenda-show-the-flagging-note)org-agenda-mode-map1556,67436
(defvar org-agenda-allow-remote-undo torg-agenda-allow-remote-undo1714,74956
(defvar org-agenda-undo-list nilorg-agenda-undo-list1716,75057
(defvar org-agenda-undo-has-started-in nilorg-agenda-undo-has-started-in1718,75157
(defvar org-agenda-pending-undo-list nilorg-agenda-pending-undo-list1720,75279
(defun org-agenda-undo ()org-agenda-undo1724,75399
(defun org-verify-change-for-undo (l1 l2)org-verify-change-for-undo1758,76710
(defvar org-agenda-restrict nil)org-agenda-restrict1766,76977
(defvar org-agenda-restrict-begin (make-marker))org-agenda-restrict-begin1767,77010
(defvar org-agenda-restrict-end (make-marker))org-agenda-restrict-end1768,77059
(defvar org-agenda-last-dispatch-buffer nil)org-agenda-last-dispatch-buffer1769,77106
(defvar org-agenda-overriding-restriction nil)org-agenda-overriding-restriction1770,77151
(defun org-agenda (&optional arg keys restriction)org-agenda1773,77214
(defun org-agenda-normalize-custom-commands (cmds)org-agenda-normalize-custom-commands1940,84249
(defun org-agenda-get-restriction-and-command (prefix-descriptions)org-agenda-get-restriction-and-command1950,84504
(defun org-run-agenda-series (name series)org-run-agenda-series2102,89866
(defmacro org-batch-agenda (cmd-key &rest parameters)org-batch-agenda2145,91284
(defun org-encode-for-stdout (string)org-encode-for-stdout2167,92239
(defvar org-agenda-info nil)org-agenda-info2170,92288
(defmacro org-batch-agenda-csv (cmd-key &rest parameters)org-batch-agenda-csv2173,92333
(defun org-fix-agenda-info (props)org-fix-agenda-info2232,94975
(defun org-agenda-export-csv-mapper (prop)org-agenda-export-csv-mapper2263,96380
(defun org-store-agenda-views (&rest parameters)org-store-agenda-views2276,96687
(defmacro org-batch-store-agenda-views (&rest parameters)org-batch-store-agenda-views2282,96850
(defun org-agenda-mark-header-line (pos)org-agenda-mark-header-line2310,97972
(defvar org-mobile-creating-agendas)org-mobile-creating-agendas2320,98349
(defun org-write-agenda (file &optional open nosettings)org-write-agenda2321,98386
(defvar org-agenda-filter-overlays nil)org-agenda-filter-overlays2405,101821
(defun org-agenda-mark-filtered-text ()org-agenda-mark-filtered-text2407,101862
(defun org-agenda-unmark-filtered-text ()org-agenda-unmark-filtered-text2418,102205
(defun org-agenda-remove-marked-text (property &optional value)org-agenda-remove-marked-text2423,102392
(defun org-agenda-add-entry-text ()org-agenda-add-entry-text2434,102767
(defun org-agenda-get-some-entry-text (marker n-lines &optional indentorg-agenda-get-some-entry-text2451,103485
(defun org-agenda-collect-markers ()org-agenda-collect-markers2538,106448
(defun org-create-marker-find-array (marker-list)org-create-marker-find-array2550,106805
(defvar org-agenda-marker-table nil) ; dynamically scoped parameterorg-agenda-marker-table2564,107309
(defun org-check-agenda-marker-table ()org-check-agenda-marker-table2565,107377
(defun org-check-for-org-mode ()org-check-for-org-mode2575,107713
(defun org-fit-agenda-window ()org-fit-agenda-window2581,107916
(defvar org-agenda-multi nil)  ; dynamically scopedorg-agenda-multi2592,108295
(defvar org-agenda-buffer-name "*Org Agenda*")org-agenda-buffer-name2593,108347
(defvar org-pre-agenda-window-conf nil)org-pre-agenda-window-conf2594,108394
(defvar org-agenda-columns-active nil)org-agenda-columns-active2595,108434
(defvar org-agenda-name nil)org-agenda-name2596,108473
(defvar org-agenda-filter nil)org-agenda-filter2597,108502
(defvar org-agenda-filter-preset nilorg-agenda-filter-preset2598,108533
(defun org-prepare-agenda (&optional name)org-prepare-agenda2605,108840
(defun org-finalize-agenda ()org-finalize-agenda2653,110754
(defun org-agenda-mark-clocking-task ()org-agenda-mark-clocking-task2688,112189
(defun org-agenda-fontify-priorities ()org-agenda-fontify-priorities2708,112989
(defun org-agenda-dim-blocked-tasks ()org-agenda-dim-blocked-tasks2738,114075
(defvar org-agenda-skip-function nilorg-agenda-skip-function2777,115512
(defun org-agenda-skip ()org-agenda-skip2788,116097
(defvar org-agenda-markers nilorg-agenda-markers2812,116933
(defvar org-agenda-last-marker-time (org-float-time)org-agenda-last-marker-time2814,117031
(defun org-agenda-new-marker (&optional pos)org-agenda-new-marker2817,117131
(defun org-agenda-reset-markers ()org-agenda-reset-markers2826,117436
(defun org-agenda-save-markers-for-cut-and-paste (beg end)org-agenda-save-markers-for-cut-and-paste2831,117592
(defun org-agenda-entry-text-show-here ()org-agenda-entry-text-show-here2838,117804
(defun org-agenda-entry-text-show ()org-agenda-entry-text-show2853,118446
(defun org-agenda-entry-text-hide ()org-agenda-entry-text-hide2864,118751
(defvar org-agenda-only-exact-dates nil) ; dynamically scopedorg-agenda-only-exact-dates2875,119047
(defun org-timeline (&optional include-all)org-timeline2877,119110
(defun org-get-all-dates (beg end &optional no-ranges force-today inactive empty pre-re)org-get-all-dates2969,122564
(defvar org-agenda-overriding-arguments nil) ; dynamically scoped parameterorg-agenda-overriding-arguments3013,124308
(defvar org-agenda-start-day nil  ; dynamically scoped parameterorg-agenda-start-day3014,124384
(defvar org-agenda-last-arguments nilorg-agenda-last-arguments3016,124514
(defvar org-starting-day nil) ; local variable in the agenda bufferorg-starting-day3018,124606
(defvar org-agenda-span nil) ; local variable in the agenda bufferorg-agenda-span3019,124674
(defvar org-include-all-loc nil) ; local variableorg-include-all-loc3020,124741
(defun org-agenda-list (&optional include-all start-day ndays)org-agenda-list3023,124807
(defun org-agenda-ndays-to-span (n)org-agenda-ndays-to-span3216,132251
(defvar org-agenda-search-history nil)org-agenda-search-history3221,132381
(defvar org-todo-only nil)org-todo-only3222,132420
(defvar org-search-syntax-table nilorg-search-syntax-table3224,132448
(defun org-search-syntax-table ()org-search-syntax-table3229,132673
(defvar org-agenda-last-search-view-search-was-boolean nil)org-agenda-last-search-view-search-was-boolean3236,132961
(defun org-search-view (&optional todo-only string edit-at)org-search-view3239,133037
(defvar org-select-this-todo-keyword nil)org-select-this-todo-keyword3466,142051
(defvar org-last-arg nil)org-last-arg3467,142093
(defun org-todo-list (arg)org-todo-list3470,142135
(defun org-tags-view (&optional todo-only match)org-tags-view3543,144995
(defvar org-agenda-skip-regexp nilorg-agenda-skip-regexp3613,147717
(defvar org-agenda-overriding-header nilorg-agenda-overriding-header3618,147956
(defun org-agenda-skip-entry-when-regexp-matches ()org-agenda-skip-entry-when-regexp-matches3623,148170
(defun org-agenda-skip-subtree-when-regexp-matches ()org-agenda-skip-subtree-when-regexp-matches3635,148704
(defun org-agenda-skip-entry-when-regexp-matches-in-subtree ()org-agenda-skip-entry-when-regexp-matches-in-subtree3646,149203
(defun org-agenda-skip-entry-if (&rest conditions)org-agenda-skip-entry-if3660,149910
(defun org-agenda-skip-subtree-if (&rest conditions)org-agenda-skip-subtree-if3665,150084
(defun org-agenda-skip-if (subtree conditions)org-agenda-skip-if3670,150258
(defun org-agenda-list-stuck-projects (&rest ignore)org-agenda-list-stuck-projects3723,152418
(defvar org-disable-agenda-to-diary nil)          ;Dynamically-scoped param.org-disable-agenda-to-diary3775,154208
(defvar list-diary-entries-hook)list-diary-entries-hook3776,154285
(defun org-get-entries-from-diary (date)org-get-entries-from-diary3778,154319
(defvar org-agenda-cleanup-fancy-diary-hook nilorg-agenda-cleanup-fancy-diary-hook3823,156021
(defun org-agenda-cleanup-fancy-diary ()org-agenda-cleanup-fancy-diary3826,156127
(defun org-modify-diary-entry-string (string)org-modify-diary-entry-string3861,157560
(defun org-diary-default-entry ()org-diary-default-entry3872,157957
(defun org-add-to-diary-list (&rest args)org-add-to-diary-list3882,158357
(defun org-diary (&rest args)org-diary3888,158526
(defun org-agenda-get-day-entries (file date &rest args)org-agenda-get-day-entries3956,161318
(defun org-agenda-get-todos ()org-agenda-get-todos4009,163380
(defun org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item (&optional end)org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item4062,165317
(defconst org-agenda-no-heading-messageorg-agenda-no-heading-message4077,166045
(defun org-agenda-get-timestamps ()org-agenda-get-timestamps4080,166137
(defun org-agenda-get-sexps ()org-agenda-get-sexps4175,169723
(defun org-diary-class (m1 d1 y1 m2 d2 y2 dayname &rest skip-weeks)org-diary-class4217,171054
(defalias 'org-get-closed 'org-agenda-get-progress)org-get-closed4241,172081
(defun org-agenda-get-progress ()org-agenda-get-progress4242,172133
(defun org-agenda-get-deadlines ()org-agenda-get-deadlines4335,175801
(defun org-agenda-deadline-face (fraction &optional wdays)org-agenda-deadline-face4418,178882
(defun org-agenda-get-scheduled (&optional deadline-results)org-agenda-get-scheduled4427,179248
(defun org-agenda-get-blocks ()org-agenda-get-blocks4531,182972
(defvar org-prefix-has-time nilorg-prefix-has-time4591,185151
(defvar org-prefix-has-tag nilorg-prefix-has-tag4594,185298
(defvar org-prefix-has-effort nilorg-prefix-has-effort4597,185444
(defvar org-prefix-category-length nilorg-prefix-category-length4600,185593
(defvar org-prefix-category-max-length nilorg-prefix-category-max-length4602,185710
(defun org-format-agenda-item (extra txt &optional category tags dotimeorg-format-agenda-item4605,185832
(defun org-agenda-fix-displayed-tags (txt tags add-inherited hide-re)org-agenda-fix-displayed-tags4758,192055
(defun org-downcase-keep-props (s)org-downcase-keep-props4790,193057
(defvar org-agenda-sorting-strategy) ;; because the def is in a let formorg-agenda-sorting-strategy4796,193216
(defvar org-agenda-sorting-strategy-selected nil)org-agenda-sorting-strategy-selected4797,193289
(defun org-agenda-add-time-grid-maybe (list ndays todayp)org-agenda-add-time-grid-maybe4799,193340
(defun org-compile-prefix-format (key)org-compile-prefix-format4830,194498
(defun org-set-sorting-strategy (key)org-set-sorting-strategy4875,196355
(defun org-get-time-of-day (s &optional string mod24)org-get-time-of-day4884,196751
(defun org-finalize-agenda-entries (list &optional nosort)org-finalize-agenda-entries4910,197843
(defun org-agenda-highlight-todo (x)org-agenda-highlight-todo4917,198089
(defsubst org-cmp-priority (a b)org-cmp-priority4949,199340
(defsubst org-cmp-effort (a b)org-cmp-effort4957,199579
(defsubst org-cmp-category (a b)org-cmp-category4966,199889
(defsubst org-cmp-todo-state (a b)org-cmp-todo-state4974,200178
(defsubst org-cmp-tag (a b)org-cmp-tag4997,201072
(defsubst org-cmp-time (a b)org-cmp-time5007,201380
(defsubst org-cmp-habit-p (a b)org-cmp-habit-p5016,201688
(defun org-entries-lessp (a b)org-entries-lessp5024,201936
(defvar org-agenda-restriction-lock-overlay (org-make-overlay 1 1)org-agenda-restriction-lock-overlay5055,203197
(defun org-agenda-set-restriction-lock (&optional type)org-agenda-set-restriction-lock5063,203606
(defun org-agenda-remove-restriction-lock (&optional noupdate)org-agenda-remove-restriction-lock5098,205057
(defun org-agenda-maybe-redo ()org-agenda-maybe-redo5112,205634
(defun org-agenda-check-type (error &rest types)org-agenda-check-type5127,206107
(defun org-agenda-quit ()org-agenda-quit5136,206403
(defun org-agenda-exit ()org-agenda-exit5162,207272
(defun org-agenda-execute (arg)org-agenda-execute5171,207611
(defun org-agenda-redo ()org-agenda-redo5178,207883
(defvar org-global-tags-completion-table nil)org-global-tags-completion-table5203,208831
(defvar org-agenda-filter-form nil)org-agenda-filter-form5204,208877
(defun org-agenda-filter-by-tag (strip &optional char narrow)org-agenda-filter-by-tag5205,208913
(defun org-agenda-get-represented-tags ()org-agenda-get-represented-tags5297,212484
(defun org-agenda-filter-by-tag-refine (strip &optional char)org-agenda-filter-by-tag-refine5308,212835
(defun org-agenda-filter-make-matcher ()org-agenda-filter-make-matcher5313,213030
(defun org-agenda-filter-effort-form (e)org-agenda-filter-effort-form5328,213580
(defun org-agenda-compare-effort (op value)org-agenda-compare-effort5341,214013
(defun org-agenda-filter-apply (filter)org-agenda-filter-apply5350,214352
(defun org-agenda-filter-by-tag-hide-line ()org-agenda-filter-by-tag-hide-line5367,214915
(defun org-agenda-fix-tags-filter-overlays-at (&optional pos)org-agenda-fix-tags-filter-overlays-at5375,215194
(defun org-agenda-filter-by-tag-show-all ()org-agenda-filter-by-tag-show-all5386,215583
(defun org-agenda-manipulate-query-add ()org-agenda-manipulate-query-add5393,215821
(defun org-agenda-manipulate-query-subtract ()org-agenda-manipulate-query-subtract5398,216068
(defun org-agenda-manipulate-query-add-re ()org-agenda-manipulate-query-add-re5403,216320
(defun org-agenda-manipulate-query-subtract-re ()org-agenda-manipulate-query-subtract-re5408,216569
(defun org-agenda-manipulate-query (char)org-agenda-manipulate-query5413,216823
(defun org-add-to-string (var string)org-add-to-string5437,217673
(defun org-agenda-goto-date (date)org-agenda-goto-date5440,217760
(defun org-agenda-goto-today ()org-agenda-goto-today5445,217893
(defun org-agenda-find-same-or-today-or-agenda (&optional cnt)org-agenda-find-same-or-today-or-agenda5464,218623
(defun org-agenda-later (arg)org-agenda-later5471,218940
(defun org-agenda-earlier (arg)org-agenda-earlier5501,220092
(defun org-agenda-view-mode-dispatch ()org-agenda-view-mode-dispatch5507,220283
(defun org-agenda-day-view (&optional day-of-year)org-agenda-day-view5534,221590
(defun org-agenda-week-view (&optional iso-week)org-agenda-week-view5540,221835
(defun org-agenda-month-view (&optional month)org-agenda-month-view5550,222296
(defun org-agenda-year-view (&optional year)org-agenda-year-view5555,222491
(defun org-agenda-change-time-span (span &optional n)org-agenda-change-time-span5569,223062
(defun org-agenda-compute-time-span (sd span &optional n)org-agenda-compute-time-span5586,223700
(defun org-agenda-next-date-line (&optional arg)org-agenda-next-date-line5638,225310
(defun org-agenda-previous-date-line (&optional arg)org-agenda-previous-date-line5651,225806
(defvar org-hl (org-make-overlay 1 1))org-hl5660,226162
(defun org-highlight (begin end &optional buffer)org-highlight5663,226244
(defun org-unhighlight ()org-unhighlight5668,226455
(defun org-highlight-until-next-command (beg end &optional buffer)org-highlight-until-next-command5673,226620
(defun org-unhighlight-once ()org-unhighlight-once5677,226852
(defun org-agenda-follow-mode ()org-agenda-follow-mode5682,227038
(defun org-agenda-entry-text-mode (&optional arg)org-agenda-entry-text-mode5692,227387
(defun org-agenda-clockreport-mode ()org-agenda-clockreport-mode5708,228052
(defun org-agenda-log-mode (&optional special)org-agenda-log-mode5718,228396
(defun org-agenda-archives-mode (&optional with-files)org-agenda-archives-mode5735,228989
(defun org-agenda-toggle-diary ()org-agenda-toggle-diary5754,229690
(defun org-agenda-toggle-time-grid ()org-agenda-toggle-time-grid5764,230025
(defun org-agenda-set-mode-name ()org-agenda-set-mode-name5774,230352
(defun org-agenda-post-command-hook ()org-agenda-post-command-hook5804,231395
(defun org-agenda-next-line ()org-agenda-next-line5810,231595
(defun org-agenda-previous-line ()org-agenda-previous-line5816,231780
(defun org-agenda-do-context-action ()org-agenda-do-context-action5823,231978
(defun org-agenda-show-priority ()org-agenda-show-priority5832,232276
(defun org-agenda-show-tags ()org-agenda-show-tags5840,232613
(defun org-agenda-goto (&optional highlight)org-agenda-goto5849,232900
(defvar org-agenda-after-show-hook nilorg-agenda-after-show-hook5868,233557
(defun org-agenda-kill ()org-agenda-kill5872,233714
(defvar org-archive-default-command)org-archive-default-command5905,234958
(defun org-agenda-archive-default ()org-agenda-archive-default5906,234995
(defun org-agenda-archive-default-with-confirmation ()org-agenda-archive-default-with-confirmation5912,235203
(defun org-agenda-archive ()org-agenda-archive5918,235438
(defun org-agenda-archive-to-archive-sibling ()org-agenda-archive-to-archive-sibling5923,235606
(defun org-agenda-archive-with (cmd &optional confirm)org-agenda-archive-with5928,235775
(defun org-remove-subtree-entries-from-agenda (&optional buf beg end)org-remove-subtree-entries-from-agenda5949,236469
(defun org-agenda-refile (&optional goto rfloc)org-agenda-refile5974,237369
(defun org-agenda-open-link (&optional arg)org-agenda-open-link5995,238037
(defun org-agenda-copy-local-variable (var)org-agenda-copy-local-variable6022,238974
(defun org-agenda-switch-to (&optional delete-other-windows)org-agenda-switch-to6029,239272
(defun org-agenda-goto-mouse (ev)org-agenda-goto-mouse6050,240023
(defun org-agenda-show (&optional full-entry)org-agenda-show6056,240194
(defvar org-agenda-show-window nil)org-agenda-show-window6068,240583
(defun org-agenda-show-and-scroll-up ()org-agenda-show-and-scroll-up6069,240619
(defun org-agenda-show-scroll-down ()org-agenda-show-scroll-down6084,241146
(defun org-agenda-show-1 (&optional more)org-agenda-show-16093,241440
(defun org-recenter-heading (n)org-recenter-heading6147,243131
(defvar org-agenda-cycle-counter nil)org-agenda-cycle-counter6152,243227
(defun org-agenda-cycle-show (&optional n)org-agenda-cycle-show6153,243265
(defun org-agenda-recenter (arg)org-agenda-recenter6176,244185
(defun org-agenda-show-mouse (ev)org-agenda-show-mouse6184,244418
(defun org-agenda-check-no-diary ()org-agenda-check-no-diary6190,244591
(defun org-agenda-error ()org-agenda-error6195,244758
(defun org-agenda-tree-to-indirect-buffer ()org-agenda-tree-to-indirect-buffer6198,244832
(defvar org-last-heading-marker (make-marker)org-last-heading-marker6216,245532
(defun org-agenda-todo-nextset ()org-agenda-todo-nextset6220,245686
(defun org-agenda-todo-previousset ()org-agenda-todo-previousset6225,245807
(defun org-agenda-todo (&optional arg)org-agenda-todo6230,245940
(defun org-agenda-add-note (&optional arg)org-agenda-add-note6273,247476
(defun org-agenda-change-all-lines (newhead hdmarkerorg-agenda-change-all-lines6292,248069
(defun org-agenda-align-tags (&optional line)org-agenda-align-tags6347,250185
(defun org-agenda-priority-up ()org-agenda-priority-up6374,251244
(defun org-agenda-priority-down ()org-agenda-priority-down6379,251390
(defun org-agenda-priority (&optional force-direction)org-agenda-priority6384,251540
(defun org-agenda-set-tags (&optional tag onoff)org-agenda-set-tags6414,252633
(defun org-agenda-set-property ()org-agenda-set-property6445,253636
(defun org-agenda-set-effort ()org-agenda-set-effort6468,254341
(defun org-agenda-toggle-archive-tag ()org-agenda-toggle-archive-tag6492,255068
(defun org-agenda-do-date-later (arg)org-agenda-do-date-later6517,255899
(defun org-agenda-do-date-earlier (arg)org-agenda-do-date-earlier6533,256449
(defun org-agenda-date-later (arg &optional what)org-agenda-date-later6549,257011
(defun org-agenda-date-earlier (arg &optional what)org-agenda-date-earlier6568,257722
(defun org-agenda-date-later-minutes (arg)org-agenda-date-later-minutes6573,257888
(defun org-agenda-date-earlier-minutes (arg)org-agenda-date-earlier-minutes6579,258132
(defun org-agenda-date-later-hours (arg)org-agenda-date-later-hours6585,258380
(defun org-agenda-date-earlier-hours (arg)org-agenda-date-earlier-hours6590,258528
(defun org-agenda-show-new-time (marker stamp &optional prefix)org-agenda-show-new-time6595,258680
(defun org-agenda-date-prompt (arg)org-agenda-date-prompt6622,259817
(defun org-agenda-schedule (arg)org-agenda-schedule6643,260677
(defun org-agenda-deadline (arg)org-agenda-deadline6665,261394
(defun org-agenda-action ()org-agenda-action6685,262038
(defun org-agenda-do-action (form &optional current-buffer)org-agenda-do-action6734,263955
(defun org-agenda-clock-in (&optional arg)org-agenda-clock-in6748,264491
(defun org-agenda-clock-out (&optional arg)org-agenda-clock-out6771,265210
(defun org-agenda-clock-cancel (&optional arg)org-agenda-clock-cancel6790,265838
(defun org-agenda-diary-entry-in-org-file ()org-agenda-diary-entry-in-org-file6798,266103
(defcustom org-agenda-insert-diary-strategy 'date-treeorg-agenda-insert-diary-strategy6839,267973
(defun org-agenda-add-entry-to-org-agenda-diary-file (type text &optional d1 d2)org-agenda-add-entry-to-org-agenda-diary-file6850,268359
(defun org-agenda-insert-diary-as-top-level (text)org-agenda-insert-diary-as-top-level6916,270849
(defun org-agenda-insert-diary-make-new-entry (text)org-agenda-insert-diary-make-new-entry6926,271215
(defun org-agenda-diary-entry ()org-agenda-diary-entry6950,271994
(defun org-agenda-execute-calendar-command (cmd)org-agenda-execute-calendar-command6997,273931
(defun org-agenda-phases-of-moon ()org-agenda-phases-of-moon7020,274790
(defun org-agenda-holidays ()org-agenda-holidays7025,274985
(defvar calendar-longitude)calendar-longitude7030,275163
(defvar calendar-latitude)calendar-latitude7031,275191
(defvar calendar-location-name)calendar-location-name7032,275218
(defun org-agenda-sunrise-sunset (arg)org-agenda-sunrise-sunset7034,275251
(defun org-agenda-goto-calendar ()org-agenda-goto-calendar7047,275835
(defun org-calendar-goto-agenda ()org-calendar-goto-agenda7063,276404
(defun org-agenda-convert-date ()org-agenda-convert-date7071,276700
(defvar org-agenda-bulk-marked-entries nilorg-agenda-bulk-marked-entries7101,278067
(defun org-agenda-bulk-marked-p ()org-agenda-bulk-marked-p7104,278176
(defun org-agenda-bulk-mark ()org-agenda-bulk-mark7108,278293
(defun org-agenda-bulk-unmark ()org-agenda-bulk-unmark7128,279050
(defun org-agenda-bulk-toggle ()org-agenda-bulk-toggle7143,279601
(defun org-agenda-bulk-remove-overlays (&optional beg end)org-agenda-bulk-remove-overlays7150,279794
(defun org-agenda-bulk-remove-all-marks ()org-agenda-bulk-remove-all-marks7162,280282
(defun org-agenda-bulk-action (&optional arg)org-agenda-bulk-action7170,280611
(defun org-agenda-show-the-flagging-note ()org-agenda-show-the-flagging-note7268,284065
(defun org-agenda-remove-flag (marker)org-agenda-remove-flag7299,285214
(defun org-agenda-get-any-marker (&optional pos)org-agenda-get-any-marker7309,285571
(defvar appt-time-msg-list)appt-time-msg-list7315,285777
(defun org-agenda-to-appt (&optional refresh filter)org-agenda-to-appt7318,285821
(defun org-agenda-todayp (date)org-agenda-todayp7385,288269

vendor/org-6.34c/lisp/org-archive.el,1393
(defcustom org-archive-default-command 'org-archive-subtreeorg-archive-default-command37,1214
(defcustom org-archive-sibling-heading "Archive"org-archive-sibling-heading45,1457
(defcustom org-archive-mark-done nilorg-archive-mark-done52,1729
(defcustom org-archive-stamp-time torg-archive-stamp-time62,2096
(defcustom org-archive-save-context-info '(time file olpath category todo itags)org-archive-save-context-info69,2379
(defun org-get-local-archive-location ()org-get-local-archive-location99,3731
(defun org-add-archive-files (files)org-add-archive-files115,4194
(defun org-all-archive-files ()org-all-archive-files130,4584
(defun org-extract-archive-file (&optional location)org-extract-archive-file149,5204
(defun org-extract-archive-heading (&optional location)org-extract-archive-heading160,5668
(defun org-archive-subtree (&optional find-done)org-archive-subtree168,6039
(defun org-archive-to-archive-sibling ()org-archive-to-archive-sibling322,12061
(defun org-archive-all-done (&optional tag)org-archive-all-done376,13786
(defun org-toggle-archive-tag (&optional find-done)org-toggle-archive-tag420,15280
(defun org-archive-set-tag ()org-archive-set-tag435,15822
(defun org-archive-subtree-default ()org-archive-subtree-default441,15949
(defun org-archive-subtree-default-with-confirmation ()org-archive-subtree-default-with-confirmation448,16198

vendor/org-6.34c/lisp/org-ascii.el,1702
(defgroup org-export-ascii nilorg-export-ascii33,1119
(defcustom org-export-ascii-underline '(?\$ ?\# ?^ ?\~ ?\= ?\-)org-export-ascii-underline38,1256
(defcustom org-export-ascii-bullets '(?* ?+ ?-)org-export-ascii-bullets44,1507
(defcustom org-export-ascii-links-to-notes torg-export-ascii-links-to-notes54,1935
(defcustom org-export-ascii-table-keep-all-vertical-lines nilorg-export-ascii-table-keep-all-vertical-lines61,2199
(defvar org-export-ascii-final-hook nilorg-export-ascii-final-hook70,2464
(defvar org-ascii-current-indentation nil) ; For communicationorg-ascii-current-indentation75,2584
(defun org-export-as-ascii-to-buffer (arg)org-export-as-ascii-to-buffer78,2663
(defun org-replace-region-by-ascii (beg end)org-replace-region-by-ascii87,3052
(defun org-export-region-as-ascii (beg end &optional body-only buffer)org-export-region-as-ascii111,3843
(defun org-export-as-ascii (arg &optional hidden ext-plistorg-export-as-ascii143,5176
(defun org-export-ascii-preprocess (parameters)org-export-ascii-preprocess484,17074
(defun org-html-expand-for-ascii (line)org-html-expand-for-ascii501,17707
(defun org-export-ascii-wrap (line where)org-export-ascii-wrap509,17957
(defun org-export-ascii-push-links (link-buffer)org-export-ascii-push-links524,18341
(defun org-ascii-level-start (level title umax &optional lines)org-ascii-level-start540,18851
(defun org-insert-centered (s &optional underline)org-insert-centered569,20133
(defvar org-table-colgroup-info nil)org-table-colgroup-info578,20468
(defun org-format-table-ascii (lines)org-format-table-ascii579,20505
(defun org-colgroup-info-to-vline-list (info)org-colgroup-info-to-vline-list613,21873

vendor/org-6.34c/lisp/org-attach.el,2065
(defgroup org-attach nilorg-attach46,1624
(defcustom org-attach-directory "data/"org-attach-directory51,1739
(defcustom org-attach-auto-tag "ATTACH"org-attach-auto-tag58,1972
(defcustom org-attach-file-list-property "Attachments"org-attach-file-list-property65,2181
(defcustom org-attach-method 'cporg-attach-method75,2589
(defcustom org-attach-expert nilorg-attach-expert89,3012
(defcustom org-attach-allow-inheritance torg-attach-allow-inheritance94,3161
(defvar org-attach-inherited nilorg-attach-inherited100,3306
(defun org-attach ()org-attach104,3432
(defun org-attach-dir (&optional create-if-not-exists-p)org-attach-dir170,6407
(defun org-attach-check-absolute-path (dir)org-attach-check-absolute-path211,8111
(defun org-attach-set-directory ()org-attach-set-directory222,8712
(defun org-attach-set-inherit ()org-attach-set-inherit231,9053
(defun org-attach-commit ()org-attach-commit240,9463
(defun org-attach-tag (&optional off)org-attach-tag251,9916
(defun org-attach-untag ()org-attach-untag258,10145
(defun org-attach-attach (file &optional visit-dir method)org-attach-attach262,10224
(defun org-attach-attach-cp ()org-attach-attach-cp284,11231
(defun org-attach-attach-mv ()org-attach-attach-mv288,11386
(defun org-attach-attach-ln ()org-attach-attach-ln292,11551
(defun org-attach-new (file)org-attach-new299,11858
(defun org-attach-delete-one (&optional file)org-attach-delete-one311,12352
(defun org-attach-delete-all (&optional force)org-attach-delete-all327,12846
(defun org-attach-sync ()org-attach-sync344,13540
(defun org-attach-file-list (dir)org-attach-file-list361,14202
(defun org-attach-reveal (&optional if-exists)org-attach-reveal368,14472
(defun org-attach-reveal-in-emacs ()org-attach-reveal-in-emacs374,14709
(defun org-attach-open (&optional in-emacs)org-attach-open381,14952
(defun org-attach-open-in-emacs ()org-attach-open-in-emacs396,15595
(defun org-attach-expand (file)org-attach-expand402,15746
(defun org-attach-expand-link (file)org-attach-expand-link407,15952

vendor/org-6.34c/lisp/org-bbdb.el,1356
(defvar date)   ;; dynamically scoped from Orgdate121,4571
(defgroup org-bbdb-anniversaries nilorg-bbdb-anniversaries125,4637
(defcustom org-bbdb-default-anniversary-format "birthday"org-bbdb-default-anniversary-format129,4765
(defcustom org-bbdb-anniversary-format-alistorg-bbdb-anniversary-format-alist135,4923
(defcustom org-bbdb-anniversary-field 'anniversaryorg-bbdb-anniversary-field163,5988
(defcustom org-bbdb-extract-date-fun 'org-bbdb-anniv-extract-dateorg-bbdb-extract-date-fun180,6562
(defun org-bbdb-store-link ()org-bbdb-store-link196,7064
(defun org-bbdb-export (path desc format)org-bbdb-export207,7500
(defun org-bbdb-open (name)org-bbdb-open216,7883
(defun org-bbdb-anniv-extract-date (time-str)org-bbdb-anniv-extract-date240,8835
(defun org-bbdb-anniv-split (str)org-bbdb-anniv-split248,9132
(defvar org-bbdb-anniv-hash nilorg-bbdb-anniv-hash256,9422
(defvar org-bbdb-updated-p torg-bbdb-updated-p260,9550
(defun org-bbdb-make-anniv-hash ()org-bbdb-make-anniv-hash263,9656
(defun org-bbdb-updated (rec)org-bbdb-updated285,10640
(defun org-bbdb-anniversaries()org-bbdb-anniversaries293,10880
(defun org-bbdb-complete-link ()org-bbdb-complete-link344,12742
(defun org-bbdb-anniv-export-ical ()org-bbdb-anniv-export-ical350,12928
(defun org-bbdb-format-vevent (key recs)org-bbdb-format-vevent362,13373

vendor/org-6.34c/lisp/org-beamer.el,3533
(defvar org-export-latex-header)org-export-latex-header32,1137
(defvar org-export-latex-options-plist)org-export-latex-options-plist33,1170
(defvar org-export-opt-plist)org-export-opt-plist34,1210
(defgroup org-beamer nilorg-beamer36,1241
(defcustom org-beamer-use-parts nilorg-beamer-use-parts41,1380
(defcustom org-beamer-frame-level 1org-beamer-frame-level46,1461
(defcustom org-beamer-frame-default-options ""org-beamer-frame-default-options57,1956
(defcustom org-beamer-column-view-formatorg-beamer-column-view-format63,2187
(defcustom org-beamer-themesorg-beamer-themes69,2474
(defconst org-beamer-column-widthsorg-beamer-column-widths77,2842
(defconst org-beamer-transitionsorg-beamer-transitions81,3001
(defconst org-beamer-environments-defaultorg-beamer-environments-default86,3335
(defcustom org-beamer-environments-extra nilorg-beamer-environments-extra122,5351
(defvar org-beamer-frame-level-now nil)org-beamer-frame-level-now145,6169
(defvar org-beamer-header-extra nil)org-beamer-header-extra146,6209
(defvar org-beamer-export-is-beamer-p nil)org-beamer-export-is-beamer-p147,6246
(defvar org-beamer-inside-frame-at-level nil)org-beamer-inside-frame-at-level148,6289
(defvar org-beamer-columns-open nil)org-beamer-columns-open149,6335
(defvar org-beamer-column-open nil)org-beamer-column-open150,6372
(defun org-beamer-cleanup-column-width (width)org-beamer-cleanup-column-width152,6409
(defun org-beamer-open-column (&optional width opt)org-beamer-open-column160,6718
(defun org-beamer-close-column-maybe ()org-beamer-close-column-maybe165,6958
(defun org-beamer-open-columns-maybe (&optional opts)org-beamer-open-columns-maybe169,7100
(defun org-beamer-close-columns-maybe ()org-beamer-close-columns-maybe173,7285
(defun org-beamer-set-environment-tag ()org-beamer-set-environment-tag179,7466
(defun org-beamer-sectioning (level text)org-beamer-sectioning208,8478
(defvar extra)extra313,12934
(defvar option)option314,12949
(defvar action)action315,12965
(defvar defaction)defaction316,12981
(defvar environment)environment317,13000
(defun org-beamer-get-special (props)org-beamer-get-special318,13021
(defun org-beamer-assoc-not-empty (elt list)org-beamer-assoc-not-empty340,13927
(defvar org-beamer-mode-map (make-sparse-keymap)org-beamer-mode-map345,14058
(define-key org-beamer-mode-map "\C-c\C-b" 'org-beamer-set-environment-tag)org-beamer-mode-map347,14146
(define-minor-mode org-beamer-modeorg-beamer-mode349,14223
(defun org-beamer-place-default-actions-for-lists ()org-beamer-place-default-actions-for-lists357,14454
(defun org-beamer-amend-header ()org-beamer-amend-header372,15090
(defcustom org-beamer-fragile-re "^[ \t]*\\\\begin{verbatim}"org-beamer-fragile-re389,15820
(defface org-beamer-tag '((t (:box (:line-width 1 :color grey40))))org-beamer-tag394,15992
(defun org-beamer-initialize-open-trackers ()org-beamer-initialize-open-trackers402,16242
(defun org-beamer-after-initial-vars ()org-beamer-after-initial-vars409,16531
(defun org-beamer-auto-fragile-frames ()org-beamer-auto-fragile-frames475,19078
(defun org-beamer-fix-toc ()org-beamer-fix-toc498,20027
(defun org-beamer-property-changed (property value)org-beamer-property-changed509,20426
(defun org-beamer-select-beamer-code ()org-beamer-select-beamer-code526,21018
(defun org-beamer-settings-template (kind)org-beamer-settings-template552,22013
(defun org-beamer-allowed-property-values (property)org-beamer-allowed-property-values579,23205

vendor/org-6.34c/lisp/org-bibtex.el,369
(defvar description nil) ; dynamically scoped from org.eldescription90,3279
(defun org-bibtex-open (path)org-bibtex-open111,4101
(defun org-bibtex-store-link ()org-bibtex-store-link118,4351
(defun org-create-file-search-in-bibtex ()org-create-file-search-in-bibtex155,6113
(defun org-execute-file-search-in-bibtex (s)org-execute-file-search-in-bibtex177,7083

vendor/org-6.34c/lisp/org-clock.el,8184
(defvar org-time-stamp-formats)org-time-stamp-formats37,1285
(defgroup org-clock nilorg-clock39,1318
(defcustom org-clock-into-drawer org-log-into-drawerorg-clock-into-drawer44,1444
(defcustom org-clock-out-when-done torg-clock-out-when-done64,2244
(defcustom org-clock-out-remove-zero-time-clocks nilorg-clock-out-remove-zero-time-clocks78,2786
(defcustom org-clock-in-switch-to-state nilorg-clock-in-switch-to-state83,2952
(defcustom org-clock-out-switch-to-state nilorg-clock-out-switch-to-state96,3405
(defcustom org-clock-history-length 5org-clock-history-length109,3860
(defcustom org-clock-goto-may-find-recent-task torg-clock-goto-may-find-recent-task114,3987
(defcustom org-clock-heading-function nilorg-clock-heading-function119,4153
(defcustom org-clock-string-limit 0org-clock-string-limit126,4440
(defcustom org-clock-in-resume nilorg-clock-in-resume131,4586
(defcustom org-clock-persist nilorg-clock-persist138,4844
(defcustom org-clock-persist-file (convert-standard-filenameorg-clock-persist-file156,5564
(defcustom org-clock-persist-query-save nilorg-clock-persist-query-save162,5734
(defcustom org-clock-persist-query-resume torg-clock-persist-query-resume167,5880
(defcustom org-clock-sound nilorg-clock-sound172,6031
(defcustom org-clock-modeline-total 'autoorg-clock-modeline-total185,6390
(defcustom org-show-notification-handler nilorg-show-notification-handler203,7135
(defcustom org-clock-clocktable-default-properties '(:maxlevel 2 :scope file)org-clock-clocktable-default-properties212,7409
(defcustom org-clock-idle-time nilorg-clock-idle-time217,7568
(defcustom org-clock-auto-clock-resolution 'when-no-clock-is-runningorg-clock-auto-clock-resolution224,7786
(defvar org-clock-in-prepare-hook nilorg-clock-in-prepare-hook232,8086
(defvar org-clock-in-hook nilorg-clock-in-hook237,8307
(defvar org-clock-out-hook nilorg-clock-out-hook239,8376
(defvar org-clock-cancel-hook nilorg-clock-cancel-hook242,8455
(defvar org-clock-goto-hook nilorg-clock-goto-hook244,8538
(defvar org-clock-has-been-used nilorg-clock-has-been-used246,8631
(defvar org-mode-line-string "")org-mode-line-string251,8771
(defvar org-clock-mode-line-timer nil)org-clock-mode-line-timer254,8857
(defvar org-clock-idle-timer nil)org-clock-idle-timer255,8896
(defvar org-clock-heading) ; defined in org.elorg-clock-heading256,8930
(defvar org-clock-heading-for-remember "")org-clock-heading-for-remember257,8977
(defvar org-clock-start-time "")org-clock-start-time258,9020
(defvar org-clock-left-over-time nilorg-clock-left-over-time260,9054
(defvar org-clock-effort ""org-clock-effort263,9169
(defvar org-clock-total-time nilorg-clock-total-time266,9250
(defvar org-clock-history nilorg-clock-history270,9414
(defvar org-clock-default-task (make-marker)org-clock-default-task273,9499
(defvar org-clock-interrupted-task (make-marker)org-clock-interrupted-task278,9695
(defvar org-clock-mode-line-map (make-sparse-keymap))org-clock-mode-line-map281,9826
(define-key org-clock-mode-line-map [mode-line mouse-2] 'org-clock-goto)org-clock-mode-line-map282,9880
(define-key org-clock-mode-line-map [mode-line mouse-1] 'org-clock-menu)org-clock-mode-line-map283,9953
(defun org-clock-menu ()org-clock-menu285,10027
(defun org-clock-history-push (&optional pos buffer)org-clock-history-push294,10346
(defun org-clock-save-markers-for-cut-and-paste (beg end)org-clock-save-markers-for-cut-and-paste311,11026
(defun org-clock-select-task (&optional prompt)org-clock-select-task320,11454
(defun org-clock-insert-selection-line (i marker)org-clock-insert-selection-line361,13044
(defun org-clock-get-clock-string ()org-clock-get-clock-string391,14032
(defun org-clock-update-mode-line ()org-clock-update-mode-line408,14834
(defun org-clock-get-clocked-time ()org-clock-get-clocked-time424,15589
(defun org-clock-modify-effort-estimate (&optional value)org-clock-modify-effort-estimate433,15944
(defvar org-clock-notification-was-shown nilorg-clock-notification-was-shown467,17327
(defun org-clock-notify-once-if-expired ()org-clock-notify-once-if-expired470,17423
(defun org-notify (notification &optional play-sound)org-notify484,18044
(defun org-show-notification (notification)org-show-notification489,18226
(defun org-clock-play-sound ()org-clock-play-sound505,18883
(defun org-program-exists (program-name)org-program-exists521,19401
(defvar org-clock-mode-line-entry nilorg-clock-mode-line-entry526,19596
(defun org-find-open-clocks (file)org-find-open-clocks529,19694
(defsubst org-is-active-clock (clock)org-is-active-clock542,20132
(defmacro org-with-clock-position (clock &rest forms)org-with-clock-position547,20295
(defmacro org-with-clock (clock &rest forms)org-with-clock559,20637
(defsubst org-clock-clock-in (clock &optional resume)org-clock-clock-in575,21168
(defsubst org-clock-clock-out (clock &optional fail-quietly at-time)org-clock-clock-out582,21444
(defsubst org-clock-clock-cancel (clock)org-clock-clock-cancel592,21811
(defvar org-clock-clocking-in nil)org-clock-clocking-in602,22108
(defvar org-clock-resolving-clocks nil)org-clock-resolving-clocks603,22143
(defvar org-clock-resolving-clocks-due-to-idleness nil)org-clock-resolving-clocks-due-to-idleness604,22183
(defun org-clock-resolve-clock (clock resolve-to &optional close-porg-clock-resolve-clock606,22240
(defun org-clock-resolve (clock &optional prompt-fn last-valid fail-quietly)org-clock-resolve666,24501
(defun org-resolve-clocks (&optional also-non-dangling-p prompt-fn last-valid)org-resolve-clocks754,27606
(defun org-emacs-idle-seconds ()org-emacs-idle-seconds780,28493
(defun org-mac-idle-seconds ()org-mac-idle-seconds787,28696
(defun org-x11-idle-seconds ()org-x11-idle-seconds791,28920
(defun org-user-idle-seconds ()org-user-idle-seconds795,29067
(defvar org-clock-user-idle-seconds)org-clock-user-idle-seconds806,29364
(defun org-resolve-clocks-if-idle ()org-resolve-clocks-if-idle808,29402
(defun org-clock-in (&optional select)org-clock-in833,30324
(defun org-clock-mark-default-task ()org-clock-mark-default-task1001,36857
(defvar msg-extra)msg-extra1008,37048
(defun org-clock-get-sum-start ()org-clock-get-sum-start1009,37067
(defun org-clock-find-position (find-unclosed)org-clock-find-position1044,38342
(defun org-clock-out (&optional fail-quietly at-time)org-clock-out1128,41111
(defun org-clock-cancel ()org-clock-cancel1198,43859
(defun org-clock-goto (&optional select)org-clock-goto1217,44555
(defvar org-clock-file-total-minutes nilorg-clock-file-total-minutes1244,45540
(defun org-clock-sum (&optional tstart tend)org-clock-sum1248,45717
(defun org-clock-sum-current-item (&optional tstart)org-clock-sum-current-item1301,47700
(defun org-clock-display (&optional total-only)org-clock-display1309,47942
(defvar org-clock-overlays nil)org-clock-overlays1340,49178
(defun org-clock-put-overlay (time &optional level)org-clock-put-overlay1343,49260
(defun org-clock-remove-overlays (&optional beg end noremove)org-clock-remove-overlays1377,50605
(defvar state) ;; dynamically scoped into this functionstate1389,51090
(defun org-clock-out-if-current ()org-clock-out-if-current1390,51146
(defun org-get-clocktable (&rest props)org-get-clocktable1415,52144
(defun org-clock-report (&optional arg)org-clock-report1435,52840
(defun org-in-clocktable-p ()org-in-clocktable-p1452,53485
(defun org-clock-special-range (key &optional time as-strings)org-clock-special-range1463,53821
(defun org-clocktable-shift (dir n)org-clocktable-shift1537,57198
(defun org-dblock-write:clocktable (params)org-dblock-write:clocktable1599,59711
(defun org-clocktable-steps (params)org-clocktable-steps1804,66812
(defun org-clocktable-add-file (file table)org-clocktable-add-file1836,68070
(defun org-clock-time% (total &rest strings)org-clock-time%1848,68384
(defvar org-clock-loaded nilorg-clock-loaded1871,69225
(defun org-clock-save ()org-clock-save1874,69287
(defun org-clock-load ()org-clock-load1922,71011
(defun org-clock-persistence-insinuate ()org-clock-persistence-insinuate1965,72466

vendor/org-6.34c/lisp/org-colview-xemacs.el,6357
(defvar org-columns-overlays nilorg-columns-overlays176,7974
(defvar org-columns-current-fmt nilorg-columns-current-fmt179,8056
(defvar org-columns-current-fmt-compiled nilorg-columns-current-fmt-compiled182,8209
(defvar org-columns-current-widths nilorg-columns-current-widths186,8424
(defvar org-columns-current-maxwidths nilorg-columns-current-maxwidths189,8579
(defvar org-columns-begin-marker (make-marker)org-columns-begin-marker192,8752
(defvar org-columns-top-level-marker (make-marker)org-columns-top-level-marker194,8876
(defvar org-columns-map (make-sparse-keymap)org-columns-map197,8993
(defun org-columns-content ()org-columns-content200,9080
(defun org-columns-current-column ()org-columns-current-column262,11926
(defun org-columns-forward-char ()org-columns-forward-char267,12041
(defun org-columns-backward-char ()org-columns-backward-char277,12318
(defun org-columns-new-overlay (beg end &optional string face)org-columns-new-overlay285,12578
(defun org-columns-display-here (&optional props)org-columns-display-here299,13144
(defun org-columns-add-ellipses (string width)org-columns-add-ellipses415,17666
(defvar org-columns-full-header-line-format nilorg-columns-full-header-line-format424,18017
(defvar org-previous-header-line-format nilorg-previous-header-line-format426,18141
(defvar org-columns-inhibit-recalculation nilorg-columns-inhibit-recalculation428,18247
(defvar header-line-format)header-line-format432,18355
(defvar org-columns-previous-hscroll 0)org-columns-previous-hscroll433,18383
(defun org-columns-display-here-title ()org-columns-display-here-title435,18424
(defun org-columns-hscoll-title ()org-columns-hscoll-title469,19986
(defvar org-colview-initial-truncate-line-value nilorg-colview-initial-truncate-line-value480,20485
(defun org-columns-remove-overlays ()org-columns-remove-overlays483,20598
(defun org-columns-cleanup-item (item fmt)org-columns-cleanup-item509,21736
(defun org-columns-compact-links (s)org-columns-compact-links528,22638
(defvar org-agenda-columns-remove-prefix-from-item)org-agenda-columns-remove-prefix-from-item536,22886
(defun org-agenda-columns-cleanup-item (item pl cphr fmt)org-agenda-columns-cleanup-item538,22939
(defun org-columns-show-value ()org-columns-show-value550,23420
(defvar org-agenda-columns-active) ;; defined in org-agenda.elorg-agenda-columns-active556,23620
(defun org-columns-quit ()org-columns-quit558,23684
(defun org-columns-check-computed ()org-columns-check-computed570,24123
(defun org-columns-todo (&optional arg)org-columns-todo578,24485
(defun org-columns-set-tags-or-toggle (&optional arg)org-columns-set-tags-or-toggle583,24627
(defun org-columns-edit-value (&optional key)org-columns-edit-value591,24938
(defun org-edit-headline () ; FIXME: this is not columns specific.  Make interactive?????  Use from agenda????org-edit-headline679,28065
(defun org-columns-edit-allowed ()org-columns-edit-allowed698,28790
(defun org-columns-eval (form)org-columns-eval719,29554
(defun org-columns-previous-allowed-value ()org-columns-previous-allowed-value729,29878
(defun org-columns-next-allowed-value (&optional previous nth)org-columns-next-allowed-value734,30036
(defun org-colview-construct-allowed-dates (s)org-colview-construct-allowed-dates807,32909
(defun org-verify-version (task)org-verify-version828,33948
(defun org-columns-open-link (&optional arg)org-columns-open-link835,34211
(defun org-columns-get-format-and-top-level ()org-columns-get-format-and-top-level840,34385
(defun org-columns ()org-columns853,34911
(defvar org-columns-compile-maporg-columns-compile-map900,36630
(defun org-columns-new (&optional prop title width op fmt fun &rest rest)org-columns-new937,37995
(defun org-columns-delete ()org-columns-delete968,39269
(defun org-columns-edit-attributes ()org-columns-edit-attributes984,39886
(defun org-columns-widen (arg)org-columns-widen991,40117
(defun org-columns-narrow (arg)org-columns-narrow1003,40530
(defun org-columns-move-right ()org-columns-move-right1008,40662
(defun org-columns-move-left ()org-columns-move-left1023,41177
(defun org-columns-store-format ()org-columns-store-format1033,41491
(defvar org-agenda-overriding-columns-format nilorg-agenda-overriding-columns-format1058,42579
(defun org-columns-get-autowidth-alist (s cache)org-columns-get-autowidth-alist1062,42749
(defun org-columns-compute-all ()org-columns-compute-all1077,43223
(defun org-columns-update (property)org-columns-update1089,43635
(defun org-columns-compute (property)org-columns-compute1110,44486
(defun org-columns-redo ()org-columns-redo1175,46980
(defun org-columns-not-in-agenda ()org-columns-not-in-agenda1193,47563
(defun org-string-to-number (s)org-string-to-number1197,47706
(defun org-columns-number-to-string (n fmt &optional printf)org-columns-number-to-string1206,47997
(defun org-nofm-to-completion (n m &optional percent)org-nofm-to-completion1227,48798
(defun org-columns-string-to-number (s fmt)org-columns-string-to-number1232,48966
(defun org-columns-uncompile-format (cfmt)org-columns-uncompile-format1257,49896
(defun org-columns-compile-format (fmt)org-columns-compile-format1280,50708
(defun org-columns-capture-view (&optional maxlevel skip-empty-rows)org-columns-capture-view1323,52374
(defun org-dblock-write:columnview (params)org-dblock-write:columnview1394,55207
(defun org-listtable-to-string (tbl)org-listtable-to-string1490,58912
(defun org-insert-columns-dblock ()org-insert-columns-dblock1503,59329
(defvar org-agenda-view-columns-initially nilorg-agenda-view-columns-initially1520,59961
(defvar org-agenda-columns-show-summaries) ; defined in org-agenda.elorg-agenda-columns-show-summaries1523,60085
(defvar org-agenda-columns-compute-summary-properties); defined in org-agenda.elorg-agenda-columns-compute-summary-properties1524,60155
(defvar org-agenda-columns-add-appointments-to-effort-sum); as wellorg-agenda-columns-add-appointments-to-effort-sum1525,60236
(defun org-agenda-columns ()org-agenda-columns1527,60305
(defun org-agenda-colview-summarize (cache)org-agenda-colview-summarize1587,62840
(defun org-agenda-colview-compute (fmt)org-agenda-colview-compute1659,65256
(defun org-format-time-period (interval)org-format-time-period1685,66136

vendor/org-6.34c/lisp/org-colview.el,6215
(defvar org-columns-overlays nilorg-columns-overlays41,1305
(defvar org-columns-current-fmt nilorg-columns-current-fmt44,1387
(defvar org-columns-current-fmt-compiled nilorg-columns-current-fmt-compiled47,1540
(defvar org-columns-current-widths nilorg-columns-current-widths51,1755
(defvar org-columns-current-maxwidths nilorg-columns-current-maxwidths54,1910
(defvar org-columns-begin-marker (make-marker)org-columns-begin-marker57,2083
(defvar org-columns-top-level-marker (make-marker)org-columns-top-level-marker59,2207
(defvar org-columns-map (make-sparse-keymap)org-columns-map62,2324
(defun org-columns-content ()org-columns-content65,2411
(defun org-columns-new-overlay (beg end &optional string face)org-columns-new-overlay147,5876
(defun org-columns-display-here (&optional props dateline)org-columns-display-here155,6184
(defun org-columns-add-ellipses (string width)org-columns-add-ellipses250,10075
(defvar org-columns-full-header-line-format nilorg-columns-full-header-line-format259,10426
(defvar org-previous-header-line-format nilorg-previous-header-line-format261,10550
(defvar org-columns-inhibit-recalculation nilorg-columns-inhibit-recalculation263,10656
(defvar org-columns-flyspell-was-active nilorg-columns-flyspell-was-active265,10762
(defvar header-line-format)header-line-format270,10973
(defvar org-columns-previous-hscroll 0)org-columns-previous-hscroll271,11001
(defun org-columns-display-here-title ()org-columns-display-here-title273,11042
(defun org-columns-hscoll-title ()org-columns-hscoll-title300,12194
(defvar org-colview-initial-truncate-line-value nilorg-colview-initial-truncate-line-value311,12693
(defun org-columns-remove-overlays ()org-columns-remove-overlays314,12806
(defun org-columns-cleanup-item (item fmt)org-columns-cleanup-item335,13797
(defun org-columns-compact-links (s)org-columns-compact-links354,14699
(defvar org-agenda-columns-remove-prefix-from-item)org-agenda-columns-remove-prefix-from-item362,14947
(defun org-agenda-columns-cleanup-item (item pl cphr fmt)org-agenda-columns-cleanup-item364,15000
(defun org-columns-show-value ()org-columns-show-value376,15481
(defvar org-agenda-columns-active) ;; defined in org-agenda.elorg-agenda-columns-active382,15681
(defun org-columns-quit ()org-columns-quit384,15745
(defun org-columns-check-computed ()org-columns-check-computed396,16184
(defun org-columns-todo (&optional arg)org-columns-todo404,16546
(defun org-columns-set-tags-or-toggle (&optional arg)org-columns-set-tags-or-toggle409,16688
(defun org-columns-edit-value (&optional key)org-columns-edit-value417,16999
(defun org-edit-headline () ; FIXME: this is not columns specific.  Make interactive?????  Use from agenda????org-edit-headline506,20241
(defun org-columns-edit-allowed ()org-columns-edit-allowed525,20966
(defun org-columns-eval (form)org-columns-eval546,21730
(defun org-columns-previous-allowed-value ()org-columns-previous-allowed-value556,22054
(defun org-columns-next-allowed-value (&optional previous nth)org-columns-next-allowed-value561,22212
(defun org-colview-construct-allowed-dates (s)org-colview-construct-allowed-dates634,25073
(defun org-verify-version (task)org-verify-version655,26112
(defun org-columns-open-link (&optional arg)org-columns-open-link662,26301
(defun org-columns-get-format-and-top-level ()org-columns-get-format-and-top-level667,26475
(defun org-columns ()org-columns680,27001
(defvar org-columns-compile-maporg-columns-compile-map726,28706
(defun org-columns-new (&optional prop title width op fmt fun &rest rest)org-columns-new762,30058
(defun org-columns-delete ()org-columns-delete795,31328
(defun org-columns-edit-attributes ()org-columns-edit-attributes810,31897
(defun org-columns-widen (arg)org-columns-widen817,32116
(defun org-columns-narrow (arg)org-columns-narrow829,32517
(defun org-columns-move-right ()org-columns-move-right834,32649
(defun org-columns-move-left ()org-columns-move-left849,33142
(defun org-columns-store-format ()org-columns-store-format859,33424
(defvar org-agenda-overriding-columns-format nilorg-agenda-overriding-columns-format884,34512
(defun org-columns-get-autowidth-alist (s cache)org-columns-get-autowidth-alist888,34682
(defun org-columns-compute-all ()org-columns-compute-all903,35156
(defun org-columns-update (property)org-columns-update915,35568
(defun org-columns-compute (property)org-columns-compute932,36189
(defun org-columns-redo ()org-columns-redo997,38683
(defun org-columns-not-in-agenda ()org-columns-not-in-agenda1015,39229
(defun org-string-to-number (s)org-string-to-number1019,39372
(defun org-columns-number-to-string (n fmt &optional printf)org-columns-number-to-string1028,39663
(defun org-nofm-to-completion (n m &optional percent)org-nofm-to-completion1049,40464
(defun org-columns-string-to-number (s fmt)org-columns-string-to-number1054,40632
(defun org-columns-uncompile-format (cfmt)org-columns-uncompile-format1078,41556
(defun org-columns-compile-format (fmt)org-columns-compile-format1101,42368
(defun org-columns-capture-view (&optional maxlevel skip-empty-rows)org-columns-capture-view1144,44034
(defun org-dblock-write:columnview (params)org-dblock-write:columnview1186,45695
(defun org-listtable-to-string (tbl)org-listtable-to-string1282,49344
(defun org-insert-columns-dblock ()org-insert-columns-dblock1295,49761
(defvar org-agenda-view-columns-initially nilorg-agenda-view-columns-initially1311,50346
(defvar org-agenda-columns-show-summaries) ; defined in org-agenda.elorg-agenda-columns-show-summaries1314,50470
(defvar org-agenda-columns-compute-summary-properties); defined in org-agenda.elorg-agenda-columns-compute-summary-properties1315,50540
(defvar org-agenda-columns-add-appointments-to-effort-sum); as wellorg-agenda-columns-add-appointments-to-effort-sum1316,50621
(defun org-agenda-columns ()org-agenda-columns1318,50690
(defun org-agenda-colview-summarize (cache)org-agenda-colview-summarize1381,53331
(defun org-agenda-colview-compute (fmt)org-agenda-colview-compute1455,55789
(defun org-format-time-period (interval)org-format-time-period1481,56669

vendor/org-6.34c/lisp/org-compat.el,2744
(defconst org-xemacs-p (featurep 'xemacs)) ; not used by org.el itselforg-xemacs-p42,1359
(defconst org-format-transports-properties-porg-format-transports-properties-p43,1430
(defun org-compatible-face (inherits specs)org-compatible-face49,1628
(defun org-make-overlay (beg end &optional buffer)org-make-overlay92,3399
(defun org-delete-overlay (ovl)org-delete-overlay96,3546
(defun org-detach-overlay (ovl)org-detach-overlay98,3658
(defun org-move-overlay (ovl beg end &optional buffer)org-move-overlay100,3758
(defun org-overlay-put (ovl prop value)org-overlay-put104,3948
(defun org-overlay-display (ovl text &optional face evap)org-overlay-display108,4091
(defun org-overlay-before-string (ovl text &optional face evap)org-overlay-before-string118,4505
(defun org-overlay-get (ovl prop)org-overlay-get127,4900
(defun org-overlays-at (pos)org-overlays-at131,5021
(defun org-overlays-in (&optional start end)org-overlays-in133,5112
(defun org-overlay-start (o)org-overlay-start137,5246
(defun org-overlay-end (o)org-overlay-end139,5346
(defun org-overlay-buffer (o)org-overlay-buffer141,5440
(defun org-find-overlays (prop &optional pos delete)org-find-overlays143,5534
(defun org-add-hook (hook function &optional append local)org-add-hook153,5905
(defun org-add-props (string plist &rest props)org-add-props159,6134
(defun org-fit-window-to-buffer (&optional window max-height min-heightorg-fit-window-to-buffer168,6539
(defvar org-ignore-region nilorg-ignore-region188,7389
(defun org-region-active-p ()org-region-active-p191,7467
(defun org-cursor-to-region-beginning ()org-cursor-to-region-beginning202,7802
(defun org-add-to-invisibility-spec (arg)org-add-to-invisibility-spec209,7980
(defun org-remove-from-invisibility-spec (arg)org-remove-from-invisibility-spec222,8453
(defun org-in-invisibility-spec-p (arg)org-in-invisibility-spec-p230,8765
(defun org-indent-to-column (column &optional minimum buffer)org-indent-to-column236,8950
(defun org-indent-line-to (column)org-indent-line-to254,9651
(defun org-move-to-column (column &optional force buffer)org-move-to-column272,10298
(defun org-get-x-clipboard-compat (value)org-get-x-clipboard-compat289,10925
(defun org-propertize (string &rest properties)org-propertize300,11319
(defun org-substring-no-properties (string &optional from to)org-substring-no-properties307,11518
(defun org-find-library-name (library)org-find-library-name312,11713
(defun org-count-lines (s)org-count-lines322,12126
(defun org-kill-new (string &rest args)org-kill-new331,12383
(defun org-select-frame-set-input-focus (frame)org-select-frame-set-input-focus336,12545
(defun org-float-time (&optional time)org-float-time358,13274

vendor/org-6.34c/lisp/org-crypt.el,545
(defgroup org-crypt nilorg-crypt78,3028
(defcustom org-crypt-tag-matcher "crypt"org-crypt-tag-matcher82,3099
(defcustom org-crypt-key nilorg-crypt-key88,3324
(defun org-crypt-key-for-heading ()org-crypt-key-for-heading93,3514
(defun org-encrypt-entry ()org-encrypt-entry102,3828
(defun org-decrypt-entry ()org-decrypt-entry131,4684
(defun org-encrypt-entries ()org-encrypt-entries154,5353
(defun org-decrypt-entries ()org-decrypt-entries160,5496
(defun org-crypt-use-before-save-magic ()org-crypt-use-before-save-magic166,5640

vendor/org-6.34c/lisp/org-ctags.el,2225
(defgroup org-ctags nilorg-ctags120,5312
(defvar org-ctags-enabled-p torg-ctags-enabled-p125,5429
(defvar org-ctags-tag-regexp "/<<([^>]+)>>/\\1/d,definition/"org-ctags-tag-regexp128,5501
(defcustom org-ctags-path-to-ctags org-ctags-path-to-ctags134,5760
(defcustom org-ctags-open-link-functionsorg-ctags-open-link-functions143,5983
(defvar org-ctags-tag-list nilorg-ctags-tag-list161,6611
(defcustom org-ctags-new-topic-templateorg-ctags-new-topic-template165,6734
(defadvice visit-tags-table (after org-ctags-load-tag-list activate compile)visit-tags-table188,7582
(defun org-ctags-enable ()org-ctags-enable194,7816
(defun org-ctags-get-filename-for-tag (tag)org-ctags-get-filename-for-tag204,8171
(defun org-ctags-all-tags-in-current-tags-table ()org-ctags-all-tags-in-current-tags-table231,9312
(defun org-ctags-string-search-and-replace (search replace string)org-ctags-string-search-and-replace248,9924
(defun y-or-n-minibuffer (prompt)y-or-n-minibuffer253,10124
(defun org-ctags-open-file (name &optional title)org-ctags-open-file261,10295
(defadvice find-tag (before org-ctags-set-org-mark-before-finding-tagfind-tag282,11072
(defun org-ctags-find-tag-at-point ()org-ctags-find-tag-at-point291,11344
(defun org-ctags-find-tag (name)org-ctags-find-tag330,12685
(defun org-ctags-visit-buffer-or-file (name &optional create)org-ctags-visit-buffer-or-file349,13314
(defun org-ctags-ask-visit-buffer-or-file (name)org-ctags-ask-visit-buffer-or-file380,14580
(defun org-ctags-append-topic (name &optional narrowp)org-ctags-append-topic387,14850
(defun org-ctags-ask-append-topic (name &optional narrowp)org-ctags-ask-append-topic409,15601
(defun org-ctags-rebuild-tags-file-then-find-tag (name)org-ctags-rebuild-tags-file-then-find-tag419,15987
(defun org-ctags-ask-rebuild-tags-file-then-find-tag (name)org-ctags-ask-rebuild-tags-file-then-find-tag430,16373
(defun org-ctags-fail-silently (name)org-ctags-fail-silently443,16853
(defun org-ctags-create-tags (&optional directory-name)org-ctags-create-tags453,17153
(defvar org-ctags-find-tag-history nilorg-ctags-find-tag-history488,18694
(defun org-ctags-find-tag-interactive ()org-ctags-find-tag-interactive491,18798

vendor/org-6.34c/lisp/org-datetree.el,679
(defvar org-datetree-base-level 1org-datetree-base-level36,1237
(defun org-datetree-find-date-create (date &optional keep-restriction)org-datetree-find-date-create42,1516
(defun org-datetree-find-year-create (year)org-datetree-find-year-create65,2414
(defun org-datetree-find-month-create (year month)org-datetree-find-month-create83,2983
(defun org-datetree-find-day-create (year month day)org-datetree-find-day-create102,3606
(defun org-datetree-insert-line (year &optional month day)org-datetree-insert-line121,4248
(defun org-datetree-file-entry-under (txt date)org-datetree-file-entry-under141,4877
(defun org-datetree-cleanup ()org-datetree-cleanup149,5180

vendor/org-6.34c/lisp/org-docbook.el,4249
(defvar org-docbook-para-open nil)org-docbook-para-open82,2703
(defvar org-export-docbook-inline-images t)org-export-docbook-inline-images83,2738
(defvar org-export-docbook-link-org-files-as-docbook nil)org-export-docbook-link-org-files-as-docbook84,2782
(defgroup org-export-docbook nilorg-export-docbook90,2916
(defcustom org-export-docbook-extension ".xml"org-export-docbook-extension95,3053
(defcustom org-export-docbook-header "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"org-export-docbook-header100,3183
(defcustom org-export-docbook-doctype nilorg-export-docbook-doctype105,3347
(defcustom org-export-docbook-article-header "<article xmlns=\"http://docbook.org/ns/docbook\"org-export-docbook-article-header129,4080
(defcustom org-export-docbook-section-id-prefix "sec-"org-export-docbook-section-id-prefix135,4351
(defcustom org-export-docbook-footnote-id-prefix "fn-"org-export-docbook-footnote-id-prefix143,4667
(defcustom org-export-docbook-emphasis-alistorg-export-docbook-emphasis-alist150,4950
(defcustom org-export-docbook-default-image-attributesorg-export-docbook-default-image-attributes166,5655
(defcustom org-export-docbook-inline-image-extensionsorg-export-docbook-inline-image-extensions175,5986
(defcustom org-export-docbook-coding-system nilorg-export-docbook-coding-system181,6215
(defcustom org-export-docbook-xslt-proc-command nilorg-export-docbook-xslt-proc-command186,6358
(defcustom org-export-docbook-xsl-fo-proc-command nilorg-export-docbook-xsl-fo-proc-command219,7519
(defcustom org-export-docbook-keywords-markup "<literal>%s</literal>"org-export-docbook-keywords-markup235,8059
(defcustom org-export-docbook-timestamp-markup "<emphasis>%s</emphasis>"org-export-docbook-timestamp-markup240,8250
(defvar org-export-docbook-final-hook nilorg-export-docbook-final-hook247,8458
(defun org-export-as-docbook-batch ()org-export-as-docbook-batch253,8604
(defun org-export-as-docbook-to-buffer ()org-export-as-docbook-to-buffer265,8926
(defun org-replace-region-by-docbook (beg end)org-replace-region-by-docbook274,9254
(defun org-export-region-as-docbook (beg end &optional body-only buffer)org-export-region-as-docbook299,10103
(defun org-export-as-docbook-pdf (&optional hidden ext-plistorg-export-as-docbook-pdf331,11346
(defun org-export-as-docbook-pdf-and-open ()org-export-as-docbook-pdf-and-open363,12770
(defun org-export-as-docbook (&optional hidden ext-plistorg-export-as-docbook372,13044
(defun org-export-docbook-open-para ()org-export-docbook-open-para1146,41649
(defun org-export-docbook-close-para-maybe ()org-export-docbook-close-para-maybe1152,41847
(defun org-export-docbook-close-li (&optional type)org-export-docbook-close-li1158,42038
(defvar in-local-list)in-local-list1165,42260
(defvar local-list-indent)local-list-indent1166,42283
(defvar local-list-type)local-list-type1167,42310
(defun org-export-docbook-close-lists-maybe (line)org-export-docbook-close-lists-maybe1168,42335
(defun org-export-docbook-level-start (level title)org-export-docbook-level-start1187,43033
(defun org-docbook-expand (string)org-docbook-expand1223,44291
(defun org-docbook-do-expand (s)org-docbook-do-expand1239,44879
(defun org-export-docbook-format-desc (desc)org-export-docbook-format-desc1264,45869
(defun org-export-docbook-convert-emphasize (string)org-export-docbook-convert-emphasize1269,46025
(defun org-docbook-protect (string)org-docbook-protect1291,46748
(defun org-export-docbook-convert-special-strings (string)org-export-docbook-convert-special-strings1295,46857
(defun org-export-docbook-get-footnotes (lines)org-export-docbook-get-footnotes1299,46980
(defun org-export-docbook-format-image (src)org-export-docbook-format-image1308,47298
(defun org-export-docbook-preprocess (parameters)org-export-docbook-preprocess1332,48139
(defun org-export-docbook-finalize-table (table)org-export-docbook-finalize-table1341,48534
(defun org-export-docbook-convert-sub-super (string)org-export-docbook-convert-sub-super1357,49162
(defun org-export-docbook-protect-tags (string)org-export-docbook-protect-tags1381,50068
(defun org-export-docbook-handle-time-stamps (line)org-export-docbook-handle-time-stamps1392,50474

vendor/org-6.34c/lisp/org-docview.el,190
(defun org-docview-open (link)org-docview-open56,1890
(defun org-docview-store-link ()org-docview-store-link65,2239
(defun org-docview-complete-link ()org-docview-complete-link78,2643

vendor/org-6.34c/lisp/org-exp-blocks.el,1223
(defvar htmlp)htmlp74,2638
(defvar latexp)latexp75,2653
(defvar docbookp)docbookp76,2669
(defvar asciip)asciip77,2687
(defun org-export-blocks-set (var value)org-export-blocks-set79,2704
(defcustom org-export-blocksorg-export-blocks91,3062
(defun org-export-blocks-add-block (block-spec)org-export-blocks-add-block107,3689
(defcustom org-export-interblocksorg-export-interblocks122,4419
(defcustom org-export-blocks-witheldorg-export-blocks-witheld131,4754
(defvar org-export-blocks-postblock-hooks nil "")org-export-blocks-postblock-hooks138,4928
(defun org-export-blocks-html-quote (body &optional open close)org-export-blocks-html-quote140,4979
(defun org-export-blocks-latex-quote (body &optional open close)org-export-blocks-latex-quote150,5279
(defun org-export-blocks-preprocess ()org-export-blocks-preprocess160,5583
(defvar org-ditaa-jar-path (expand-file-nameorg-ditaa-jar-path203,7579
(defun org-export-blocks-format-ditaa (body &rest headers)org-export-blocks-format-ditaa214,7904
(defun org-export-blocks-format-dot (body &rest headers)org-export-blocks-format-dot262,10475
(defun org-export-blocks-format-comment (body &rest headers)org-export-blocks-format-comment314,13143

vendor/org-6.34c/lisp/org-exp.el,12932
(defgroup org-export nilorg-export46,1892
(defgroup org-export-general nilorg-export-general51,1993
(defcustom org-export-allow-BIND 'confirmorg-export-allow-BIND56,2127
(defvar org-export-publishing-directory nil)org-export-publishing-directory67,2514
(defcustom org-export-show-temporary-export-buffer torg-export-show-temporary-export-buffer69,2560
(defcustom org-export-copy-to-kill-ring torg-export-copy-to-kill-ring78,2985
(defcustom org-export-run-in-background nilorg-export-run-in-background83,3149
(defcustom org-export-select-tags '("export")org-export-select-tags98,3806
(defcustom org-export-exclude-tags '("noexport")org-export-exclude-tags107,4208
(defcustom org-export-html-expand torg-export-html-expand116,4595
(defcustom org-export-with-special-strings torg-export-with-special-strings126,4935
(defcustom org-export-html-link-up ""org-export-html-link-up141,5383
(defcustom org-export-html-link-home ""org-export-html-link-home147,5577
(defcustom org-export-language-setuporg-export-language-setup153,5775
(defcustom org-export-default-language "en"org-export-default-language184,7492
(defvar org-export-page-description ""org-export-page-description190,7701
(defvar org-export-page-keywords ""org-export-page-keywords195,7893
(defcustom org-export-skip-text-before-1st-heading nilorg-export-skip-text-before-1st-heading200,8079
(defcustom org-export-headline-levels 3org-export-headline-levels206,8298
(defcustom org-export-with-section-numbers torg-export-with-section-numbers216,8653
(defcustom org-export-section-number-format '((("1" ".")) . "")org-export-section-number-format223,8883
(defcustom org-export-with-toc torg-export-with-toc243,9679
(defcustom org-export-mark-todo-in-toc nilorg-export-mark-todo-in-toc265,10549
(defcustom org-export-with-todo-keywords torg-export-with-todo-keywords270,10708
(defcustom org-export-with-priority nilorg-export-with-priority276,10904
(defcustom org-export-preserve-breaks nilorg-export-preserve-breaks282,11093
(defcustom org-export-with-archived-trees 'headlineorg-export-with-archived-trees291,11454
(defcustom org-export-author-info torg-export-author-info304,11938
(defcustom org-export-creator-info torg-export-creator-info312,12173
(defcustom org-export-time-stamp-file torg-export-time-stamp-file318,12391
(defcustom org-export-with-timestamps torg-export-with-timestamps327,12667
(defcustom org-export-remove-timestamps-from-toc torg-export-remove-timestamps-from-toc332,12818
(defcustom org-export-with-tags 'not-in-tocorg-export-with-tags337,12981
(defcustom org-export-with-drawers nilorg-export-with-drawers349,13442
(defvar org-export-first-hook nilorg-export-first-hook360,13808
(defvar org-export-preprocess-hook nilorg-export-preprocess-hook364,13929
(defvar org-export-preprocess-after-include-files-hook nilorg-export-preprocess-after-include-files-hook368,14080
(defvar org-export-preprocess-after-tree-selection-hook nilorg-export-preprocess-after-tree-selection-hook372,14255
(defvar org-export-preprocess-before-selecting-backend-code-hook nilorg-export-preprocess-before-selecting-backend-code-hook378,14526
(defvar org-export-preprocess-after-blockquote-hook nilorg-export-preprocess-after-blockquote-hook382,14704
(defvar org-export-preprocess-before-normalizing-links-hook nilorg-export-preprocess-before-normalizing-links-hook387,14886
(defvar org-export-preprocess-before-backend-specifics-hook nilorg-export-preprocess-before-backend-specifics-hook391,15043
(defvar org-export-preprocess-final-hook nilorg-export-preprocess-final-hook394,15189
(defgroup org-export-translation nilorg-export-translation399,15396
(defcustom org-export-with-emphasize torg-export-with-emphasize404,15565
(defcustom org-export-with-footnotes torg-export-with-footnotes415,16031
(defcustom org-export-with-sub-superscripts torg-export-with-sub-superscripts423,16292
(defcustom org-export-with-TeX-macros torg-export-with-TeX-macros452,17579
(defcustom org-export-with-LaTeX-fragments nilorg-export-with-LaTeX-fragments465,18151
(defcustom org-export-with-fixed-width torg-export-with-fixed-width480,18770
(defcustom org-match-sexp-depth 3org-match-sexp-depth494,19262
(defgroup org-export-tables nilorg-export-tables500,19465
(defcustom org-export-with-tables torg-export-with-tables505,19593
(defcustom org-export-highlight-first-table-line torg-export-highlight-first-table-line519,19979
(defcustom org-export-table-remove-special-lines torg-export-table-remove-special-lines528,20359
(defcustom org-export-prefer-native-exporter-for-tables nilorg-export-prefer-native-exporter-for-tables537,20785
(defgroup org-export-xml nilorg-export-xml549,21305
(defconst org-level-max 20)org-level-max558,21500
(defvar org-current-export-file nil) ; dynamically scoped parameterorg-current-export-file560,21529
(defvar org-current-export-dir nil) ; dynamically scoped parameterorg-current-export-dir561,21597
(defvar org-export-opt-plist nilorg-export-opt-plist562,21664
(defvar org-last-level nil) ; dynamically scoped variableorg-last-level564,21737
(defvar org-min-level nil) ; dynamically scoped variableorg-min-level565,21795
(defvar org-levels-open nil) ; dynamically scoped parameterorg-levels-open566,21852
(defconst org-export-plist-varsorg-export-plist-vars568,21913
(defun org-default-export-plist ()org-default-export-plist631,25576
(defvar org-export-inbuffer-options-extra nilorg-export-inbuffer-options-extra645,26034
(defvar org-export-options-filters nilorg-export-options-filters656,26674
(defun org-infile-export-plist ()org-infile-export-plist664,27060
(defun org-export-interpolate-newlines (s)org-export-interpolate-newlines767,31321
(defvar org-export-allow-BIND-local nil)org-export-allow-BIND-local772,31445
(defun org-export-confirm-letbind ()org-export-confirm-letbind773,31486
(defun org-install-letbind ()org-install-letbind785,31953
(defun org-export-add-options-to-plist (p options)org-export-add-options-to-plist792,32199
(defun org-export-add-subtree-options (p pos)org-export-add-subtree-options807,32645
(defun org-export-directory (type plist)org-export-directory826,33368
(defun org-export-process-option-filters (plist)org-export-process-option-filters833,33543
(defun org-export (&optional arg)org-export840,33742
(defun org-export-process-sentinel (process status)org-export-process-sentinel959,38145
(defconst org-html-entitiesorg-html-entities964,38340
(defvar org-export-target-aliases nilorg-export-target-aliases1272,44104
(defvar org-export-preferred-target-alist nilorg-export-preferred-target-alist1274,44188
(defvar org-export-code-refs nilorg-export-code-refs1276,44285
(defun org-export-preprocess-string (string &rest parameters)org-export-preprocess-string1279,44366
(defun org-export-kill-licensed-text ()org-export-kill-licensed-text1462,50762
(defun org-export-define-heading-targets (target-alist)org-export-define-heading-targets1471,51094
(defun org-export-handle-invisible-targets (target-alist)org-export-handle-invisible-targets1507,52472
(defun org-export-target-internal-links (target-alist)org-export-target-internal-links1532,53461
(defvar org-export-format-drawer-function nilorg-export-format-drawer-function1587,55414
(defun org-export-remove-or-extract-drawers (all-drawers exp-drawers backend)org-export-remove-or-extract-drawers1596,55850
(defun org-export-format-drawer (name content backend)org-export-format-drawer1629,57161
(defun org-export-handle-export-tags (select-tags exclude-tags)org-export-handle-export-tags1643,57742
(defun org-export-remove-archived-trees (export-archived-trees)org-export-remove-archived-trees1699,59889
(defun org-export-remove-headline-metadata (opts)org-export-remove-headline-metadata1718,60616
(defun org-export-remove-timestamps ()org-export-remove-timestamps1735,61246
(defun org-export-remove-clock-lines ()org-export-remove-clock-lines1747,61663
(defun org-export-protect-quoted-subtrees ()org-export-protect-quoted-subtrees1755,61919
(defun org-export-protect-verbatim ()org-export-protect-verbatim1765,62307
(defun org-export-protect-colon-examples ()org-export-protect-colon-examples1774,62648
(defun org-export-select-backend-specific-text (backend)org-export-select-backend-specific-text1787,63067
(defun org-export-mark-blockquote-verse-center ()org-export-mark-blockquote-verse-center1826,64541
(defun org-export-attach-captions-and-attributes (backend target-alist)org-export-attach-captions-and-attributes1850,65561
(defun org-export-remove-comment-blocks-and-subtrees ()org-export-remove-comment-blocks-and-subtrees1885,66841
(defun org-export-handle-comments (commentsp)org-export-handle-comments1902,67522
(defun org-export-mark-radio-links ()org-export-mark-radio-links1922,68259
(defun org-export-remove-special-table-lines ()org-export-remove-special-table-lines1937,68796
(defun org-export-protect-sub-super (s)org-export-protect-sub-super1958,69470
(defun org-export-normalize-links ()org-export-normalize-links1964,69647
(defun org-export-concatenate-multiline-links ()org-export-concatenate-multiline-links2012,71391
(defun org-export-concatenate-multiline-emphasis ()org-export-concatenate-multiline-emphasis2022,71816
(defun org-export-grab-title-from-buffer ()org-export-grab-title-from-buffer2038,72469
(defun org-export-get-title-from-subtree ()org-export-get-title-from-subtree2054,73096
(defun org-solidify-link-text (s &optional alist)org-solidify-link-text2071,73704
(defun org-get-min-level (lines &optional offset)org-get-min-level2081,73975
(defvar org-section-numbers (make-vector org-level-max 0))org-section-numbers2092,74321
(defun org-init-section-numbers ()org-init-section-numbers2094,74381
(defun org-section-number (&optional level)org-section-number2111,74966
(defun org-number-to-counter (n type)org-number-to-counter2147,76179
(defun org-number-to-roman (n)org-number-to-roman2163,76711
(defun org-export-preprocess-apply-macros ()org-export-preprocess-apply-macros2181,77184
(defun org-export-apply-macros-in-string (s)org-export-apply-macros-in-string2224,78703
(defun org-export-handle-include-files ()org-export-handle-include-files2234,78919
(defun org-get-file-contents (file &optional prefix prefix1 markup)org-get-file-contents2268,80316
(defun org-get-and-remove-property (listvar prop)org-get-and-remove-property2292,81177
(defun org-symname-or-string (s)org-symname-or-string2306,81695
(defvar org-export-last-code-line-counter-value 0)org-export-last-code-line-counter-value2313,81840
(defun org-export-replace-src-segments-and-examples (backend)org-export-replace-src-segments-and-examples2315,81892
(defvar htmlp)  ;; dynamically scopedhtmlp2341,82992
(defvar latexp)  ;; dynamically scopedlatexp2342,83030
(defvar org-export-latex-verbatim-wrap) ;; defined in org-latex.elorg-export-latex-verbatim-wrap2343,83069
(defvar org-export-latex-listings) ;; defined in org-latex.elorg-export-latex-listings2344,83136
(defvar org-export-latex-listings-langs) ;; defined in org-latex.elorg-export-latex-listings-langs2345,83198
(defun org-export-format-source-code-or-exampleorg-export-format-source-code-or-example2347,83267
(defun org-export-number-lines (text backendorg-export-number-lines2506,89416
(defun org-search-todo-below (line lines level)org-search-todo-below2584,92107
(defun org-export-visible (type arg)org-export-visible2602,92669
(defun org-find-visible ()org-find-visible2674,95454
(defun org-find-invisible ()org-find-invisible2679,95618
(defvar org-export-htmlized-org-css-url) ;; defined in org-html.elorg-export-htmlized-org-css-url2685,95791
(defun org-export-as-org (arg &optional hidden ext-plistorg-export-as-org2688,95874
(defvar org-archive-location)  ;; gets loaded with the org-archive require.org-archive-location2776,99113
(defun org-get-current-options ()org-get-current-options2777,99189
(defun org-insert-export-options-template ()org-insert-export-options-template2864,101963
(defvar org-table-colgroup-info nil)org-table-colgroup-info2873,102270
(defun org-table-clean-before-export (lines &optional maybe-quoted)org-table-clean-before-export2875,102308
(defun org-export-cleanup-toc-line (s)org-export-cleanup-toc-line2927,103892
(defun org-create-multibrace-regexp (left right n)org-create-multibrace-regexp2942,104523
(defvar org-match-substring-regexporg-match-substring-regexp2960,105326
(defvar org-match-substring-with-braces-regexporg-match-substring-with-braces-regexp2970,105702
(defun org-get-text-property-any (pos prop &optional object)org-get-text-property-any2978,105952
(defun org-export-get-coderef-format (path desc)org-export-get-coderef-format2983,106167
(defun org-export-push-to-kill-ring (format)org-export-push-to-kill-ring2991,106377

vendor/org-6.34c/lisp/org-faces.el,3781
(defun org-copy-face (old-face new-face docstring &rest attributes)org-copy-face36,1175
(defgroup org-faces nilorg-faces49,1666
(defface org-hideorg-hide54,1758
(defface org-level-1 ;; originally copied from font-lock-function-name-faceorg-level-162,2034
(defface org-level-2 ;; originally copied from font-lock-variable-name-faceorg-level-273,2628
(defface org-level-3 ;; originally copied from font-lock-keyword-faceorg-level-383,3170
(defface org-level-4   ;; originally copied from font-lock-comment-faceorg-level-495,3858
(defface org-level-5 ;; originally copied from font-lock-type-faceorg-level-5107,4549
(defface org-level-6 ;; originally copied from font-lock-constant-faceorg-level-6115,4943
(defface org-level-7 ;; originally copied from font-lock-builtin-faceorg-level-7123,5342
(defface org-level-8 ;; originally copied from font-lock-string-faceorg-level-8131,5738
(defface org-special-keyword ;; originally copied from font-lock-string-faceorg-special-keyword139,6134
(defface org-drawer ;; originally copied from font-lock-function-name-faceorg-drawer147,6491
(defface org-property-value nilorg-property-value158,7067
(defface org-columnorg-column162,7164
(defface org-column-titleorg-column-title202,8940
(defface org-agenda-column-datelineorg-agenda-column-dateline220,9690
(defface org-warningorg-warning226,9865
(defface org-archived    ; similar to shadoworg-archived236,10371
(defface org-linkorg-link249,10886
(defface org-footnoteorg-footnote256,11121
(defface org-ellipsisorg-ellipsis263,11360
(defface org-targetorg-target270,11643
(defface org-dateorg-date277,11847
(defface org-sexp-dateorg-sexp-date284,12093
(defface org-tagorg-tag291,12337
(defface org-todo ; font-lock-warning-faceorg-todo298,12514
(defface org-done ;; originally copied from font-lock-type-faceorg-done308,13025
(defface org-agenda-done ;; originally copied from font-lock-type-faceorg-agenda-done317,13466
(defface org-headline-done ;; originally copied from font-lock-string-faceorg-headline-done331,14225
(defcustom org-todo-keyword-faces nilorg-todo-keyword-faces341,14770
(defcustom org-priority-faces nilorg-priority-faces353,15164
(defvar org-tags-special-faces-re nil)org-tags-special-faces-re365,15560
(defun org-set-tag-faces (var value)org-set-tag-faces366,15599
(defface org-checkboxorg-checkbox373,15810
(defcustom org-tag-faces nilorg-tag-faces386,16154
(defface org-table ;; originally copied from font-lock-function-name-faceorg-table403,16738
(defface org-formulaorg-formula414,17362
(defface org-codeorg-code424,17814
(defface org-meta-lineorg-meta-line438,18325
(defface org-blockorg-block444,18485
(defface org-verbatimorg-verbatim458,18991
(defface org-clock-overlay ;; copied from secondary-selectionorg-clock-overlay477,19739
(defface org-agenda-structure ;; originally copied from font-lock-function-name-faceorg-agenda-structure493,20386
(defface org-scheduledorg-scheduled520,21573
(defface org-scheduled-todayorg-scheduled-today529,21955
(defface org-agenda-dimmed-todo-faceorg-agenda-dimmed-todo-face538,22343
(defface org-scheduled-previouslyorg-scheduled-previously544,22553
(defface org-upcoming-deadlineorg-upcoming-deadline554,23052
(defcustom org-agenda-deadline-facesorg-agenda-deadline-faces564,23548
(defface org-agenda-restriction-lockorg-agenda-restriction-lock589,24542
(defface org-time-grid ;; originally copied from font-lock-variable-name-faceorg-time-grid600,25123
(defface org-agenda-diaryorg-agenda-diary608,25536
(defconst org-level-facesorg-level-faces614,25690
(defcustom org-n-level-faces (length org-level-faces)org-n-level-faces619,25828
(defface org-latex-and-export-specialsorg-latex-and-export-specials626,26123

vendor/org-6.34c/lisp/org-feed.el,1802
(defgroup org-feed  nilorg-feed103,3923
(defcustom org-feed-alist nilorg-feed-alist108,4037
(defcustom org-feed-drawer "FEEDSTATUS"org-feed-drawer210,8565
(defcustom org-feed-default-template "\n* %h\n  %U\n  %description\n  %a\n"org-feed-default-template220,8965
(defcustom org-feed-save-after-adding torg-feed-save-after-adding236,9690
(defcustom org-feed-retrieve-method 'url-retrieve-synchronouslyorg-feed-retrieve-method241,9828
(defcustom org-feed-after-adding-hook nilorg-feed-after-adding-hook260,10577
(defvar org-feed-buffer "*Org feed*"org-feed-buffer267,10802
(defun org-feed-update-all ()org-feed-update-all271,10896
(defun org-feed-update (feed &optional retrieve-only)org-feed-update284,11316
(defun org-feed-goto-inbox (feed)org-feed-goto-inbox415,15831
(defun org-feed-show-raw-feed (feed)org-feed-show-raw-feed427,16263
(defun org-feed-goto-inbox-internal (file heading)org-feed-goto-inbox-internal440,16697
(defun org-feed-read-previous-status (pos drawer)org-feed-read-previous-status455,17157
(defun org-feed-write-status (pos drawer status)org-feed-write-status467,17551
(defun org-feed-add-items (pos entries)org-feed-add-items486,18143
(defun org-feed-format-entry (entry template formatter)org-feed-format-entry502,18683
(defun org-feed-make-indented-block (s n)org-feed-make-indented-block544,20407
(defun org-feed-skip-http-headers (buffer)org-feed-skip-http-headers552,20653
(defun org-feed-get-feed (url)org-feed-get-feed562,20936
(defun org-feed-parse-rss-feed (buffer)org-feed-parse-rss-feed578,21603
(defun org-feed-parse-rss-entry (entry)org-feed-parse-rss-entry599,22354
(defun org-feed-parse-atom-feed (buffer)org-feed-parse-atom-feed614,22939
(defun org-feed-parse-atom-entry (entry)org-feed-parse-atom-entry631,23579

vendor/org-6.34c/lisp/org-footnote.el,2127
(defvar org-odd-levels-only) ;; defined in org.elorg-odd-levels-only51,2021
(defconst org-footnote-reorg-footnote-re53,2072
(defconst org-footnote-definition-reorg-footnote-definition-re64,2355
(defcustom org-footnote-section "Footnotes"org-footnote-section68,2514
(defcustom org-footnote-tag-for-non-org-mode-files "Footnotes:"org-footnote-tag-for-non-org-mode-files83,3266
(defcustom org-footnote-define-inline nilorg-footnote-define-inline93,3772
(defcustom org-footnote-auto-label torg-footnote-auto-label101,4117
(defcustom org-footnote-auto-adjust nilorg-footnote-auto-adjust118,4818
(defcustom org-footnote-fill-after-inline-note-extraction nilorg-footnote-fill-after-inline-note-extraction135,5423
(defun org-footnote-at-reference-p ()org-footnote-at-reference-p143,5770
(defun org-footnote-at-definition-p ()org-footnote-at-definition-p152,6117
(defun org-footnote-goto-definition (label)org-footnote-goto-definition165,6775
(defun org-footnote-goto-next-reference (label)org-footnote-goto-next-reference185,7500
(defun org-footnote-normalize-label (label)org-footnote-normalize-label207,8198
(defun org-footnote-all-labels ()org-footnote-all-labels213,8410
(defun org-footnote-unique-label (&optional current)org-footnote-unique-label230,8981
(defvar org-footnote-label-history nilorg-footnote-label-history240,9362
(defun org-footnote-new ()org-footnote-new244,9518
(defun org-footnote-create-definition (label)org-footnote-create-definition277,10651
(defun org-footnote-action (&optional special)org-footnote-action312,11935
(defun org-footnote-normalize (&optional sort-only for-preprocessor)org-footnote-normalize346,13100
(defun org-insert-footnote-reference-near-definition (entry)org-insert-footnote-reference-near-definition485,17906
(defun org-footnote-goto-local-insertion-point ()org-footnote-goto-local-insertion-point495,18341
(defun org-footnote-delete (&optional label)org-footnote-delete506,18753
(defun org-footnote-renumber-fn:N ()org-footnote-renumber-fn:N543,20209
(defun org-footnote-auto-adjust-maybe ()org-footnote-auto-adjust-maybe561,20921

vendor/org-6.34c/lisp/org-freemind.el,3373
(defvar org-freemind-node-style nil "Internal use.")org-freemind-node-style109,3631
(defcustom org-freemind-node-styles nilorg-freemind-node-styles111,3685
(defun org-export-as-freemind (arg &optional hidden ext-plistorg-export-as-freemind157,6373
(defun org-freemind-show (mm-file)org-freemind-show197,7683
(defconst org-freemind-org-nfix "--org-mode: ")org-freemind-org-nfix216,8480
(defun org-freemind-escape-str-from-org (org-str)org-freemind-escape-str-from-org221,8604
(defun org-freemind-unescape-str-to-org (fm-str)org-freemind-unescape-str-to-org249,9778
(defun org-freemind-test-escape ()org-freemind-test-escape268,10640
(defun org-freemind-convert-links-from-org (org-str)org-freemind-convert-links-from-org277,10933
(defun org-freemind-convert-links-to-org (fm-str)org-freemind-convert-links-to-org298,11818
(defun org-freemind-convert-text-p (text)org-freemind-convert-text-p334,12967
(defun org-freemind-org-text-to-freemind-subnode/note (node-name start end drawers-regexp)org-freemind-org-text-to-freemind-subnode/note345,13496
(defun org-freemind-write-node (mm-buffer drawers-regexp num-left-nodes base-level current-level next-level this-m2 this-node-end this-children-visible next-node-start next-has-some-visible-child)org-freemind-write-node443,17581
(defun org-freemind-check-overwrite (file interactively)org-freemind-check-overwrite509,20280
(defvar org-freemind-node-pattern (rx bolorg-freemind-node-pattern523,20747
(defun org-freemind-look-for-visible-child (node-level)org-freemind-look-for-visible-child529,20948
(defun org-freemind-goto-line (line)org-freemind-goto-line544,21566
(defun org-freemind-write-mm-buffer (org-buffer mm-buffer node-at-line)org-freemind-write-mm-buffer551,21723
(defun org-freemind-get-node-style (node-name)org-freemind-get-node-style736,30640
(defun org-freemind-do-apply-node-style (style-list)org-freemind-do-apply-node-style753,31394
(defun org-freemind-from-org-mode-node (node-line mm-file)org-freemind-from-org-mode-node814,33259
(defun org-freemind-from-org-mode (org-file mm-file)org-freemind-from-org-mode840,34471
(defun org-freemind-from-org-sparse-tree (org-buffer mm-file)org-freemind-from-org-sparse-tree864,35587
(defun org-freemind-lt-symbols (sym-a sym-b)org-freemind-lt-symbols894,36824
(defun org-freemind-lt-xml-attrs (attr-a attr-b)org-freemind-lt-xml-attrs897,36986
(defsubst org-freemind-symbols= (sym-a sym-b)org-freemind-symbols=912,37315
(defun org-freemind-get-children (parent path)org-freemind-get-children919,37577
(defun org-freemind-get-richcontent-node (node)org-freemind-get-richcontent-node970,39807
(defun org-freemind-get-richcontent-note (node)org-freemind-get-richcontent-note977,40106
(defun org-freemind-test-get-tree-text ()org-freemind-test-get-tree-text984,40405
(defun org-freemind-get-tree-text (node)org-freemind-get-tree-text995,40712
(defun org-freemind-get-richcontent-node-text (node)org-freemind-get-richcontent-node-text1034,41952
(defun org-freemind-get-richcontent-note-text (node)org-freemind-get-richcontent-note-text1043,42295
(defun org-freemind-get-icon-names (node)org-freemind-get-icon-names1052,42648
(defun org-freemind-node-to-org (node level skip-levels)org-freemind-node-to-org1060,42915
(defun org-freemind-to-org-mode (mm-file org-file)org-freemind-to-org-mode1103,44817

vendor/org-6.34c/lisp/org-gnus.el,495
(defcustom org-gnus-prefer-web-links nilorg-gnus-prefer-web-links50,1876
(defun org-gnus-group-link (group)org-gnus-group-link65,2353
(defun org-gnus-article-link (group newsgroups message-id x-no-archive)org-gnus-article-link83,3111
(defun org-gnus-store-link ()org-gnus-store-link104,4100
(defun org-gnus-open (path)org-gnus-open147,5933
(defun org-gnus-follow-link (&optional group article)org-gnus-follow-link160,6410
(defun org-gnus-no-new-news ()org-gnus-no-new-news189,7457

vendor/org-6.34c/lisp/org-habit.el,1984
(defgroup org-habit nilorg-habit36,1186
(defcustom org-habit-graph-column 40org-habit-graph-column41,1305
(defcustom org-habit-preceding-days 21org-habit-preceding-days47,1523
(defcustom org-habit-following-days 7org-habit-following-days52,1666
(defcustom org-habit-show-habits torg-habit-show-habits57,1807
(defcustom org-habit-show-habits-only-for-today torg-habit-show-habits-only-for-today62,1928
(defface org-habit-clear-faceorg-habit-clear-face69,2197
(defface org-habit-clear-future-faceorg-habit-clear-future-face75,2424
(defface org-habit-ready-faceorg-habit-ready-face82,2674
(defface org-habit-ready-future-faceorg-habit-ready-future-face88,2910
(defface org-habit-alert-faceorg-habit-alert-face95,3152
(defface org-habit-alert-future-faceorg-habit-alert-future-face101,3364
(defface org-habit-overdue-faceorg-habit-overdue-face108,3593
(defface org-habit-overdue-future-faceorg-habit-overdue-future-face114,3816
(defun org-habit-duration-to-days (ts)org-habit-duration-to-days121,4045
(defun org-is-habit-p (&optional pom)org-is-habit-p130,4379
(defun org-habit-parse-todo (&optional pom)org-habit-parse-todo134,4521
(defsubst org-habit-scheduled (habit)org-habit-scheduled175,6381
(defsubst org-habit-scheduled-repeat (habit)org-habit-scheduled-repeat177,6436
(defsubst org-habit-deadline (habit)org-habit-deadline179,6498
(defsubst org-habit-deadline-repeat (habit)org-habit-deadline-repeat184,6666
(defsubst org-habit-done-dates (habit)org-habit-done-dates187,6773
(defsubst org-habit-get-priority (habit &optional moment)org-habit-get-priority190,6830
(defun org-habit-get-faces (habit &optional now-days scheduled-days donep)org-habit-get-faces215,7743
(defun org-habit-build-graph (habit starting current ending)org-habit-build-graph250,9358
(defun org-habit-insert-consistency-graphs (&optional line)org-habit-insert-consistency-graphs305,11164
(defun org-habit-toggle-habits ()org-habit-toggle-habits329,12026

vendor/org-6.34c/lisp/org-html.el,6970
(defgroup org-export-html nilorg-export-html35,1227
(defcustom org-export-html-footnotes-section "<div id=\"footnotes\">org-export-html-footnotes-section40,1361
(defcustom org-export-html-footnote-format "<sup>%s</sup>"org-export-html-footnote-format53,1770
(defcustom org-export-html-coding-system nilorg-export-html-coding-system59,1970
(defcustom org-export-html-extension "html"org-export-html-extension64,2140
(defcustom org-export-html-xml-declarationorg-export-html-xml-declaration69,2271
(defcustom org-export-html-style-include-scripts torg-export-html-style-include-scripts83,2841
(defconst org-export-html-scriptsorg-export-html-scripts90,3098
(defconst org-export-html-style-defaultorg-export-html-style-default115,3823
(defcustom org-export-html-style-include-default torg-export-html-style-include-default155,5260
(defcustom org-export-html-style ""org-export-html-style165,5685
(defcustom org-export-html-style-extra ""org-export-html-style-extra197,6796
(defcustom org-export-html-tag-class-prefix ""org-export-html-tag-class-prefix208,7264
(defcustom org-export-html-todo-kwd-class-prefix ""org-export-html-todo-kwd-class-prefix217,7654
(defcustom org-export-html-title-format "<h1 class=\"title\">%s</h1>\n"org-export-html-title-format226,8062
(defcustom org-export-html-home/up-formatorg-export-html-home/up-format231,8240
(defcustom org-export-html-toplevel-hlevel 2org-export-html-toplevel-hlevel244,8766
(defcustom org-export-html-link-org-files-as-html torg-export-html-link-org-files-as-html255,9300
(defcustom org-export-html-inline-images 'maybeorg-export-html-inline-images267,9844
(defcustom org-export-html-inline-image-extensionsorg-export-html-inline-image-extensions278,10341
(defcustom org-export-html-table-tagorg-export-html-table-tag284,10555
(defcustom org-export-table-header-tags '("<th scope=\"%s\">" . "</th>")org-export-table-header-tags292,10864
(defcustom org-export-table-data-tags '("<td>" . "</td>")org-export-table-data-tags300,11295
(defcustom org-export-table-row-tags '("<tr>" . "</tr>")org-export-table-row-tags306,11563
(defcustom org-export-html-table-use-header-tags-for-first-column nilorg-export-html-table-use-header-tags-for-first-column335,12597
(defcustom org-export-html-validation-link nilorg-export-html-validation-link341,12825
(defcustom org-export-html-with-timestamp nilorg-export-html-with-timestamp350,13202
(defcustom org-export-html-html-helper-timestamporg-export-html-html-helper-timestamp357,13437
(defgroup org-export-htmlize nilorg-export-htmlize363,13664
(defcustom org-export-htmlize-output-type 'inline-cssorg-export-htmlize-output-type368,13806
(defcustom org-export-htmlize-css-font-prefix "org-"org-export-htmlize-css-font-prefix385,14768
(defcustom org-export-htmlized-org-css-url nilorg-export-htmlized-org-css-url390,14936
(defvar org-export-html-preamble nilorg-export-html-preamble406,15695
(defvar org-export-html-postamble nilorg-export-html-postamble409,15878
(defvar org-export-html-auto-preamble torg-export-html-auto-preamble412,16063
(defvar org-export-html-auto-postamble torg-export-html-auto-postamble414,16175
(defvar org-export-html-after-blockquotes-hook nilorg-export-html-after-blockquotes-hook419,16301
(defvar org-export-html-final-hook nilorg-export-html-final-hook422,16429
(defun org-export-html-preprocess (parameters)org-export-html-preprocess427,16546
(defun org-export-as-html-and-open (arg)org-export-as-html-and-open439,16949
(defun org-export-as-html-batch ()org-export-as-html-batch449,17364
(defun org-export-as-html-to-buffer (arg)org-export-as-html-to-buffer458,17707
(defun org-replace-region-by-html (beg end)org-replace-region-by-html467,18090
(defun org-export-region-as-html (beg end &optional body-only buffer)org-export-region-as-html491,18868
(defvar html-table-tag nil) ; dynamically scoped into this.html-table-tag522,20172
(defvar org-par-open nil)org-par-open523,20232
(defun org-export-as-html (arg &optional hidden ext-plistorg-export-as-html525,20273
(defun org-export-html-insert-plist-item (plist key &rest args)org-export-html-insert-plist-item1490,54472
(defun org-export-html-format-href (s)org-export-html-format-href1497,54678
(defun org-export-html-format-desc (s)org-export-html-format-desc1506,54956
(defun org-export-html-format-image (src par-open)org-export-html-format-image1513,55168
(defun org-export-html-get-bibliography ()org-export-html-get-bibliography1538,55988
(defvar org-table-number-regexp) ; defined in org-table.elorg-table-number-regexp1555,56593
(defun org-format-table-html (lines olines)org-format-table-html1556,56652
(defvar org-table-number-fraction) ; defined in org-table.elorg-table-number-fraction1582,57691
(defun org-format-org-table-html (lines &optional splice)org-format-org-table-html1583,57752
(defun org-export-splice-attributes (tag attributes)org-export-splice-attributes1690,61752
(defun org-format-table-table-html (lines)org-format-table-table-html1706,62313
(defun org-format-table-table-html-using-table-generate-source (lines)org-format-table-table-html-using-table-generate-source1754,63798
(defun org-export-splice-style (style extra)org-export-splice-style1771,64564
(defun org-html-handle-time-stamps (s)org-html-handle-time-stamps1781,64896
(defvar htmlize-buffer-places)  ; from htmlize.elhtmlize-buffer-places1806,65712
(defun org-export-htmlize-region-for-paste (beg end)org-export-htmlize-region-for-paste1807,65762
(defun org-export-htmlize-generate-css ()org-export-htmlize-generate-css1821,66361
(defun org-html-protect (s)org-html-protect1855,67750
(defun org-html-expand (string)org-html-expand1870,68214
(defun org-html-do-expand (s)org-html-do-expand1885,68790
(defun org-export-html-convert-special-strings (string)org-export-html-convert-special-strings1911,69796
(defun org-export-html-convert-sub-super (string)org-export-html-convert-sub-super1923,70258
(defun org-export-html-convert-emphasize (string)org-export-html-convert-emphasize1945,71129
(defun org-open-par ()org-open-par1966,71787
(defun org-close-par-maybe ()org-close-par-maybe1971,71937
(defun org-close-li (&optional type)org-close-li1976,72080
(defvar in-local-list)in-local-list1981,72225
(defvar local-list-indent)local-list-indent1982,72248
(defvar local-list-type)local-list-type1983,72275
(defun org-export-html-close-lists-maybe (line)org-export-html-close-lists-maybe1984,72300
(defvar body-only) ; dynamically scoped into this.body-only1999,72823
(defun org-html-level-start (level title umax with-toc head-count)org-html-level-start2000,72874
(defun org-export-html-get-tag-class-name (tag)org-export-html-get-tag-class-name2075,75645
(defun org-export-html-get-todo-kwd-class-name (kwd)org-export-html-get-todo-kwd-class-name2083,75960
(defun org-html-level-close (level max-outline-level)org-html-level-close2091,76294

vendor/org-6.34c/lisp/org-icalendar.el,2495
(defgroup org-export-icalendar nilorg-export-icalendar33,1153
(defcustom org-combined-agenda-icalendar-file "~/org.ics"org-combined-agenda-icalendar-file38,1302
(defcustom org-icalendar-combined-name "OrgMode"org-icalendar-combined-name45,1636
(defcustom org-icalendar-use-plain-timestamp torg-icalendar-use-plain-timestamp50,1810
(defcustom org-icalendar-use-deadline '(event-if-not-todo todo-due)org-icalendar-use-deadline55,1969
(defcustom org-icalendar-use-scheduled '(todo-start)org-icalendar-use-scheduled71,2689
(defcustom org-icalendar-categories '(local-tags category)org-icalendar-categories90,3563
(defcustom org-icalendar-include-todo nilorg-icalendar-include-todo106,4214
(defvar org-icalendar-verify-function nilorg-icalendar-verify-function120,4733
(defcustom org-icalendar-include-bbdb-anniversaries nilorg-icalendar-include-bbdb-anniversaries131,5311
(defcustom org-icalendar-include-sexps torg-icalendar-include-sexps137,5544
(defcustom org-icalendar-include-body 100org-icalendar-include-body143,5783
(defcustom org-icalendar-store-UID nilorg-icalendar-store-UID154,6228
(defcustom org-icalendar-timezone (getenv "TZ")org-icalendar-timezone168,6953
(defun org-export-icalendar-this-file ()org-export-icalendar-this-file179,7272
(defun org-export-icalendar-all-agenda-files ()org-export-icalendar-all-agenda-files187,7544
(defun org-export-icalendar-combine-agenda-files ()org-export-icalendar-combine-agenda-files195,7857
(defun org-export-icalendar (combine &rest files)org-export-icalendar201,8134
(defvar org-before-save-iCalendar-file-hook nilorg-before-save-iCalendar-file-hook253,10383
(defvar org-after-save-iCalendar-file-hook nilorg-after-save-iCalendar-file-hook257,10541
(defvar org-agenda-default-appointment-duration) ; defined in org-agenda.elorg-agenda-default-appointment-duration263,10800
(defun org-print-icalendar-entries (&optional combine)org-print-icalendar-entries264,10876
(defun org-export-get-categories ()org-export-get-categories492,18885
(defun org-icalendar-cleanup-string (s &optional is-body maxlength)org-icalendar-cleanup-string507,19448
(defun org-icalendar-cleanup-string-rfc2455 (s &optional is-body maxlength)org-icalendar-cleanup-string-rfc2455534,20477
(defun org-start-icalendar-file (name)org-start-icalendar-file560,21582
(defun org-finish-icalendar-file ()org-finish-icalendar-file575,22022
(defun org-ical-ts-to-string (s keyword &optional inc)org-ical-ts-to-string579,22149

vendor/org-6.34c/lisp/org-id.el,2491
(defgroup org-id nilorg-id77,2971
(defcustom org-id-uuid-program "uuidgen"org-id-uuid-program82,3085
(defcustom org-id-methodorg-id-method87,3186
(defcustom org-id-prefix nilorg-id-prefix114,4108
(defcustom org-id-include-domain nilorg-id-include-domain125,4447
(defcustom org-id-track-globally torg-id-track-globally137,4957
(defcustom org-id-locations-file (convert-standard-filenameorg-id-locations-file150,5483
(defvar org-id-locations nilorg-id-locations157,5744
(defvar org-id-files nilorg-id-files162,5901
(defcustom org-id-extra-files 'org-agenda-text-search-extra-filesorg-id-extra-files165,5964
(defcustom org-id-search-archives torg-id-search-archives180,6581
(defun org-id-get-create (&optional force)org-id-get-create191,6957
(defun org-id-copy ()org-id-copy201,7284
(defun org-id-get (&optional pom create prefix)org-id-get208,7464
(defun org-id-get-with-outline-path-completion (&optional targets)org-id-get-with-outline-path-completion228,8163
(defun org-id-get-with-outline-drilling (&optional targets)org-id-get-with-outline-drilling245,8923
(defun org-id-goto (id)org-id-goto255,9399
(defun org-id-find (id &optional markerp)org-id-find268,9780
(defun org-id-new (&optional prefix)org-id-new291,10521
(defun org-id-reverse-string (s)org-id-reverse-string321,11570
(defun org-id-int-to-b36-one-digit (i)org-id-int-to-b36-one-digit324,11668
(defun org-id-b36-to-int-one-digit (i)org-id-b36-to-int-one-digit331,11879
(defun org-id-int-to-b36 (i &optional length)org-id-int-to-b36340,12218
(defun org-id-b36-to-int (s)org-id-b36-to-int352,12617
(defun org-id-time-to-b36 (&optional time)org-id-time-to-b36359,12814
(defun org-id-decode (id)org-id-decode368,13160
(defun org-id-update-id-locations (&optional files)org-id-update-id-locations385,13845
(defun org-id-locations-save ()org-id-locations-save467,16812
(defun org-id-locations-load ()org-id-locations-load476,17151
(defun org-id-add-location (id file)org-id-add-location492,17726
(defun org-id-hash-to-alist (hash)org-id-hash-to-alist502,18172
(defun org-id-alist-to-hash (list)org-id-alist-to-hash513,18445
(defun org-id-paste-tracker (txt &optional buffer-or-file)org-id-paste-tracker526,18761
(defun org-id-find-id-file (id)org-id-find-id-file545,19480
(defun org-id-find-id-in-file (id file &optional markerp)org-id-find-id-in-file553,19800
(defun org-id-store-link ()org-id-store-link575,20590
(defun org-id-open (id)org-id-open588,21027

vendor/org-6.34c/lisp/org-indent.el,1762
(defgroup org-indent nilorg-indent39,1320
(defconst org-indent-max 40org-indent-max44,1444
(defconst org-indent-max-levels 40org-indent-max-levels46,1511
(defvar org-indent-strings nilorg-indent-strings49,1586
(defvar org-indent-stars nilorg-indent-stars52,1702
(defvar org-hide-leading-stars-before-indent-mode nilorg-hide-leading-stars-before-indent-mode55,1821
(defcustom org-indent-boundary-char ?\   ; comment to protect space charorg-indent-boundary-char58,1894
(defcustom org-indent-mode-turns-off-org-adapt-indentation torg-indent-mode-turns-off-org-adapt-indentation69,2369
(defcustom org-indent-mode-turns-on-hiding-stars torg-indent-mode-turns-on-hiding-stars75,2604
(defcustom org-indent-indentation-per-level 2org-indent-indentation-per-level80,2776
(defcustom org-indent-fix-section-after-idle-time 0.2org-indent-fix-section-after-idle-time85,2913
(defun org-indent-initialize ()org-indent-initialize97,3502
(define-minor-mode org-indent-modeorg-indent-mode123,4514
(defface org-indentorg-indent170,6381
(defun org-indent-indent-buffer ()org-indent-indent-buffer177,6604
(defun org-indent-remove-properties (beg end)org-indent-remove-properties187,6899
(defun org-indent-remove-properties-from-string (string)org-indent-remove-properties-from-string192,7082
(defvar org-indent-outline-re (concat "^" org-outline-regexp)org-indent-outline-re198,7287
(defun org-indent-add-properties (beg end)org-indent-add-properties201,7379
(defun org-indent-refresh-section ()org-indent-refresh-section232,8494
(defun org-indent-refresh-to (limit)org-indent-refresh-to245,8960
(defun org-indent-refresh-subtree ()org-indent-refresh-subtree258,9402
(defun org-indent-refresh-buffer ()org-indent-refresh-buffer270,9798

vendor/org-6.34c/lisp/org-info.el,278
(defvar Info-current-file)Info-current-file41,1435
(defvar Info-current-node)Info-current-node42,1462
(defun org-info-store-link ()org-info-store-link49,1634
(defun org-info-open (path)org-info-open63,2115
(defun org-info-follow-link (name)org-info-follow-link68,2233

vendor/org-6.34c/lisp/org-inlinetask.el,1223
(defgroup org-inlinetask nilorg-inlinetask82,3204
(defcustom org-inlinetask-min-level 15org-inlinetask-min-level87,3334
(defcustom org-inlinetask-export torg-inlinetask-export96,3750
(defvar org-odd-levels-only)org-odd-levels-only102,3906
(defvar org-keyword-time-regexp)org-keyword-time-regexp103,3935
(defvar org-drawer-regexp)org-drawer-regexp104,3968
(defvar org-complex-heading-regexp)org-complex-heading-regexp105,3995
(defvar org-property-end-re)org-property-end-re106,4031
(defun org-inlinetask-insert-task ()org-inlinetask-insert-task108,4061
(define-key org-mode-map "\C-c\C-xt" 'org-inlinetask-insert-task)org-mode-map115,4298
(defvar htmlp)  ; dynamically scoped into the next functionhtmlp117,4365
(defvar latexp) ; dynamically scoped into the next functionlatexp118,4425
(defun org-inlinetask-export-handler ()org-inlinetask-export-handler119,4485
(defun org-inlinetask-get-current-indentation ()org-inlinetask-get-current-indentation184,6916
(defun org-inlinetask-fontify (limit)org-inlinetask-fontify195,7238
(defun org-inlinetask-remove-END-maybe ()org-inlinetask-remove-END-maybe211,7911
(defun org-inlinetask-remove-terminator ()org-inlinetask-remove-terminator217,8124

vendor/org-6.34c/lisp/org-install.el,210
(defvar org-inlinetask-min-level)org-inlinetask-min-level31,1343
(defalias 'org-ido-switchb 'org-iswitchb)org-ido-switchb178,6850
(defalias 'org-publish-project 'org-publish)org-publish-project1156,44720

vendor/org-6.34c/lisp/org-irc.el,1004
(defvar org-irc-client 'ercorg-irc-client64,2401
(defvar org-irc-link-to-logs nilorg-irc-link-to-logs66,2460
(defvar erc-default-port)   ; dynamically scoped from erc.elerc-default-port69,2573
(defvar erc-session-port)   ; dynamically scoped form erc-backend.elerc-session-port70,2634
(defvar erc-session-server) ; dynamically scoped form erc-backend.elerc-session-server71,2703
(defun org-irc-visit (link)org-irc-visit79,2942
(defun org-irc-parse-link (link)org-irc-parse-link88,3219
(defun org-irc-store-link ()org-irc-store-link101,3715
(defun org-irc-elipsify-description (string &optional after)org-irc-elipsify-description107,3893
(defun org-irc-erc-get-line-from-log (erc-line)org-irc-erc-get-line-from-log124,4506
(defun org-irc-erc-store-link ()org-irc-erc-store-link146,5372
(defun org-irc-get-erc-link ()org-irc-get-erc-link181,6663
(defun org-irc-get-current-erc-port ()org-irc-get-current-erc-port196,7238
(defun org-irc-visit-erc (link)org-irc-visit-erc208,7563

vendor/org-6.34c/lisp/org-jsinfo.el,541
(defgroup org-infojs nilorg-infojs49,1813
(defcustom org-export-html-use-infojs 'when-configuredorg-export-html-use-infojs54,1975
(defconst org-infojs-opts-tableorg-infojs-opts-table67,2569
(defvar org-infojs-options)org-infojs-options81,3007
(defcustom org-infojs-optionsorg-infojs-options87,3205
(defcustom org-infojs-templateorg-infojs-template108,4005
(defun org-infojs-handle-options (exp-plist)org-infojs-handle-options121,4446
(defun org-infojs-options-inbuffer-template ()org-infojs-options-inbuffer-template194,7268

vendor/org-6.34c/lisp/org-latex.el,8726
(defvar org-export-latex-class nil)org-export-latex-class56,1664
(defvar org-export-latex-class-options nil)org-export-latex-class-options57,1700
(defvar org-export-latex-header nil)org-export-latex-header58,1744
(defvar org-export-latex-append-header nil)org-export-latex-append-header59,1781
(defvar org-export-latex-options-plist nil)org-export-latex-options-plist60,1825
(defvar org-export-latex-todo-keywords-1 nil)org-export-latex-todo-keywords-161,1869
(defvar org-export-latex-complex-heading-re nil)org-export-latex-complex-heading-re62,1915
(defvar org-export-latex-not-done-keywords nil)org-export-latex-not-done-keywords63,1964
(defvar org-export-latex-done-keywords nil)org-export-latex-done-keywords64,2012
(defvar org-export-latex-display-custom-times nil)org-export-latex-display-custom-times65,2056
(defvar org-export-latex-all-targets-re nil)org-export-latex-all-targets-re66,2107
(defvar org-export-latex-add-level 0)org-export-latex-add-level67,2152
(defvar org-export-latex-sectioning "")org-export-latex-sectioning68,2190
(defvar org-export-latex-sectioning-depth 0)org-export-latex-sectioning-depth69,2230
(defvar org-export-latex-special-keyword-regexporg-export-latex-special-keyword-regexp70,2275
(defvar latexp)    ; dynamically scoped from org.ellatexp76,2502
(defvar re-quote)  ; dynamically scoped from org.elre-quote77,2554
(defvar commentsp) ; dynamically scoped from org.elcommentsp78,2606
(defgroup org-export-latex nilorg-export-latex82,2680
(defcustom org-export-latex-default-class "article"org-export-latex-default-class87,2811
(defcustom org-export-latex-classesorg-export-latex-classes92,2958
(defcustom org-export-latex-inputenc-alist nilorg-export-latex-inputenc-alist200,6324
(defcustom org-export-latex-emphasis-alistorg-export-latex-emphasis-alist215,6737
(defcustom org-export-latex-title-command "\\maketitle"org-export-latex-title-command233,7423
(defcustom org-export-latex-import-inbuffer-stuff nilorg-export-latex-import-inbuffer-stuff241,7734
(defcustom org-export-latex-date-formatorg-export-latex-date-format247,7937
(defcustom org-export-latex-todo-keyword-markup "\\textbf{%s}"org-export-latex-todo-keyword-markup253,8070
(defcustom org-export-latex-timestamp-markup "\\textit{%s}"org-export-latex-timestamp-markup270,8754
(defcustom org-export-latex-timestamp-keyword-markup "\\texttt{%s}"org-export-latex-timestamp-keyword-markup275,8916
(defcustom org-export-latex-tables-verbatim nilorg-export-latex-tables-verbatim280,9086
(defcustom org-export-latex-tables-centered torg-export-latex-tables-centered285,9228
(defcustom org-export-latex-tables-column-borders nilorg-export-latex-tables-column-borders290,9383
(defcustom org-export-latex-low-levels 'itemizeorg-export-latex-low-levels296,9624
(defcustom org-export-latex-list-parametersorg-export-latex-list-parameters323,10927
(defcustom org-export-latex-verbatim-wraporg-export-latex-verbatim-wrap332,11266
(defcustom org-export-latex-listings nilorg-export-latex-listings344,11697
(defcustom org-export-latex-listings-langsorg-export-latex-listings-langs358,12311
(defcustom org-export-latex-remove-from-headlinesorg-export-latex-remove-from-headlines381,13174
(defcustom org-export-latex-image-default-option "width=10em"org-export-latex-image-default-option394,13644
(defcustom org-export-latex-inline-image-extensionsorg-export-latex-inline-image-extensions399,13782
(defcustom org-export-latex-coding-system nilorg-export-latex-coding-system409,14280
(defgroup org-export-pdf nilorg-export-pdf414,14425
(defcustom org-latex-to-pdf-processorg-latex-to-pdf-process420,14588
(defcustom org-export-pdf-logfilesorg-export-pdf-logfiles440,15576
(defcustom org-export-pdf-remove-logfiles torg-export-pdf-remove-logfiles446,15798
(defvar org-export-latex-after-initial-vars-hook nilorg-export-latex-after-initial-vars-hook454,16012
(defvar org-export-latex-after-blockquotes-hook nilorg-export-latex-after-blockquotes-hook459,16220
(defvar org-export-latex-final-hook nilorg-export-latex-final-hook462,16350
(defvar org-export-latex-after-save-hook nilorg-export-latex-after-save-hook465,16436
(defun org-export-as-latex-batch ()org-export-as-latex-batch471,16592
(defun org-export-as-latex-to-buffer (arg)org-export-as-latex-to-buffer482,16951
(defun org-replace-region-by-latex (beg end)org-replace-region-by-latex491,17340
(defun org-export-region-as-latex (beg end &optional body-only buffer)org-export-region-as-latex516,18179
(defun org-export-as-latex (arg &optional hidden ext-plistorg-export-as-latex548,19507
(defun org-export-as-pdf (arg &optional hidden ext-plistorg-export-as-pdf777,27791
(defun org-export-as-pdf-and-open (arg)org-export-as-pdf-and-open824,29411
(defun org-export-latex-parse-global (level odd)org-export-latex-parse-global834,29685
(defun org-export-latex-parse-content ()org-export-latex-parse-content883,31253
(defun org-export-latex-parse-subcontent (level odd)org-export-latex-parse-subcontent891,31520
(defun org-export-latex-global (content)org-export-latex-global903,31976
(defun org-export-latex-sub (subcontent)org-export-latex-sub911,32255
(defun org-export-latex-subcontent (subcontent num)org-export-latex-subcontent918,32567
(defun org-export-latex-set-initial-vars (ext-plist level)org-export-latex-set-initial-vars1027,37389
(defvar org-export-latex-format-toc-functionorg-export-latex-format-toc-function1091,40098
(defun org-export-latex-make-header (title opt-plist)org-export-latex-make-header1096,40338
(defun org-export-latex-format-toc-default (depth)org-export-latex-format-toc-default1155,42561
(defun org-export-latex-first-lines (opt-plist &optional beg end)org-export-latex-first-lines1160,42719
(defvar org-export-latex-header-defs nilorg-export-latex-header-defs1187,43622
(defvar org-export-latex-header-defs-re nilorg-export-latex-header-defs-re1189,43729
(defun org-export-latex-content (content &optional exclude-list)org-export-latex-content1192,43840
(defun org-export-latex-protect-string (s)org-export-latex-protect-string1224,45173
(defun org-export-latex-protect-char-in-string (char-list string)org-export-latex-protect-char-in-string1228,45326
(defun org-export-latex-keywords-maybe (&optional remove-list)org-export-latex-keywords-maybe1239,45728
(defun org-export-latex-fontify-headline (string)org-export-latex-fontify-headline1276,47139
(defun org-export-latex-time-stamps ()org-export-latex-time-stamps1300,48112
(defun org-export-latex-quotation-marks ()org-export-latex-quotation-marks1312,48544
(defun org-export-latex-special-chars (sub-superscript)org-export-latex-special-chars1330,49206
(defun org-inside-latex-math-p ()org-inside-latex-math-p1396,51859
(defun org-export-latex-treat-sub-super-charorg-export-latex-treat-sub-super-char1399,51941
(defun org-export-latex-treat-backslash-char (string-before string-after)org-export-latex-treat-backslash-char1433,53531
(defun org-export-latex-keywords ()org-export-latex-keywords1461,54818
(defun org-export-latex-fixed-width (opt)org-export-latex-fixed-width1473,55234
(defvar org-table-last-alignment) ; defined in org-table.elorg-table-last-alignment1492,55943
(defvar org-table-last-column-widths) ; defined in org-table.elorg-table-last-column-widths1493,56003
(defun org-export-latex-tables (insert)org-export-latex-tables1495,56131
(defun org-export-latex-fontify ()org-export-latex-fontify1609,61939
(defvar org-export-latex-use-verb nil)org-export-latex-use-verb1648,63344
(defun org-export-latex-emph-format (format string)org-export-latex-emph-format1649,63383
(defun org-export-latex-links ()org-export-latex-links1679,64589
(defun org-export-latex-format-image (path caption label attr)org-export-latex-format-image1757,67690
(defun org-export-latex-protect-amp (s)org-export-latex-protect-amp1820,69747
(defun org-remove-initial-hash (s)org-remove-initial-hash1826,69936
(defvar org-latex-entities)   ; defined beloworg-latex-entities1830,70031
(defvar org-latex-entities-regexp)   ; defined beloworg-latex-entities-regexp1831,70077
(defvar org-latex-entities-exceptions)   ; defined beloworg-latex-entities-exceptions1832,70130
(defun org-export-latex-preprocess (parameters)org-export-latex-preprocess1834,70188
(defun org-export-latex-fix-inputenc ()org-export-latex-fix-inputenc2011,76681
(defun org-export-latex-lists ()org-export-latex-lists2029,77321
(defconst org-latex-entitiesorg-latex-entities2039,77660
(defvar org-latex-entities-exceptions nil)org-latex-entities-exceptions2216,80528
(defconst org-latex-entities-regexporg-latex-entities-regexp2218,80572

vendor/org-6.34c/lisp/org-list.el,4791
(defvar org-blank-before-new-entry)org-blank-before-new-entry37,1234
(defvar org-M-RET-may-split-line)org-M-RET-may-split-line38,1270
(defvar org-complex-heading-regexp)org-complex-heading-regexp39,1304
(defvar org-odd-levels-only)org-odd-levels-only40,1340
(defgroup org-plain-lists nilorg-plain-lists56,2095
(defcustom org-cycle-include-plain-lists torg-cycle-include-plain-lists61,2224
(defcustom org-list-demote-modify-bullet nilorg-list-demote-modify-bullet84,3293
(defcustom org-plain-list-ordered-item-terminator torg-plain-list-ordered-item-terminator104,3853
(defcustom org-list-two-spaces-after-bullet-regexp nilorg-list-two-spaces-after-bullet-regexp115,4354
(defcustom org-empty-line-terminates-plain-lists nilorg-empty-line-terminates-plain-lists127,4882
(defcustom org-auto-renumber-ordered-lists torg-auto-renumber-ordered-lists135,5231
(defcustom org-provide-checkbox-statistics torg-provide-checkbox-statistics143,5572
(defcustom org-hierarchical-checkbox-statistics torg-hierarchical-checkbox-statistics151,5907
(defcustom org-description-max-indent 20org-description-max-indent159,6247
(defvar org-list-beginning-reorg-list-beginning-re166,6485
(defcustom org-list-radio-list-templatesorg-list-radio-list-templates169,6569
(defun org-at-item-p ()org-at-item-p200,7372
(defun org-at-item-bullet-p ()org-at-item-bullet-p212,7910
(defun org-in-item-p ()org-in-item-p218,8095
(defun org-insert-item (&optional checkbox)org-insert-item229,8323
(defun org-at-item-checkbox-p ()org-at-item-checkbox-p292,10229
(defun org-toggle-checkbox (&optional toggle-presence)org-toggle-checkbox300,10465
(defun org-reset-checkbox-state-subtree ()org-reset-checkbox-state-subtree368,12777
(defun org-checkbox-blocked-p ()org-checkbox-blocked-p383,13201
(defvar org-checkbox-statistics-hook nilorg-checkbox-statistics-hook405,14014
(defun org-update-checkbox-count-maybe ()org-update-checkbox-count-maybe410,14288
(defun org-update-checkbox-count (&optional all)org-update-checkbox-count416,14507
(defun org-get-checkbox-statistics-face ()org-get-checkbox-statistics-face517,18121
(defun org-beginning-of-item ()org-beginning-of-item530,18606
(defun org-end-of-item ()org-end-of-item563,19556
(defun org-next-item ()org-next-item591,20385
(defun org-previous-item ()org-previous-item604,20825
(defun org-first-list-item-p ()org-first-list-item-p629,21541
(defun org-move-item-down ()org-move-item-down637,21802
(defun org-move-item-up (arg)org-move-item-up681,23146
(defun org-maybe-renumber-ordered-list ()org-maybe-renumber-ordered-list742,24996
(defun org-maybe-renumber-ordered-list-safe ()org-maybe-renumber-ordered-list-safe753,25363
(defun org-cycle-list-bullet (&optional which)org-cycle-list-bullet759,25509
(defun org-get-string-indentation (s)org-get-string-indentation793,26729
(defun org-renumber-ordered-list (arg)org-renumber-ordered-list804,27089
(defvar org-suppress-item-indentation) ; dynamically scoped parameterorg-suppress-item-indentation846,28633
(defun org-fix-bullet-type (&optional force-bullet)org-fix-bullet-type847,28703
(defun org-shift-item-indentation (delta)org-shift-item-indentation888,30203
(defun org-beginning-of-item-list ()org-beginning-of-item-list905,30739
(defun org-end-of-item-list ()org-end-of-item-list930,31463
(defvar org-last-indent-begin-marker (make-marker))org-last-indent-begin-marker958,32142
(defvar org-last-indent-end-marker (make-marker))org-last-indent-end-marker959,32194
(defun org-outdent-item (arg)org-outdent-item961,32245
(defun org-indent-item (arg)org-indent-item966,32356
(defun org-item-indent-positions ()org-item-indent-positions1008,33959
(defvar org-tab-ind-state) ; defined in org.elorg-tab-ind-state1049,35576
(defun org-cycle-item-indentation ()org-cycle-item-indentation1050,35623
(defun org-get-bullet ()org-get-bullet1072,36380
(defun org-list-parse-list (&optional delete)org-list-parse-list1081,36626
(defun org-list-item-beginning ()org-list-item-beginning1131,38338
(defun org-list-goto-true-beginning ()org-list-goto-true-beginning1142,38733
(defun org-list-make-subtree ()org-list-make-subtree1151,39013
(defun org-list-make-subtrees (list level)org-list-make-subtrees1165,39465
(defun org-list-end (indent)org-list-end1177,39853
(defun org-list-insert-radio-list ()org-list-insert-radio-list1191,40305
(defun org-list-send-list (&optional maybe)org-list-send-list1206,40805
(defun org-list-to-generic (list params)org-list-to-generic1248,42352
(defun org-list-to-latex (list &optional params)org-list-to-latex1325,45064
(defun org-list-to-html (list &optional params)org-list-to-html1342,45722
(defun org-list-to-texinfo (list &optional params)org-list-to-texinfo1359,46327

vendor/org-6.34c/lisp/org-mac-message.el,716
(defgroup org-mac-flagged-mail nilorg-mac-flagged-mail50,1887
(defcustom org-mac-mail-account "customize"org-mac-mail-account55,2025
(defun org-mac-message-open (message-id)org-mac-message-open77,2851
(defun as-get-selected-mail ()as-get-selected-mail83,3118
(defun as-get-flagged-mail ()as-get-flagged-mail99,3774
(defun org-mac-message-get-links (&optional select-or-flag)org-mac-message-get-links148,5990
(defun org-mac-message-insert-selected ()org-mac-message-insert-selected180,7417
(defalias 'org-mac-message-insert-link 'org-mac-message-insert-selected)org-mac-message-insert-link188,7760
(defun org-mac-message-insert-flagged (org-buffer org-heading)org-mac-message-insert-flagged190,7834

vendor/org-6.34c/lisp/org-macs.el,2741
(defmacro org-bound-and-true-p (var)org-bound-and-true-p42,1523
(defmacro org-unmodified (&rest body)org-unmodified46,1659
(defmacro org-re (s)org-re55,1946
(defmacro org-preserve-lc (&rest body)org-preserve-lc71,2475
(defmacro org-without-partial-completion (&rest body)org-without-partial-completion79,2681
(defmacro org-maybe-intangible (props)org-maybe-intangible88,2968
(defmacro org-with-point-at (pom &rest body)org-with-point-at100,3575
(defmacro org-no-warnings (&rest body)org-no-warnings109,3901
(defmacro org-if-unprotected (&rest body)org-if-unprotected112,4014
(defmacro org-if-unprotected-1 (&rest body)org-if-unprotected-1117,4197
(defmacro org-if-unprotected-at (pos &rest body)org-if-unprotected-at122,4389
(defun org-re-search-forward-unprotected (&rest args)org-re-search-forward-unprotected128,4627
(defmacro org-with-remote-undo (_buffer &rest _body)org-with-remote-undo137,4937
(defmacro org-no-read-only (&rest body)org-no-read-only160,5806
(defconst org-rm-props '(invisible t face t keymap t intangible t mouse-face torg-rm-props164,5920
(defsubst org-match-string-no-properties (num &optional string)org-match-string-no-properties168,6119
(defsubst org-no-properties (s)org-no-properties175,6364
(defsubst org-get-alist-option (option key)org-get-alist-option181,6544
(defsubst org-check-external-command (cmd &optional use no-error)org-check-external-command187,6714
(defsubst org-inhibit-invisibility ()org-inhibit-invisibility199,7229
(defsubst org-set-local (var value)org-set-local205,7526
(defsubst org-mode-p ()org-mode-p209,7662
(defsubst org-last (list)org-last213,7764
(defun org-let (list &rest body)org-let217,7849
(defun org-let2 (list1 list2 &rest body)org-let2221,7961
(defsubst org-call-with-arg (command arg)org-call-with-arg225,8115
(defsubst org-current-line (&optional pos)org-current-line229,8287
(defsubst org-goto-line (N)org-goto-line235,8504
(defsubst org-current-line-string (&optional to-here)org-current-line-string241,8621
(defsubst org-pos-in-match-range (pos n)org-pos-in-match-range244,8749
(defun org-autoload (file functions)org-autoload249,8886
(defun org-match-line (re)org-match-line257,9174
(defun org-plist-delete (plist property)org-plist-delete263,9326
(defun org-replace-match-keep-properties (newtext &optional fixedcaseorg-replace-match-keep-properties274,9612
(defmacro org-with-limited-levels (&rest body)org-with-limited-levels281,9928
(defvar org-odd-levels-only) ; defined in org.elorg-odd-levels-only286,10107
(defvar org-inlinetask-min-level) ; defined in org-inlinetask.elorg-inlinetask-min-level287,10156
(defun org-get-limited-outline-regexp ()org-get-limited-outline-regexp288,10221

vendor/org-6.34c/lisp/org-mew.el,360
(defgroup org-mew nilorg-mew36,1279
(defcustom org-mew-link-to-refile-destination torg-mew-link-to-refile-destination41,1380
(defvar mew-init-p)mew-init-p65,2636
(defvar mew-summary-goto-line-then-display)mew-summary-goto-line-then-display66,2656
(defun org-mew-store-link ()org-mew-store-link73,2842
(defun org-mew-open (path)org-mew-open102,4071

vendor/org-6.34c/lisp/org-mhe.el,941
(defcustom org-mhe-search-all-folders nilorg-mhe-search-all-folders39,1342
(defvar mh-progs)mh-progs70,2900
(defvar mh-current-folder)mh-current-folder71,2918
(defvar mh-show-folder-buffer)mh-show-folder-buffer72,2945
(defvar mh-index-folder)mh-index-folder73,2976
(defvar mh-searcher)mh-searcher74,3001
(defvar mh-search-regexp-builder)mh-search-regexp-builder75,3022
(defun org-mhe-store-link ()org-mhe-store-link82,3198
(defun org-mhe-open (path)org-mhe-open99,3896
(defun org-mhe-get-message-real-folder ()org-mhe-get-message-real-folder109,4256
(defun org-mhe-get-message-folder-from-index ()org-mhe-get-message-folder-from-index141,5229
(defun org-mhe-get-message-folder ()org-mhe-get-message-folder148,5480
(defun org-mhe-get-message-num ()org-mhe-get-message-num157,5747
(defun org-mhe-get-header (header)org-mhe-get-header166,6019
(defun org-mhe-follow-link (folder article)org-mhe-follow-link186,6735

vendor/org-6.34c/lisp/org-mobile.el,3076
(defgroup org-mobile nilorg-mobile38,1450
(defcustom org-mobile-files '(org-agenda-files)org-mobile-files43,1582
(defcustom org-mobile-directory ""org-mobile-directory63,2432
(defcustom org-mobile-inbox-for-pull "~/org/from-mobile.org"org-mobile-inbox-for-pull68,2585
(defconst org-mobile-capture-file "mobileorg.org"org-mobile-capture-file77,2990
(defcustom org-mobile-index-file "index.org"org-mobile-index-file81,3178
(defcustom org-mobile-agendas 'allorg-mobile-agendas88,3447
(defcustom org-mobile-force-id-on-agenda-items torg-mobile-force-id-on-agenda-items104,3982
(defcustom org-mobile-force-mobile-change nilorg-mobile-force-mobile-change109,4125
(defcustom org-mobile-action-alistorg-mobile-action-alist127,4800
(defcustom org-mobile-checksum-binary (or (executable-find "shasum")org-mobile-checksum-binary148,5633
(defvar org-mobile-pre-push-hook nilorg-mobile-pre-push-hook156,5903
(defvar org-mobile-post-push-hook nilorg-mobile-post-push-hook163,6224
(defvar org-mobile-pre-pull-hook nilorg-mobile-pre-pull-hook170,6564
(defvar org-mobile-post-pull-hook nilorg-mobile-post-pull-hook177,6892
(defvar org-mobile-last-flagged-files nilorg-mobile-last-flagged-files184,7212
(defvar org-mobile-files-alist nil)org-mobile-files-alist187,7321
(defvar org-mobile-checksum-files nil)org-mobile-checksum-files188,7357
(defun org-mobile-prepare-file-lists ()org-mobile-prepare-file-lists190,7397
(defun org-mobile-files-alist ()org-mobile-files-alist194,7535
(defun org-mobile-push ()org-mobile-push235,9006
(defvar org-mobile-before-process-capture-hook nilorg-mobile-before-process-capture-hook271,10377
(defun org-mobile-pull ()org-mobile-pull277,10626
(defun org-mobile-check-setup ()org-mobile-check-setup302,11654
(defun org-mobile-create-index-file ()org-mobile-create-index-file326,12642
(defun org-mobile-copy-agenda-files ()org-mobile-copy-agenda-files393,15247
(defun org-mobile-write-checksums ()org-mobile-write-checksums421,16432
(defun org-mobile-sumo-agenda-command ()org-mobile-sumo-agenda-command433,16930
(defvar org-mobile-creating-agendas nil)org-mobile-creating-agendas503,19473
(defun org-mobile-write-agenda-for-mobile (file)org-mobile-write-agenda-for-mobile504,19514
(defun org-mobile-create-sumo-agenda ()org-mobile-create-sumo-agenda569,21656
(defun org-mobile-move-capture ()org-mobile-move-capture583,22126
(defun org-mobile-update-checksum-for-capture-file (buffer-string)org-mobile-update-checksum-for-capture-file612,23106
(defun org-mobile-apply (&optional beg end)org-mobile-apply626,23639
(defun org-mobile-timestamp-buffer (buf)org-mobile-timestamp-buffer765,28382
(defun org-mobile-smart-read ()org-mobile-smart-read782,28938
(defun org-find-olp (path)org-find-olp815,30369
(defun org-mobile-locate-entry (link)org-mobile-locate-entry850,31631
(defun org-mobile-edit (what old new)org-mobile-edit864,32207
(defun org-mobile-tags-same-p (list1 list2)org-mobile-tags-same-p950,35430
(defun org-mobile-bodies-same-p (a b)org-mobile-bodies-same-p955,35587

vendor/org-6.34c/lisp/org-mouse.el,4464
(defvar org-agenda-allow-remote-undo)org-agenda-allow-remote-undo143,4353
(defvar org-agenda-undo-list)org-agenda-undo-list144,4391
(defvar org-agenda-custom-commands)org-agenda-custom-commands145,4421
(defvar org-mouse-plain-list-regexp "\\([ \t]*\\)\\([-+*]\\|[0-9]+[.)]\\) "org-mouse-plain-list-regexp150,4636
(defvar org-mouse-direct torg-mouse-direct152,4763
(defgroup org-mouse nilorg-mouse159,5063
(defcustom org-mouse-punctuation ":"org-mouse-punctuation164,5154
(defcustom org-mouse-featuresorg-mouse-features169,5288
(defun org-mouse-re-search-line (regexp)org-mouse-re-search-line182,5950
(defun org-mouse-end-headline ()org-mouse-end-headline187,6121
(defvar org-mouse-context-menu-function nilorg-mouse-context-menu-function196,6383
(defun org-mouse-show-context-menu (event prefix)org-mouse-show-context-menu202,6632
(defun org-mouse-line-position ()org-mouse-line-position227,7680
(defun org-mouse-empty-line ()org-mouse-empty-line239,8084
(defun org-mouse-next-heading ()org-mouse-next-heading243,8238
(defun org-mouse-insert-heading ()org-mouse-insert-heading252,8509
(defun org-mouse-timestamp-today (&optional shift units)org-mouse-timestamp-today265,8945
(defun org-mouse-keyword-menu (keywords function &optional selected itemformat)org-mouse-keyword-menu275,9267
(defun org-mouse-remove-match-and-spaces ()org-mouse-remove-match-and-spaces310,10652
(defvar rest)rest316,10814
(defun org-mouse-replace-match-and-surround (newtext &optional fixedcaseorg-mouse-replace-match-and-surround317,10828
(defun org-mouse-keyword-replace-menu (keywords &optional group itemformatorg-mouse-keyword-replace-menu328,11195
(defun org-mouse-show-headlines ()org-mouse-show-headlines361,12442
(defun org-mouse-show-overview ()org-mouse-show-overview370,12707
(defun org-mouse-set-priority (priority)org-mouse-set-priority376,12895
(defvar org-mouse-priority-regexp "\\[#\\([A-Z]\\)\\]"org-mouse-priority-regexp381,13060
(defun org-mouse-get-priority (&optional default)org-mouse-get-priority386,13254
(defun org-mouse-delete-timestamp ()org-mouse-delete-timestamp403,13915
(defun org-mouse-looking-at (regexp skipchars &optional movechars)org-mouse-looking-at412,14272
(defun org-mouse-priority-list ()org-mouse-priority-list421,14542
(defun org-mouse-todo-menu (state)org-mouse-todo-menu425,14668
(defun org-mouse-tag-menu ()		;todoorg-mouse-tag-menu434,14911
(defun org-mouse-set-tags (tags)org-mouse-set-tags454,15482
(defun org-mouse-insert-checkbox ()org-mouse-insert-checkbox467,15831
(defun org-mouse-agenda-type (type)org-mouse-agenda-type475,16030
(defun org-mouse-list-options-menu (alloptions &optional function)org-mouse-list-options-menu485,16243
(defun org-mouse-clip-text (text maxlength)org-mouse-clip-text505,16837
(defun org-mouse-popup-global-menu ()org-mouse-popup-global-menu510,16983
(defun org-mouse-get-context (contextlist context)org-mouse-get-context571,19136
(defun org-mouse-for-each-item (function)org-mouse-for-each-item578,19366
(defun org-mouse-bolp ()org-mouse-bolp587,19558
(defun org-mouse-insert-item (text)org-mouse-insert-item592,19743
(defadvice dnd-insert-text (around org-mouse-dnd-insert-text activate)dnd-insert-text616,20371
(defadvice dnd-open-file (around org-mouse-dnd-open-file activate)dnd-open-file621,20525
(defun org-mouse-match-closure (function)org-mouse-match-closure626,20674
(defun org-mouse-match-todo-keyword ()org-mouse-match-todo-keyword633,20853
(defun org-mouse-yank-link (click)org-mouse-yank-link640,21085
(defun org-mouse-context-menu (&optional event)org-mouse-context-menu649,21396
(defun org-mouse-mark-active ()org-mouse-mark-active892,30327
(defun org-mouse-in-region-p (pos)org-mouse-in-region-p895,30401
(defun org-mouse-down-mouse (event)org-mouse-down-mouse900,30534
(defun org-mouse-move-tree-start (event)org-mouse-move-tree-start957,32713
(defun org-mouse-make-marker (position)org-mouse-make-marker962,32858
(defun org-mouse-move-tree (event)org-mouse-move-tree966,33003
(defun org-mouse-transform-to-outline ()org-mouse-transform-to-outline1013,34365
(defvar _cmd) ;dynamically scoped from `org-with-remote-undo'._cmd1030,34989
(defun org-mouse-do-remotely (command)org-mouse-do-remotely1032,35053
(defun org-mouse-agenda-context-menu (&optional event)org-mouse-agenda-context-menu1071,36455
(defun org-mouse-get-gesture (event)org-mouse-get-gesture1124,38582

vendor/org-6.34c/lisp/org-plot.el,917
(defvar org-plot/gnuplot-default-optionsorg-plot/gnuplot-default-options43,1400
(defvar org-plot-timestamp-fmt nil)org-plot-timestamp-fmt49,1559
(defun org-plot/add-options-to-plist (p options)org-plot/add-options-to-plist51,1596
(defun org-plot/goto-nearest-table ()org-plot/goto-nearest-table91,2804
(defun org-plot/collect-options (&optional params)org-plot/collect-options98,3099
(defun org-plot-quote-timestamp-field (s)org-plot-quote-timestamp-field108,3504
(defun org-plot-quote-tsv-field (s)org-plot-quote-tsv-field112,3693
(defun org-plot/gnuplot-to-data (table data-file params)org-plot/gnuplot-to-data119,3975
(defun org-plot/gnuplot-to-grid-data (table data-file params)org-plot/gnuplot-to-grid-data135,4488
(defun org-plot/gnuplot-script (data-file num-cols params &optional preface)org-plot/gnuplot-script185,6456
(defun org-plot/gnuplot (&optional params)org-plot/gnuplot273,9739

vendor/org-6.34c/lisp/org-protocol.el,1693
(defgroup org-protocol nilorg-protocol131,4838
(defconst org-protocol-protocol-alist-defaultorg-protocol-protocol-alist-default144,5212
(defconst org-protocol-the-protocol "org-protocol"org-protocol-the-protocol152,5622
(defcustom org-protocol-reverse-list-of-files torg-protocol-reverse-list-of-files162,6037
(defcustom org-protocol-project-alist nilorg-protocol-project-alist171,6364
(defcustom org-protocol-protocol-alist nilorg-protocol-protocol-alist216,8101
(defcustom org-protocol-default-template-key "w"org-protocol-default-template-key258,10056
(defun org-protocol-sanitize-uri (uri)org-protocol-sanitize-uri266,10221
(defun org-protocol-split-data(data &optional unhexify separator)org-protocol-split-data275,10557
(defun org-protocol-unhex-string(str)org-protocol-unhex-string301,11721
(defun org-protocol-unhex-compound (hex)org-protocol-unhex-compound318,12312
(defun org-protocol-flatten-greedy (param-list &optional strip-path replacement)org-protocol-flatten-greedy357,13366
(defun org-protocol-flatten (l)org-protocol-flatten402,15115
(defun org-protocol-store-link (fname)org-protocol-store-link414,15572
(defun org-protocol-remember  (info)org-protocol-remember443,16688
(defun org-protocol-open-source (fname)org-protocol-open-source491,18590
(defun org-protocol-check-filename-for-protocol (fname restoffiles client)org-protocol-check-filename-for-protocol554,21113
(defadvice server-visit-files (before org-protocol-detect-protocol-server activate)server-visit-files593,22992
(defun org-protocol-create-for-org ()org-protocol-create-for-org614,23934
(defun org-protocol-create(&optional project-plist)org-protocol-create628,24536

vendor/org-6.34c/lisp/org-publish.el,3191
(defgroup org-publish nilorg-publish51,1752
(defcustom org-publish-project-alist nilorg-publish-project-alist56,1882
(defcustom org-publish-use-timestamps-flag torg-publish-use-timestamps-flag167,7094
(defcustom org-publish-timestamp-directory (convert-standard-filenameorg-publish-timestamp-directory173,7317
(defcustom org-publish-list-skipped-files torg-publish-list-skipped-files179,7524
(defcustom org-publish-before-export-hook nilorg-publish-before-export-hook184,7670
(defcustom org-publish-after-export-hook nilorg-publish-after-export-hook191,7942
(defun org-publish-timestamp-filename (filename &optional pub-dir pub-func)org-publish-timestamp-filename200,8226
(defun org-publish-needed-p (filename &optional pub-dir pub-func true-pub-dir)org-publish-needed-p207,8585
(defun org-publish-update-timestamp (filename &optional pub-dir pub-func)org-publish-update-timestamp235,9899
(defun org-publish-remove-all-timestamps ()org-publish-remove-all-timestamps253,10636
(defvar org-publish-files-alist nilorg-publish-files-alist265,11027
(defvar org-publish-initial-buffer nilorg-publish-initial-buffer271,11184
(defvar org-publish-temp-files nilorg-publish-temp-files273,11275
(defun org-publish-initialize-files-alist (&optional refresh)org-publish-initialize-files-alist276,11357
(defun org-publish-validate-link (link &optional directory)org-publish-validate-link284,11690
(defun org-publish-get-files (projects-alist &optional no-exclusion)org-publish-get-files313,12775
(defun org-publish-expand-projects (projects-alist)org-publish-expand-projects330,13358
(defun org-publish-get-base-files-1 (base-dir &optional recurse match skip-file skip-dir)org-publish-get-base-files-1343,13833
(defun org-publish-get-base-files (project &optional exclude-regexp)org-publish-get-base-files364,14865
(defun org-publish-get-project-from-filename (filename &optional up)org-publish-get-project-from-filename389,15832
(defun org-publish-org-to (format plist filename pub-dir)org-publish-org-to402,16370
(defun org-publish-org-to-latex (plist filename pub-dir)org-publish-org-to-latex442,17829
(defun org-publish-org-to-pdf (plist filename pub-dir)org-publish-org-to-pdf447,18027
(defun org-publish-org-to-html (plist filename pub-dir)org-publish-org-to-html452,18231
(defun org-publish-org-to-org (plist filename pub-dir)org-publish-org-to-org457,18426
(defun org-publish-attachment (plist filename pub-dir)org-publish-attachment462,18619
(defun org-publish-file (filename &optional project)org-publish-file477,19233
(defun org-publish-projects (projects)org-publish-projects519,20983
(defun org-publish-org-index (project &optional index-filename)org-publish-org-index542,22024
(defun org-publish-find-title (file)org-publish-find-title605,24616
(defalias 'org-publish-project 'org-publish)org-publish-project627,25358
(defun org-publish (project &optional force)org-publish630,25419
(defun org-publish-all (&optional force)org-publish-all646,25900
(defun org-publish-current-file (&optional force)org-publish-current-file660,26374
(defun org-publish-current-project (&optional force)org-publish-current-project671,26743

vendor/org-6.34c/lisp/org-remember.el,3989
(defvar remember-save-after-remembering)remember-save-after-remembering43,1502
(defvar remember-register)remember-register44,1543
(defvar remember-buffer)remember-buffer45,1570
(defvar remember-handler-functions)remember-handler-functions46,1595
(defvar remember-annotation-functions)remember-annotation-functions47,1631
(defvar org-clock-heading)org-clock-heading48,1670
(defvar org-clock-heading-for-remember)org-clock-heading-for-remember49,1697
(defgroup org-remember nilorg-remember51,1738
(defcustom org-remember-store-without-prompt torg-remember-store-without-prompt56,1856
(defcustom org-remember-interactive-interface 'refileorg-remember-interactive-interface68,2370
(defcustom org-remember-default-headline ""org-remember-default-headline86,3301
(defcustom org-remember-templates nilorg-remember-templates94,3611
(defcustom org-remember-delete-empty-lines-at-end torg-remember-delete-empty-lines-at-end202,8901
(defcustom org-remember-before-finalize-hook nilorg-remember-before-finalize-hook207,9060
(defvar org-remember-mode-map (make-sparse-keymap)org-remember-mode-map213,9273
(defvar org-remember-mode-hook nilorg-remember-mode-hook217,9465
(define-minor-mode org-remember-modeorg-remember-mode220,9546
(define-key org-remember-mode-map "\C-c\C-c" 'org-remember-finalize)org-remember-mode-map224,9719
(define-key org-remember-mode-map "\C-c\C-k" 'org-remember-kill)org-remember-mode-map225,9788
(defcustom org-remember-clock-out-on-exit 'queryorg-remember-clock-out-on-exit227,9854
(defcustom org-remember-backup-directory nilorg-remember-backup-directory239,10394
(defcustom org-remember-auto-remove-backup-files torg-remember-auto-remove-backup-files250,10840
(defcustom org-remember-warn-about-backups torg-remember-warn-about-backups261,11329
(defvar annotation) ; from remember.el, dynamically scoped in `remember-mode'annotation273,11790
(defvar initial)    ; from remember.el, dynamically scoped in `remember-mode'initial274,11868
(defun org-remember-insinuate ()org-remember-insinuate277,11962
(defun org-remember-annotation ()org-remember-annotation285,12270
(defconst org-remember-helporg-remember-help292,12606
(defvar org-jump-to-target-location nil)org-jump-to-target-location299,12950
(defvar org-remember-previous-location nil)org-remember-previous-location300,12991
(defvar org-remember-reference-date nil)org-remember-reference-date301,13035
(defvar org-force-remember-template-char) ;; dynamically scopedorg-force-remember-template-char302,13076
(defvar org-select-template-temp-major-mode nil)org-select-template-temp-major-mode305,13202
(defvar org-select-template-original-buffer nil)org-select-template-original-buffer308,13313
(defun org-select-remember-template (&optional use-char)org-select-remember-template310,13363
(defun org-get-x-clipboard (value)org-get-x-clipboard391,16215
(defun org-remember-apply-template (&optional use-char skip-interactive)org-remember-apply-template398,16459
(defun org-remember-escaped-% ()org-remember-escaped-%667,26903
(defun org-remember-finish-immediately ()org-remember-finish-immediately675,27079
(defun org-remember-visit-immediately ()org-remember-visit-immediately682,27334
(defvar org-clock-marker) ; Defined in org.elorg-clock-marker697,27798
(defun org-remember-finalize ()org-remember-finalize698,27844
(defun org-remember-kill ()org-remember-kill718,28666
(defun org-remember (&optional goto org-force-remember-template-char)org-remember725,28824
(defvar org-remember-last-stored-marker (make-marker)org-remember-last-stored-marker760,30287
(defun org-remember-goto-last-stored ()org-remember-goto-last-stored763,30418
(defun org-go-to-remember-target (&optional template-key)org-go-to-remember-target770,30686
(defun org-remember-handler ()org-remember-handler799,31908
(defun org-do-remember (&optional initial)org-do-remember1108,43609
(defun org-require-remember ()org-require-remember1112,43694

vendor/org-6.34c/lisp/org-rmail.el,249
(defvar rmail-current-message)rmail-current-message40,1470
(defun org-rmail-store-link ()org-rmail-store-link47,1649
(defun org-rmail-open (path)org-rmail-open73,2659
(defun org-rmail-follow-link (folder article)org-rmail-follow-link82,2986

vendor/org-6.34c/lisp/org-src.el,2650
(defcustom org-edit-src-region-extra nilorg-edit-src-region-extra44,1544
(defcustom org-coderef-label-format "(ref:%s)"org-coderef-label-format61,2235
(defcustom org-edit-fixed-width-region-mode 'artist-modeorg-edit-fixed-width-region-mode78,2922
(defcustom org-src-preserve-indentation nilorg-src-preserve-indentation88,3261
(defcustom org-edit-src-content-indentation 2org-edit-src-content-indentation99,3793
(defcustom org-edit-src-persistent-message torg-edit-src-persistent-message108,4186
(defcustom org-src-window-setup 'reorganize-frameorg-src-window-setup117,4557
(defvar org-src-mode-hook nilorg-src-mode-hook136,5371
(defcustom org-src-lang-modesorg-src-lang-modes147,5831
(defvar org-src-mode-map (make-sparse-keymap))org-src-mode-map165,6505
(define-key org-src-mode-map "\C-c'" 'org-edit-src-exit)org-src-mode-map166,6552
(defvar org-edit-src-force-single-line nil)org-edit-src-force-single-line167,6609
(defvar org-edit-src-from-org-mode nil)org-edit-src-from-org-mode168,6653
(defvar org-edit-src-picture nil)org-edit-src-picture169,6693
(defvar org-edit-src-beg-marker nil)org-edit-src-beg-marker170,6727
(defvar org-edit-src-end-marker nil)org-edit-src-end-marker171,6764
(defvar org-edit-src-overlay nil)org-edit-src-overlay172,6801
(defvar org-edit-src-block-indentation nil)org-edit-src-block-indentation173,6835
(defvar org-edit-src-saved-temp-window-config nil)org-edit-src-saved-temp-window-config174,6879
(defvar org-src-ask-before-returning-to-edit-buffer torg-src-ask-before-returning-to-edit-buffer176,6931
(define-minor-mode org-src-modeorg-src-mode182,7213
(defun org-edit-src-code (&optional context)org-edit-src-code190,7564
(defun org-edit-src-continue (e)org-edit-src-continue282,11432
(defun org-src-switch-to-buffer (buffer context)org-src-switch-to-buffer289,11660
(defun org-src-construct-edit-buffer-name (org-buffer-name lang)org-src-construct-edit-buffer-name315,12451
(defun org-edit-src-find-buffer (beg end)org-edit-src-find-buffer319,12631
(defun org-edit-fixed-width-region ()org-edit-fixed-width-region334,13162
(defun org-edit-src-find-region-and-lang ()org-edit-src-find-region-and-lang424,16711
(defun org-edit-src-get-lang (lang)org-edit-src-get-lang487,19326
(defun org-edit-src-get-label-format (s)org-edit-src-get-label-format501,19745
(defun org-edit-src-get-indentation (pos)org-edit-src-get-indentation507,19927
(defun org-edit-src-exit (&optional context)org-edit-src-exit513,20085
(defun org-edit-src-save ()org-edit-src-save587,23008
(defun org-src-mode-configure-edit-buffer ()org-src-mode-configure-edit-buffer603,23517

vendor/org-6.34c/lisp/org-table.el,17035
(defvar orgtbl-mode) ; defined beloworgtbl-mode46,1692
(defvar orgtbl-mode-menu) ; defined when orgtbl mode get initializedorgtbl-mode-menu47,1729
(defvar org-export-html-table-tag) ; defined in org-exp.elorg-export-html-table-tag48,1798
(defvar constants-unit-system)constants-unit-system49,1857
(defcustom orgtbl-optimized (eq org-enable-table-editor 'optimized)orgtbl-optimized51,1889
(defcustom orgtbl-radio-table-templatesorgtbl-radio-table-templates65,2594
(defgroup org-table-settings nilorg-table-settings92,3376
(defcustom org-table-default-size "5x2"org-table-default-size97,3496
(defcustom org-table-number-regexporg-table-number-regexp102,3647
(defcustom org-table-number-fraction 0.5org-table-number-fraction131,4906
(defgroup org-table-editing nilorg-table-editing139,5239
(defcustom org-table-automatic-realign torg-table-automatic-realign144,5371
(defcustom org-table-auto-blank-field torg-table-auto-blank-field151,5629
(defcustom org-table-tab-jumps-over-hlines torg-table-tab-jumps-over-hlines159,5960
(defgroup org-table-calculation nilorg-table-calculation168,6354
(defcustom org-table-use-standard-references torg-table-use-standard-references173,6486
(defcustom org-table-copy-increment torg-table-copy-increment185,7003
(defcustom org-calc-default-modesorg-calc-default-modes190,7178
(defcustom org-table-formula-evaluate-inline torg-table-formula-evaluate-inline206,7786
(defcustom org-table-formula-use-constants torg-table-formula-use-constants217,8322
(defcustom org-table-formula-constants nilorg-table-formula-constants225,8666
(defcustom org-table-allow-automatic-line-recalculation torg-table-allow-automatic-line-recalculation243,9310
(defcustom org-table-error-on-row-ref-crossing-hline torg-table-error-on-row-ref-crossing-hline249,9574
(defcustom org-table-relative-ref-may-cross-hline torg-table-relative-ref-may-cross-hline254,9744
(defgroup org-table-import-export nilorg-table-import-export273,10512
(defcustom org-table-export-default-format "orgtbl-to-tsv"org-table-export-default-format278,10665
(defconst org-table-auto-recalculate-regexp "^[ \t]*| *# *\\(|\\|$\\)"org-table-auto-recalculate-regexp286,11035
(defconst org-table-recalculate-regexp "^[ \t]*| *[#*] *\\(|\\|$\\)"org-table-recalculate-regexp288,11168
(defconst org-table-calculate-mark-regexp "^[ \t]*| *[!$^_#*] *\\(|\\|$\\)"org-table-calculate-mark-regexp290,11299
(defconst org-table-border-regexp "^[ \t]*[^| \t]"org-table-border-regexp292,11437
(defvar org-table-last-highlighted-reference nil)org-table-last-highlighted-reference295,11579
(defvar org-table-formula-history nil)org-table-formula-history296,11629
(defvar org-table-column-names nilorg-table-column-names298,11669
(defvar org-table-column-name-regexp nilorg-table-column-name-regexp300,11761
(defvar org-table-local-parameters nilorg-table-local-parameters302,11861
(defvar org-table-named-field-locations nilorg-table-named-field-locations304,11960
(defvar org-table-current-line-types nilorg-table-current-line-types307,12048
(defvar org-table-current-begin-line nilorg-table-current-begin-line309,12154
(defvar org-table-current-begin-pos nilorg-table-current-begin-pos311,12261
(defvar org-table-dlines nilorg-table-dlines313,12371
(defvar org-table-hlines nilorg-table-hlines315,12460
(defconst org-table-range-regexporg-table-range-regexp318,12546
(defconst org-table-range-regexp2org-table-range-regexp2323,12843
(defconst org-table-translate-regexporg-table-translate-regexp330,13134
(defun org-table-create-with-table.el ()org-table-create-with-table.el334,13320
(defun org-table-create-or-convert-from-region (arg)org-table-create-or-convert-from-region349,13793
(defun org-table-create (&optional size)org-table-create361,14345
(defun org-table-convert-region (beg0 end0 &optional separator)org-table-convert-region393,15359
(defun org-table-import (file arg)org-table-import451,17504
(defvar org-table-last-alignment)org-table-last-alignment464,17971
(defvar org-table-last-column-widths)org-table-last-column-widths465,18005
(defun org-table-export (&optional file format)org-table-export466,18043
(defvar org-table-aligned-begin-marker (make-marker)org-table-aligned-begin-marker557,21689
(defvar org-table-aligned-end-marker (make-marker)org-table-aligned-end-marker560,21871
(defvar org-table-last-alignment nilorg-table-last-alignment563,22045
(defvar org-table-last-column-widths nilorg-table-last-column-widths566,22226
(defvar org-table-formula-debug nilorg-table-formula-debug569,22387
(defvar org-table-overlay-coordinates nilorg-table-overlay-coordinates573,22574
(defvar org-last-recalc-line nil)org-last-recalc-line577,22731
(defconst org-narrow-column-arrow "=>"org-narrow-column-arrow578,22765
(defun org-table-align ()org-table-align581,22862
(defun org-table-begin (&optional table-type)org-table-begin771,30101
(defun org-table-end (&optional table-type)org-table-end784,30548
(defun org-table-justify-field-maybe (&optional new)org-table-justify-field-maybe796,30941
(defun org-table-next-field ()org-table-next-field835,32509
(defun org-table-previous-field ()org-table-previous-field864,33412
(defun org-table-beginning-of-field (&optional n)org-table-beginning-of-field885,34108
(defun org-table-end-of-field (&optional n)org-table-end-of-field900,34703
(defun org-table-next-row ()org-table-next-row917,35309
(defun org-table-copy-down (n)org-table-copy-down940,36066
(defun org-table-check-inside-data-field ()org-table-check-inside-data-field993,38013
(defvar org-table-clip nilorg-table-clip1003,38393
(defun org-table-blank-field ()org-table-blank-field1006,38455
(defun org-table-get-field (&optional n replace)org-table-get-field1023,39032
(defun org-table-field-info (arg)org-table-field-info1040,39620
(defun org-table-current-column ()org-table-current-column1075,40869
(defun org-table-current-dline ()org-table-current-dline1084,41096
(defun org-table-goto-column (n &optional on-delim force)org-table-goto-column1098,41566
(defun org-table-insert-column ()org-table-insert-column1122,42435
(defun org-table-find-dataline ()org-table-find-dataline1148,43167
(defun org-table-delete-column ()org-table-delete-column1167,43749
(defun org-table-move-column-right ()org-table-move-column-right1197,44648
(defun org-table-move-column-left ()org-table-move-column-left1201,44763
(defun org-table-move-column (&optional left)org-table-move-column1206,44879
(defun org-table-move-row-down ()org-table-move-row-down1243,46223
(defun org-table-move-row-up ()org-table-move-row-up1247,46326
(defun org-table-move-row (&optional up)org-table-move-row1252,46426
(defun org-table-insert-row (&optional arg)org-table-insert-row1282,47466
(defun org-table-insert-hline (&optional above)org-table-insert-hline1301,48293
(defun org-table-hline-and-move (&optional same-column)org-table-hline-and-move1324,49238
(defun org-table-clean-line (s)org-table-clean-line1337,49693
(defun org-table-kill-row ()org-table-kill-row1350,50223
(defun org-table-sort-lines (with-case &optional sorting-type)org-table-sort-lines1363,50719
(defun org-table-cut-region (beg end)org-table-cut-region1444,53724
(defun org-table-copy-region (beg end &optional cut)org-table-copy-region1452,54064
(defun org-table-paste-rectangle ()org-table-paste-rectangle1489,55291
(defun org-table-convert ()org-table-convert1519,56370
(defun org-table-wrap-region (arg)org-table-wrap-region1564,58204
(defvar org-field-marker nil)org-field-marker1632,60980
(defun org-table-edit-field (arg)org-table-edit-field1634,61011
(defun org-table-finish-edit-field ()org-table-finish-edit-field1666,62339
(defvar org-timecnt) ; dynamically scoped parameterorg-timecnt1706,63165
(defun org-table-sum (&optional beg end nlast)org-table-sum1708,63218
(defun org-table-get-number-for-summing (s)org-table-get-number-for-summing1766,65326
(defun org-table-current-field-formula (&optional key noerror)org-table-current-field-formula1786,66094
(defun org-table-get-formula (&optional equation named)org-table-get-formula1806,66876
(defun org-table-store-formulas (alist)org-table-store-formulas1862,68999
(defsubst org-table-formula-make-cmp-string (a)org-table-formula-make-cmp-string1882,69666
(defun org-table-formula-less-p (a b)org-table-formula-less-p1889,70046
(defun org-table-get-stored-formulas (&optional noerror)org-table-get-stored-formulas1895,70265
(defun org-table-fix-formulas (key replace &optional limit delta remove)org-table-fix-formulas1920,71260
(defun org-table-get-specials ()org-table-get-specials1949,72421
(defun org-table-maybe-eval-formula ()org-table-maybe-eval-formula2025,75730
(defvar org-recalc-commands nilorg-recalc-commands2042,76533
(defvar org-recalc-marksorg-recalc-marks2046,76669
(defun org-table-rotate-recalc-marks (&optional newchar)org-table-rotate-recalc-marks2055,77201
(defun org-table-maybe-recalculate-line ()org-table-maybe-recalculate-line2115,79485
(defvar modes)modes2125,79925
(defsubst org-set-calc-mode (var &optional value)org-set-calc-mode2126,79940
(defun org-table-eval-formula (&optional arg equationorg-table-eval-formula2138,80322
(defun org-table-put-field-property (prop value)org-table-put-field-property2333,88147
(defun org-table-get-range (desc &optional tbeg col highlight)org-table-get-range2339,88355
(defun org-table-get-descriptor-line (desc &optional cline bline table)org-table-get-descriptor-line2401,90891
(defun org-table-find-row-type (table i type backwards relative n cline desc)org-table-find-row-type2438,92548
(defun org-table-rewrite-old-row-references (s)org-table-rewrite-old-row-references2460,93302
(defun org-table-make-reference (elements keep-empty numbers lispp)org-table-make-reference2465,93477
(defun org-table-recalculate (&optional all noalign)org-table-recalculate2497,94620
(defun org-table-iterate (&optional arg)org-table-iterate2608,99381
(defun org-table-formula-substitute-names (f)org-table-formula-substitute-names2628,100048
(defun org-table-get-constant (const)org-table-get-constant2650,100960
(defvar org-table-fedit-maporg-table-fedit-map2661,101463
(defvar org-pos)org-pos2712,103893
(defun org-table-edit-formulas ()org-table-edit-formulas2714,103911
(defun org-table-fedit-post-command ()org-table-fedit-post-command2764,106070
(defun org-table-formula-to-user (s)org-table-formula-to-user2773,106319
(defun org-table-formula-from-user (s)org-table-formula-from-user2779,106511
(defun org-table-convert-refs-to-rc (s)org-table-convert-refs-to-rc2785,106698
(defun org-table-convert-refs-to-an (s)org-table-convert-refs-to-an2811,107642
(defun org-letters-to-number (s)org-letters-to-number2829,108282
(defun org-number-to-letters (n)org-number-to-letters2839,108558
(defun org-table-fedit-convert-buffer (function)org-table-fedit-convert-buffer2848,108816
(defun org-table-fedit-toggle-ref-type ()org-table-fedit-toggle-ref-type2858,109196
(defun org-table-fedit-ref-up ()org-table-fedit-ref-up2868,109626
(defun org-table-fedit-ref-down ()org-table-fedit-ref-down2872,109767
(defun org-table-fedit-ref-left ()org-table-fedit-ref-left2876,109914
(defun org-table-fedit-ref-right ()org-table-fedit-ref-right2880,110064
(defun org-table-fedit-shift-reference (dir)org-table-fedit-shift-reference2885,110218
(defun org-rematch-and-replace (n &optional decr hline)org-rematch-and-replace2903,110936
(defun org-table-shift-refpart (ref &optional decr hline)org-table-shift-refpart2911,111310
(defun org-table-fedit-toggle-coordinates ()org-table-fedit-toggle-coordinates2943,112416
(defun org-table-fedit-finish (&optional arg)org-table-fedit-finish2952,112714
(defun org-table-fedit-abort ()org-table-fedit-abort2988,114096
(defun org-table-fedit-lisp-indent ()org-table-fedit-lisp-indent2999,114498
(defvar org-show-positions nil)org-show-positions3038,115787
(defun org-table-show-reference (&optional local)org-table-show-reference3040,115820
(defun org-table-force-dataline ()org-table-force-dataline3170,120954
(defun org-table-fedit-line-up ()org-table-fedit-line-up3184,121506
(defun org-table-fedit-line-down ()org-table-fedit-line-down3189,121659
(defun org-table-fedit-move (command)org-table-fedit-move3194,121812
(defun org-table-fedit-scroll (N)org-table-fedit-scroll3209,122390
(defun org-table-fedit-scroll-down (N)org-table-fedit-scroll-down3214,122537
(defvar org-table-rectangle-overlays nil)org-table-rectangle-overlays3218,122631
(defun org-table-add-rectangle-overlay (beg end &optional face)org-table-add-rectangle-overlay3220,122674
(defun org-table-highlight-rectangle (&optional beg end face)org-table-highlight-rectangle3226,122910
(defun org-table-remove-rectangle-highlight (&rest ignore)org-table-remove-rectangle-highlight3254,123952
(defvar org-table-coordinate-overlays nilorg-table-coordinate-overlays3261,124274
(defun org-table-overlay-coordinates ()org-table-overlay-coordinates3265,124450
(defun org-table-toggle-coordinate-overlays ()org-table-toggle-coordinate-overlays3294,125636
(defun org-table-toggle-formula-debugger ()org-table-toggle-formula-debugger3306,126163
(defvar orgtbl-mode nilorgtbl-mode3341,127919
(defvar orgtbl-mode-map (make-keymap)orgtbl-mode-map3346,128097
(defun turn-on-orgtbl ()turn-on-orgtbl3350,128182
(defvar org-old-auto-fill-inhibit-regexp nilorg-old-auto-fill-inhibit-regexp3354,128270
(defconst orgtbl-line-start-regexporgtbl-line-start-regexp3357,128358
(defconst orgtbl-extra-font-lock-keywordsorgtbl-extra-font-lock-keywords3361,128494
(defun orgtbl-mode (&optional arg)orgtbl-mode3367,128718
(defun org-table-cleanup-narrow-column-properties ()org-table-cleanup-narrow-column-properties3410,130567
(defun orgtbl-make-binding (fun n &rest keys)orgtbl-make-binding3428,131307
(defun orgtbl-error ()orgtbl-error3453,132153
(defun orgtbl-setup ()orgtbl-setup3458,132306
(defun orgtbl-ctrl-c-ctrl-c (arg)orgtbl-ctrl-c-ctrl-c3603,138713
(defun orgtbl-create-or-convert-from-region (arg)orgtbl-create-or-convert-from-region3632,139695
(defun orgtbl-tab (arg)orgtbl-tab3642,140115
(defun orgtbl-ret ()orgtbl-ret3649,140314
(defun orgtbl-self-insert-command (N)orgtbl-self-insert-command3657,140498
(defvar orgtbl-exp-regexp "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$"orgtbl-exp-regexp3705,142224
(defun orgtbl-export (table target)orgtbl-export3708,142367
(defun orgtbl-gather-send-defs ()orgtbl-gather-send-defs3733,143451
(defun orgtbl-send-replace-tbl (name txt)orgtbl-send-replace-tbl3750,144074
(defun org-table-to-lisp (&optional txt)org-table-to-lisp3769,144694
(defun orgtbl-send-table (&optional maybe)orgtbl-send-table3789,145390
(defun org-remove-by-index (list indices &optional i0)org-remove-by-index3838,147303
(defun orgtbl-toggle-comment ()orgtbl-toggle-comment3850,147682
(defun orgtbl-insert-radio-table ()orgtbl-insert-radio-table3870,148392
(defvar *orgtbl-table* nil*orgtbl-table*3886,148953
(defvar *orgtbl-rtn* nil*orgtbl-rtn*3888,149040
(defvar *orgtbl-hline* nil "Text used for horizontal lines")*orgtbl-hline*3891,149174
(defvar *orgtbl-sep* nil "Text used as a column separator")*orgtbl-sep*3892,149235
(defvar *orgtbl-default-fmt* nil "Default format for each entry")*orgtbl-default-fmt*3893,149295
(defvar *orgtbl-fmt* nil "Format for each entry")*orgtbl-fmt*3894,149361
(defvar *orgtbl-efmt* nil "Format for numbers")*orgtbl-efmt*3895,149411
(defvar *orgtbl-lfmt* nil "Format for an entire line, overrides fmt")*orgtbl-lfmt*3896,149459
(defvar *orgtbl-llfmt* nil "Specializes lfmt for the last row")*orgtbl-llfmt*3897,149529
(defvar *orgtbl-lstart* nil "Text starting a row")*orgtbl-lstart*3898,149593
(defvar *orgtbl-llstart* nil "Specializes lstart for the last row")*orgtbl-llstart*3899,149644
(defvar *orgtbl-lend* nil "Text ending a row")*orgtbl-lend*3900,149712
(defvar *orgtbl-llend* nil "Specializes lend for the last row")*orgtbl-llend*3901,149759
(defsubst orgtbl-get-fmt (fmt i)orgtbl-get-fmt3903,149824
(defsubst orgtbl-apply-fmt (fmt &rest args)orgtbl-apply-fmt3909,150004
(defsubst orgtbl-eval-str (str)orgtbl-eval-str3916,150231
(defun orgtbl-format-line (line)orgtbl-format-line3922,150373
(defun orgtbl-format-section (section-stopper)orgtbl-format-section3946,151155
(defun orgtbl-to-generic (table params)orgtbl-to-generic3958,151614
(defun orgtbl-to-tsv (table params)orgtbl-to-tsv4079,156898
(defun orgtbl-to-csv (table params)orgtbl-to-csv4082,157065
(defun orgtbl-to-latex (table params)orgtbl-to-latex4089,157335
(defun orgtbl-to-html (table params)orgtbl-to-html4127,159179
(defun orgtbl-to-texinfo (table params)orgtbl-to-texinfo4157,160343
(defun orgtbl-to-orgtbl (table params)orgtbl-to-orgtbl4195,162100
(defun org-table-get-remote-range (name-or-id form)org-table-get-remote-range4211,162656

vendor/org-6.34c/lisp/org-timer.el,1766
(defvar org-timer-start-time nilorg-timer-start-time35,1240
(defvar org-timer-pause-time nilorg-timer-pause-time38,1306
(defconst org-timer-re "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)"org-timer-re41,1377
(defcustom org-timer-format "%s "org-timer-format44,1511
(defun org-timer-start (&optional offset)org-timer-start52,1752
(defun org-timer-pause-or-continue (&optional stop)org-timer-pause-or-continue87,3225
(defun org-timer-stop ()org-timer-stop110,4005
(defun org-timer (&optional restart)org-timer118,4185
(defun org-timer-value-string ()org-timer-value-string130,4743
(defun org-timer-seconds ()org-timer-seconds133,4858
(defun org-timer-change-times-in-region (beg end delta)org-timer-change-times-in-region138,5010
(defun org-timer-item (&optional arg)org-timer-item164,5917
(defun org-timer-fix-incomplete (hms)org-timer-fix-incomplete181,6357
(defun org-timer-hms-to-secs (hms)org-timer-hms-to-secs192,6854
(defun org-timer-secs-to-hms (s)org-timer-secs-to-hms206,7405
(defvar org-timer-mode-line-timer nil)org-timer-mode-line-timer216,7709
(defvar org-timer-mode-line-string nil)org-timer-mode-line-string217,7748
(defun org-timer-set-mode-line (value)org-timer-set-mode-line219,7789
(defun org-timer-update-mode-line ()org-timer-update-mode-line249,9008
(defvar org-timer-timer1 nil)org-timer-timer1257,9259
(defvar org-timer-timer2 nil)org-timer-timer2258,9289
(defvar org-timer-timer3 nil)org-timer-timer3259,9319
(defvar org-timer-last-timer nil)org-timer-last-timer260,9349
(defun org-timer-cancel-timers ()org-timer-cancel-timers262,9384
(defun org-timer-show-remaining-time ()org-timer-show-remaining-time274,9646
(defun org-timer-set-timer (minutes)org-timer-set-timer291,10162

vendor/org-6.34c/lisp/org-vm.el,301
(defvar vm-message-pointer)vm-message-pointer47,1949
(defvar vm-folder-directory)vm-folder-directory48,1977
(defun org-vm-store-link ()org-vm-store-link55,2145
(defun org-vm-open (path)org-vm-open83,3267
(defun org-vm-follow-link (&optional folder article readonly)org-vm-follow-link93,3656

vendor/org-6.34c/lisp/org-w3m.el,584
(defun org-w3m-copy-for-org-mode ()org-w3m-copy-for-org-mode46,1672
(defun org-w3m-get-anchor-start ()org-w3m-get-anchor-start100,4434
(defun org-w3m-get-anchor-end ()org-w3m-get-anchor-end106,4692
(defun org-w3m-get-next-link-start ()org-w3m-get-next-link-start112,4918
(defun org-w3m-get-prev-link-start ()org-w3m-get-prev-link-start123,5332
(defun org-w3m-no-next-link-p ()org-w3m-no-next-link-p134,5762
(defun org-w3m-no-prev-link-p ()org-w3m-no-prev-link-p140,5976
(defvar w3m-mode-map)w3m-mode-map147,6234
(defvar w3m-minor-mode-map)w3m-minor-mode-map148,6256

vendor/org-6.34c/lisp/org-wl.el,413
(defgroup org-wl nilorg-wl37,1325
(defcustom org-wl-link-to-refile-destination torg-wl-link-to-refile-destination42,1429
(defvar wl-init)wl-init66,2625
(defvar wl-summary-buffer-elmo-folder)wl-summary-buffer-elmo-folder67,2642
(defvar wl-summary-buffer-folder-name)wl-summary-buffer-folder-name68,2681
(defun org-wl-store-link ()org-wl-store-link75,2859
(defun org-wl-open (path)org-wl-open120,4529

vendor/org-6.34c/lisp/org-xoxo.el,245
(defvar org-export-xoxo-final-hook nilorg-export-xoxo-final-hook33,1098
(defun org-export-as-xoxo-insert-into (buffer &rest output)org-export-as-xoxo-insert-into36,1190
(defun org-export-as-xoxo (&optional buffer)org-export-as-xoxo42,1387

vendor/org-6.34c/lisp/org.el,83266
(defvar org-inhibit-highlight-removal nil) ; dynamically scoped paramorg-inhibit-highlight-removal66,2864
(defvar org-table-formula-constants-local nilorg-table-formula-constants-local67,2934
(defconst org-version "6.34c"org-version98,3796
(defun org-version (&optional here)org-version101,3871
(defgroup org nilorg133,4971
(defcustom org-mode-hook nilorg-mode-hook140,5113
(defcustom org-load-hook nilorg-load-hook145,5234
(defvar org-modules)  ; defined beloworg-modules150,5344
(defvar org-modules-loaded nilorg-modules-loaded151,5382
(defun org-load-modules-maybe (&optional force)org-load-modules-maybe154,5457
(defun org-set-modules (var value)org-set-modules163,5788
(defcustom org-modules '(org-bbdb org-bibtex org-docview org-gnus org-info org-jsinfo org-irc org-mew org-mhe org-rmail org-vm org-w3m org-wl)org-modules173,6105
(defcustom org-support-shift-select nilorg-support-shift-select244,11264
(defgroup org-startup nilorg-startup287,13399
(defcustom org-startup-folded torg-startup-folded292,13506
(defcustom org-startup-truncated torg-startup-truncated308,14124
(defcustom org-startup-indented nilorg-startup-indented315,14390
(defcustom org-startup-with-beamer-mode nilorg-startup-with-beamer-mode327,14769
(defcustom org-startup-align-all-tables nilorg-startup-align-all-tables336,15042
(defcustom org-insert-mode-line-in-empty-file nilorg-insert-mode-line-in-empty-file347,15489
(defcustom org-replace-disputed-keys nilorg-replace-disputed-keys357,15959
(defcustom org-use-extra-keys nilorg-use-extra-keys373,16687
(defcustom org-disputed-keysorg-disputed-keys389,17302
(defun org-key (key)org-key406,17990
(defun org-find-if (predicate seq)org-find-if417,18351
(defun org-defkey (keymap key def)org-defkey424,18499
(defcustom org-ellipsis nilorg-ellipsis428,18641
(defvar org-display-table nilorg-display-table440,19172
(defgroup org-keywords nilorg-keywords443,19275
(defcustom org-deadline-string "DEADLINE:"org-deadline-string448,19366
(defcustom org-scheduled-string "SCHEDULED:"org-scheduled-string457,19710
(defcustom org-closed-string "CLOSED:"org-closed-string466,20062
(defcustom org-clock-string "CLOCK:"org-clock-string471,20217
(defcustom org-comment-string "COMMENT"org-comment-string476,20368
(defcustom org-quote-string "QUOTE"org-quote-string484,20646
(defconst org-repeat-reorg-repeat-re493,21035
(defgroup org-structure nilorg-structure498,21266
(defgroup org-reveal-location nilorg-reveal-location503,21397
(defconst org-context-choiceorg-context-choice508,21547
(defcustom org-show-hierarchy-above '((default . t))org-show-hierarchy-above527,22016
(defcustom org-show-following-heading '((default . nil))org-show-following-heading547,23096
(defcustom org-show-siblings '((default . nil) (isearch t))org-show-siblings560,23768
(defcustom org-show-entry-below '((default . nil))org-show-entry-below576,24652
(defcustom org-indirect-buffer-display 'other-windoworg-indirect-buffer-display588,25190
(defcustom org-use-speed-commands nilorg-use-speed-commands607,26088
(defcustom org-speed-commands-user nilorg-speed-commands-user617,26443
(defgroup org-cycle nilorg-cycle639,27421
(defcustom org-cycle-skip-children-state-if-no-children torg-cycle-skip-children-state-if-no-children644,27545
(defcustom org-cycle-max-level nilorg-cycle-max-level649,27713
(defcustom org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK")org-drawers664,28371
(defcustom org-hide-block-startup nilorg-hide-block-startup681,28905
(defcustom org-cycle-global-at-bob nilorg-cycle-global-at-bob691,29159
(defcustom org-cycle-level-after-item/entry-creation torg-cycle-level-after-item/entry-creation703,29732
(defcustom org-cycle-emulate-tab torg-cycle-emulate-tab718,30453
(defcustom org-cycle-separator-lines 2org-cycle-separator-lines735,31165
(defcustom org-pre-cycle-hook nilorg-pre-cycle-hook753,31994
(defcustom org-cycle-hook '(org-cycle-hide-archived-subtreesorg-cycle-hook763,32465
(defgroup org-edit-structure nilorg-edit-structure776,33095
(defcustom org-odd-levels-only nilorg-odd-levels-only781,33236
(defcustom org-adapt-indentation torg-adapt-indentation797,33832
(defcustom org-special-ctrl-a/e nilorg-special-ctrl-a/e821,34900
(defcustom org-special-ctrl-k nilorg-special-ctrl-k859,36590
(defcustom org-yank-folded-subtrees torg-yank-folded-subtrees871,37111
(defcustom org-yank-adjusted-subtrees nilorg-yank-adjusted-subtrees880,37536
(defcustom org-M-RET-may-split-line '((default . t))org-M-RET-may-split-line887,37787
(defcustom org-insert-heading-respect-content nilorg-insert-heading-respect-content914,38566
(defcustom org-blank-before-new-entry '((heading . auto)org-blank-before-new-entry923,38950
(defcustom org-insert-heading-hook nilorg-insert-heading-hook941,39665
(defcustom org-enable-fixed-width-editor torg-enable-fixed-width-editor946,39799
(defcustom org-goto-auto-isearch torg-goto-auto-isearch955,40106
(defgroup org-sparse-trees nilorg-sparse-trees960,40265
(defcustom org-highlight-sparse-tree-matches torg-highlight-sparse-tree-matches965,40397
(defcustom org-remove-highlights-with-change torg-remove-highlights-with-change972,40658
(defcustom org-occur-hook '(org-first-headline-recenter)org-occur-hook983,41075
(defgroup org-imenu-and-speedbar nilorg-imenu-and-speedbar990,41331
(defcustom org-imenu-depth 2org-imenu-depth995,41481
(defgroup org-table nilorg-table1001,41663
(defcustom org-enable-table-editor 'optimizedorg-enable-table-editor1006,41765
(defcustom org-self-insert-cluster-for-undo torg-self-insert-cluster-for-undo1037,43249
(defcustom org-table-tab-recognizes-table.el torg-table-tab-recognizes-table.el1045,43584
(defgroup org-link nilorg-link1052,43847
(defvar org-link-abbrev-alist-local nilorg-link-abbrev-alist-local1057,43946
(defcustom org-link-abbrev-alist nilorg-link-abbrev-alist1062,44160
(defcustom org-descriptive-links torg-descriptive-links1090,45198
(defcustom org-link-file-path-type 'adaptiveorg-link-file-path-type1098,45544
(defcustom org-activate-links '(bracket angle plain radio tag date footnote)org-activate-links1115,46171
(defcustom org-make-link-description-function nilorg-make-link-description-function1141,47444
(defgroup org-link-store nilorg-link-store1150,47800
(defcustom org-email-link-description-format "Email %c: %.30s"org-email-link-description-format1155,47924
(defcustom org-from-is-user-regexporg-from-is-user-regexp1175,48717
(defcustom org-link-to-org-use-id 'create-if-interactive-and-no-custom-idorg-link-to-org-use-id1187,49279
(defcustom org-context-in-file-links torg-context-in-file-links1227,51016
(defcustom org-keep-stored-link-after-insertion nilorg-keep-stored-link-after-insertion1237,51454
(defgroup org-link-follow nilorg-link-follow1250,52045
(defcustom org-link-translation-function nilorg-link-translation-function1255,52173
(defcustom org-follow-link-hook nilorg-follow-link-hook1269,52860
(defcustom org-tab-follows-link nilorg-tab-follows-link1274,52991
(defcustom org-return-follows-link nilorg-return-follows-link1282,53254
(defcustom org-mouse-1-follows-linkorg-mouse-1-follows-link1288,53433
(defcustom org-mark-ring-length 4org-mark-ring-length1296,53756
(defcustom org-link-frame-setuporg-link-frame-setup1302,53957
(defcustom org-display-internal-link-with-indirect-buffer nilorg-display-internal-link-with-indirect-buffer1342,55132
(defcustom org-open-non-existing-files nilorg-open-non-existing-files1353,55703
(defcustom org-open-directory-means-index-dot-org nilorg-open-directory-means-index-dot-org1362,56075
(defcustom org-link-mailto-program '(browse-url "mailto:%a?subject=%s")org-link-mailto-program1369,56346
(defcustom org-confirm-shell-link-function 'yes-or-no-porg-confirm-shell-link-function1382,57058
(defcustom org-confirm-elisp-link-function 'yes-or-no-porg-confirm-elisp-link-function1399,57775
(defconst org-file-apps-defaults-gnuorg-file-apps-defaults-gnu1416,58517
(defconst org-file-apps-defaults-macosxorg-file-apps-defaults-macosx1423,58701
(defconst org-file-apps-defaults-windowsntorg-file-apps-defaults-windowsnt1436,59119
(defcustom org-file-appsorg-file-apps1453,59555
(defgroup org-refile nilorg-refile1521,62906
(defcustom org-directory "~/org"org-directory1526,63020
(defcustom org-default-notes-file (convert-standard-filename "~/.notes")org-default-notes-file1542,63662
(defcustom org-goto-interface 'outlineorg-goto-interface1554,64092
(defcustom org-goto-max-level 5org-goto-max-level1568,64767
(defcustom org-reverse-note-order nilorg-reverse-note-order1573,64919
(defcustom org-refile-targets nilorg-refile-targets1586,65406
(defcustom org-refile-target-verify-function nilorg-refile-target-verify-function1629,67579
(defcustom org-refile-use-outline-path nilorg-refile-use-outline-path1643,68238
(defcustom org-outline-path-complete-in-steps torg-outline-path-complete-in-steps1659,68854
(defcustom org-refile-allow-creating-parent-nodes nilorg-refile-allow-creating-parent-nodes1671,69464
(defgroup org-todo nilorg-todo1688,70181
(defgroup org-progress nilorg-progress1693,70285
(defvar org-todo-interpretation-widgetsorg-todo-interpretation-widgets1698,70408
(defcustom org-todo-keywords '((sequence "TODO" "DONE"))org-todo-keywords1706,70694
(defvar org-todo-keywords-1 nilorg-todo-keywords-11770,73516
(defvar org-todo-keywords-for-agenda nil)org-todo-keywords-for-agenda1773,73650
(defvar org-done-keywords-for-agenda nil)org-done-keywords-for-agenda1774,73692
(defvar org-drawers-for-agenda nil)org-drawers-for-agenda1775,73734
(defvar org-todo-keyword-alist-for-agenda nil)org-todo-keyword-alist-for-agenda1776,73770
(defvar org-tag-alist-for-agenda nil)org-tag-alist-for-agenda1777,73817
(defvar org-agenda-contributing-files nil)org-agenda-contributing-files1778,73855
(defvar org-not-done-keywords nil)org-not-done-keywords1779,73898
(defvar org-done-keywords nil)org-done-keywords1781,73985
(defvar org-todo-heads nil)org-todo-heads1783,74064
(defvar org-todo-sets nil)org-todo-sets1785,74137
(defvar org-todo-log-states nil)org-todo-log-states1787,74208
(defvar org-todo-kwd-alist nil)org-todo-kwd-alist1789,74291
(defvar org-todo-key-alist nil)org-todo-key-alist1791,74372
(defvar org-todo-key-trigger nil)org-todo-key-trigger1793,74453
(defcustom org-todo-interpretation 'sequenceorg-todo-interpretation1796,74539
(defcustom org-use-fast-todo-selection torg-use-fast-todo-selection1807,74936
(defcustom org-provide-todo-statistics torg-provide-todo-statistics1831,75857
(defcustom org-hierarchical-todo-statistics torg-hierarchical-todo-statistics1848,76556
(defcustom org-after-todo-state-change-hook nilorg-after-todo-state-change-hook1857,76946
(defvar org-blocker-hook nilorg-blocker-hook1864,77191
(defvar org-trigger-hook nilorg-trigger-hook1873,77488
(defcustom org-enforce-todo-dependencies nilorg-enforce-todo-dependencies1893,78090
(defcustom org-enforce-todo-checkbox-dependencies nilorg-enforce-todo-checkbox-dependencies1912,78941
(defcustom org-treat-insert-todo-heading-as-state-change nilorg-treat-insert-todo-heading-as-state-change1930,79703
(defcustom org-treat-S-cursor-todo-selection-as-state-change torg-treat-S-cursor-todo-selection-as-state-change1938,80067
(defcustom org-todo-state-tags-triggers nilorg-todo-state-tags-triggers1946,80399
(defcustom org-log-done nilorg-log-done1967,81117
(defcustom org-log-reschedule nilorg-log-reschedule1997,82024
(defcustom org-log-redeadline nilorg-log-redeadline2018,82653
(defcustom org-log-note-clock-out nilorg-log-note-clock-out2042,83397
(defcustom org-log-done-with-time torg-log-done-with-time2053,83733
(defcustom org-log-note-headingsorg-log-note-headings2059,83922
(defcustom org-log-into-drawer nilorg-log-into-drawer2097,85653
(defun org-log-into-drawer ()org-log-into-drawer2123,86572
(defcustom org-log-state-notes-insert-after-drawers nilorg-log-state-notes-insert-after-drawers2133,86977
(defcustom org-log-states-order-reversed torg-log-states-order-reversed2146,87441
(defcustom org-log-repeat 'timeorg-log-repeat2153,87680
(defgroup org-priorities nilorg-priorities2181,88675
(defcustom org-enable-priority-commands torg-enable-priority-commands2186,88777
(defcustom org-highest-priority ?Aorg-highest-priority2193,89002
(defcustom org-lowest-priority ?Corg-lowest-priority2199,89214
(defcustom org-default-priority ?Borg-default-priority2205,89424
(defcustom org-priority-start-cycle-with-default torg-priority-start-cycle-with-default2211,89612
(defgroup org-time nilorg-time2218,89911
(defcustom org-insert-labeled-timestamps-at-point nilorg-insert-labeled-timestamps-at-point2223,90030
(defconst org-time-stamp-formats '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")org-time-stamp-formats2231,90407
(defcustom org-time-stamp-rounding-minutes '(0 5)org-time-stamp-rounding-minutes2235,90601
(defcustom org-display-custom-times nilorg-display-custom-times2264,91837
(defcustom org-time-stamp-custom-formatsorg-time-stamp-custom-formats2274,92220
(defun org-time-stamp-format (&optional long inactive)org-time-stamp-format2284,92705
(defcustom org-time-clocksum-format "%d:%02d"org-time-clocksum-format2292,92957
(defcustom org-time-clocksum-use-fractional nilorg-time-clocksum-use-fractional2298,93141
(defcustom org-time-clocksum-fractional-format "%.2f"org-time-clocksum-fractional-format2304,93324
(defcustom org-deadline-warning-days 14org-deadline-warning-days2310,93516
(defcustom org-read-date-prefer-future torg-read-date-prefer-future2321,93973
(defcustom org-read-date-display-live torg-read-date-display-live2348,95032
(defcustom org-read-date-popup-calendar torg-read-date-popup-calendar2354,95236
(defcustom org-read-date-minibuffer-setup-hook nilorg-read-date-minibuffer-setup-hook2365,95692
(defcustom org-extend-today-until 0org-extend-today-until2372,95921
(defcustom org-edit-timestamp-down-means-later nilorg-edit-timestamp-down-means-later2387,96663
(defcustom org-calendar-follow-timestamp-change torg-calendar-follow-timestamp-change2393,96848
(defgroup org-tags nilorg-tags2400,97105
(defcustom org-tag-alist nilorg-tag-alist2405,97203
(defcustom org-tag-persistent-alist nilorg-tag-persistent-alist2426,97957
(defcustom org-complete-tags-always-offer-all-agenda-tags nilorg-complete-tags-always-offer-all-agenda-tags2446,98797
(defvar org-file-tags nilorg-file-tags2460,99354
(defcustom org-use-fast-tag-selection 'autoorg-use-fast-tag-selection2466,99589
(defcustom org-fast-tag-selection-single-key nilorg-fast-tag-selection-single-key2481,100252
(defvar org-fast-tag-selection-include-todo nilorg-fast-tag-selection-include-todo2493,100738
(defcustom org-tags-column (if (featurep 'xemacs) -76 -77)org-tags-column2497,100926
(defcustom org-auto-align-tags torg-auto-align-tags2505,101282
(defcustom org-use-tag-inheritance torg-use-tag-inheritance2513,101617
(defcustom org-tags-exclude-from-inheritance nilorg-tags-exclude-from-inheritance2533,102606
(defun org-tag-inherit-p (tag)org-tag-inherit-p2541,102939
(defcustom org-tags-match-list-sublevels torg-tags-match-list-sublevels2553,103390
(defcustom org-tags-sort-function nilorg-tags-sort-function2575,104375
(defvar org-tags-history nilorg-tags-history2584,104678
(defvar org-last-tags-completion-table nilorg-last-tags-completion-table2586,104750
(defvar org-after-tags-change-hook nilorg-after-tags-change-hook2588,104839
(defgroup org-properties nilorg-properties2591,104940
(defcustom org-property-format "%-10s %s"org-property-format2596,105056
(defcustom org-use-property-inheritance nilorg-use-property-inheritance2604,105386
(defun org-property-inherit-p (property)org-property-inherit-p2634,106694
(defcustom org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS"org-columns-default-format2645,107149
(defcustom org-columns-ellipses ".."org-columns-ellipses2653,107424
(defcustom org-columns-modify-value-for-display-function nilorg-columns-modify-value-for-display-function2663,107934
(defcustom org-effort-property "Effort"org-effort-property2676,108436
(defconst org-global-properties-fixedorg-global-properties-fixed2683,108701
(defcustom org-global-properties nilorg-global-properties2696,109276
(defvar org-file-properties nilorg-file-properties2713,109815
(defgroup org-agenda nilorg-agenda2719,110048
(defvar org-category nilorg-category2724,110158
(defcustom org-agenda-files nilorg-agenda-files2739,110613
(defcustom org-agenda-file-regexp "\\`[^.].*\\.org\\'"org-agenda-file-regexp2755,111307
(defcustom org-agenda-text-search-extra-files nilorg-agenda-text-search-extra-files2763,111644
(defcustom org-agenda-skip-unavailable-files nilorg-agenda-skip-unavailable-files2783,112576
(defcustom org-calendar-to-agenda-key [?c]org-calendar-to-agenda-key2789,112803
(defcustom org-calendar-agenda-action-key [?k]org-calendar-agenda-action-key2797,113146
(defcustom org-calendar-insert-diary-entry-key [?i]org-calendar-insert-diary-entry-key2804,113436
(defcustom org-agenda-diary-file 'diary-fileorg-agenda-diary-file2815,113967
(defgroup org-latex nilorg-latex2838,114884
(defcustom org-format-latex-optionsorg-format-latex-options2843,114995
(defcustom org-format-latex-header "\\documentclass{article}org-format-latex-header2867,116302
(defvar org-format-latex-header-extra nil)org-format-latex-header-extra2893,117233
(defcustom org-export-latex-packages-alist nilorg-export-latex-packages-alist2898,117470
(defgroup org-font-lock nilorg-font-lock2907,117740
(defcustom org-level-color-stars-only nilorg-level-color-stars-only2912,117860
(defcustom org-hide-leading-stars nilorg-hide-leading-stars2920,118152
(defcustom org-fontify-done-headline nilorg-fontify-done-headline2936,118739
(defcustom org-fontify-emphasized-text torg-fontify-emphasized-text2944,119082
(defcustom org-fontify-whole-heading-line nilorg-fontify-whole-heading-line2950,119299
(defcustom org-highlight-latex-fragments-and-specials nilorg-highlight-latex-fragments-and-specials2957,119517
(defcustom org-hide-emphasis-markers nilorg-hide-emphasis-markers2962,119689
(defvar org-emph-re nilorg-emph-re2967,119844
(defvar org-verbatim-re nilorg-verbatim-re2969,119915
(defvar org-emphasis-regexp-components) ; defined just beloworg-emphasis-regexp-components2971,119995
(defvar org-emphasis-alist) ; defined just beloworg-emphasis-alist2972,120056
(defun org-set-emph-re (var val)org-set-emph-re2973,120105
(defcustom org-emphasis-regexp-componentsorg-emphasis-regexp-components3028,121880
(defcustom org-emphasis-alistorg-emphasis-alist3055,123223
(defvar org-protecting-blocksorg-protecting-blocks3083,124331
(defgroup org-completion nilorg-completion3090,124581
(defcustom org-completion-use-ido nilorg-completion-use-ido3095,124678
(defcustom org-completion-use-iswitchb nilorg-completion-use-iswitchb3104,125037
(defcustom org-completion-fallback-command 'hippie-expandorg-completion-fallback-command3113,125450
(defvar outline-mode-menu-heading)outline-mode-menu-heading3123,125778
(defvar outline-mode-menu-show)outline-mode-menu-show3124,125813
(defvar outline-mode-menu-hide)outline-mode-menu-hide3125,125845
(defvar zmacs-regions) ; XEmacs regionszmacs-regions3126,125877
(defvar mark-active)mark-active3129,125932
(defvar calc-embedded-close-formula)calc-embedded-close-formula3137,126314
(defvar calc-embedded-open-formula)calc-embedded-open-formula3138,126351
(defvar font-lock-unfontify-region-function)font-lock-unfontify-region-function3141,126522
(defvar iswitchb-temp-buflist)iswitchb-temp-buflist3144,126695
(defvar org-agenda-tags-todo-honor-ignore-options)org-agenda-tags-todo-honor-ignore-options3146,126803
(defvar remember-data-file)remember-data-file3165,127886
(defvar texmathp-why)texmathp-why3166,127914
(defvar w3m-current-url)w3m-current-url3170,128091
(defvar w3m-current-title)w3m-current-title3171,128116
(defvar org-latex-regexps)org-latex-regexps3173,128144
(defconst org-table-any-line-regexp "^[ \t]*\\(|\\|\\+-[-+]\\)"org-table-any-line-regexp3180,128357
(defconst org-table-line-regexp "^[ \t]*|"org-table-line-regexp3182,128467
(defconst org-table-dataline-regexp "^[ \t]*|[^-]"org-table-dataline-regexp3184,128547
(defconst org-table-hline-regexp "^[ \t]*|-"org-table-hline-regexp3186,128635
(defconst org-table1-hline-regexp "^[ \t]*\\+-[-+]"org-table1-hline-regexp3188,128718
(defconst org-table-any-border-regexp "^[ \t]*[^|+ \t]"org-table-any-border-regexp3190,128809
(defun org-at-table-p (&optional table-type)org-at-table-p3221,130317
(defsubst org-table-p () (org-at-table-p))org-table-p3230,130653
(defun org-at-table.el-p ()org-at-table.el-p3232,130697
(defun org-table-recognize-table.el ()org-table-recognize-table.el3238,130912
(defun org-at-table-hline-p ()org-at-table-hline-p3264,131681
(defvar org-table-clean-did-remove-column nil)org-table-clean-did-remove-column3272,131893
(defun org-table-map-tables (function)org-table-map-tables3274,131941
(defvar org-clock-start-time)org-clock-start-time3350,134828
(defvar org-clock-marker (make-marker)org-clock-marker3351,134858
(defvar org-clock-hd-marker (make-marker)org-clock-hd-marker3353,134938
(defvar org-clock-heading ""org-clock-heading3355,135048
(defun org-clock-is-active ()org-clock-is-active3357,135122
(defun org-clock-update-time-maybe ()org-clock-update-time-maybe3371,135579
(defun org-check-running-clock ()org-check-running-clock3413,136870
(defun org-clocktable-try-shift (dir n)org-clocktable-try-shift3423,137285
(defvar org-indent-mode nilorg-indent-mode3450,137975
(defgroup org-archive nilorg-archive3469,138431
(defcustom org-archive-location "%s_archive::"org-archive-location3474,138550
(defcustom org-archive-tag "ARCHIVE"org-archive-tag3524,140425
(defcustom org-agenda-skip-archived-trees torg-agenda-skip-archived-trees3534,140786
(defcustom org-columns-skip-archived-trees torg-columns-skip-archived-trees3543,141185
(defcustom org-cycle-open-archived-trees nilorg-cycle-open-archived-trees3549,141364
(defcustom org-sparse-tree-open-archived-trees nilorg-sparse-tree-open-archived-trees3558,141732
(defun org-cycle-hide-archived-subtrees (state)org-cycle-hide-archived-subtrees3566,142020
(defun org-force-cycle-archived ()org-force-cycle-archived3580,142688
(defun org-hide-archived-subtrees (beg end)org-hide-archived-subtrees3587,142896
(defun org-flag-subtree (flag)org-flag-subtree3596,143215
(defalias 'org-advertized-archive-subtree 'org-archive-subtree)org-advertized-archive-subtree3604,143410
(defvar org-id-track-globally)org-id-track-globally3629,144384
(defvar org-drawer-regexp nilorg-drawer-regexp3643,144765
(defvar org-todo-regexp nilorg-todo-regexp3646,144886
(defvar org-not-done-regexp nilorg-not-done-regexp3649,145005
(defvar org-not-done-heading-regexp nilorg-not-done-heading-regexp3652,145152
(defvar org-todo-line-regexp nilorg-todo-line-regexp3655,145289
(defvar org-complex-heading-regexp nilorg-complex-heading-regexp3658,145442
(defvar org-complex-heading-regexp-format nil)org-complex-heading-regexp-format3666,145709
(defvar org-todo-line-tags-regexp nilorg-todo-line-tags-regexp3668,145820
(defvar org-nl-done-regexp nilorg-nl-done-regexp3672,146031
(defvar org-looking-at-done-regexp nilorg-looking-at-done-regexp3675,146178
(defvar org-ds-keyword-length 12org-ds-keyword-length3678,146313
(defvar org-deadline-regexp nilorg-deadline-regexp3681,146458
(defvar org-deadline-time-regexp nilorg-deadline-time-regexp3684,146575
(defvar org-deadline-line-regexp nilorg-deadline-line-regexp3687,146729
(defvar org-scheduled-regexp nilorg-scheduled-regexp3690,146881
(defvar org-scheduled-time-regexp nilorg-scheduled-time-regexp3693,147001
(defvar org-closed-time-regexp nilorg-closed-time-regexp3696,147158
(defvar org-keyword-time-regexp nilorg-keyword-time-regexp3700,147307
(defvar org-keyword-time-not-clock-regexp nilorg-keyword-time-not-clock-regexp3703,147463
(defvar org-maybe-keyword-time-regexp nilorg-maybe-keyword-time-regexp3706,147639
(defvar org-planning-or-clock-line-re nilorg-planning-or-clock-line-re3709,147800
(defvar org-all-time-keywords nilorg-all-time-keywords3712,147951
(defconst org-plain-time-of-day-regexporg-plain-time-of-day-regexp3716,148066
(defconst org-plain-time-extension-regexporg-plain-time-extension-regexp3731,148600
(defconst org-stamp-time-of-day-regexporg-stamp-time-of-day-regexp3743,149050
(defconst org-startup-optionsorg-startup-options3756,149599
(defun org-set-regexps-and-options ()org-set-regexps-and-options3807,151887
(defun org-file-contents (file &optional noerror)org-file-contents4095,163259
(defun org-extract-log-state-settings (x)org-extract-log-state-settings4109,163631
(defun org-remove-keyword-keys (list)org-remove-keyword-keys4123,164237
(defun org-assign-fast-keys (alist)org-assign-fast-keys4132,164530
(defvar org-window-configuration nilorg-window-configuration4159,165343
(defvar org-selected-window nilorg-selected-window4161,165441
(defvar org-finish-function nilorg-finish-function4163,165534
(defvar entry)entry4170,165810
(defvar last-state)last-state4171,165825
(defvar date)date4172,165845
(defvar org-html-entities)org-html-entities4175,165923
(defvar org-struct-menu)org-struct-menu4176,165950
(defvar org-org-menu)org-org-menu4177,165975
(defvar org-tbl-menu)org-tbl-menu4178,165997
(defvar org-table-may-need-update torg-table-may-need-update4188,166347
(defun org-before-change-function (beg end)org-before-change-function4192,166526
(defvar org-mode-map)org-mode-map4195,166670
(defvar org-inhibit-startup nil)        ; Dynamically-scoped param.org-inhibit-startup4196,166692
(defvar org-inhibit-startup-visibility-stuff nil) ; Dynamically-scoped param.org-inhibit-startup-visibility-stuff4197,166760
(defvar org-agenda-keep-modes nil)      ; Dynamically-scoped param.org-agenda-keep-modes4198,166838
(defvar org-inhibit-logging nil)        ; Dynamically-scoped param.org-inhibit-logging4199,166906
(defvar org-inhibit-blocking nil)       ; Dynamically-scoped param.org-inhibit-blocking4200,166974
(defvar org-table-buffer-is-an nil)org-table-buffer-is-an4201,167042
(defconst org-outline-regexp "\\*+ ")org-outline-regexp4202,167078
(define-derived-mode org-mode outline-mode "Org"org-mode4205,167132
(defun org-current-time ()org-current-time4344,172752
(defvar org-mouse-map (make-sparse-keymap))org-mouse-map4356,173175
(defconst org-non-link-chars "]\t\n\r<>")org-non-link-chars4369,173657
(defvar org-link-types '("http" "https" "ftp" "mailto" "file" "news"org-link-types4370,173699
(defvar org-link-types-re nilorg-link-types-re4372,173792
(defvar org-link-re-with-space nilorg-link-re-with-space4374,173885
(defvar org-link-re-with-space2 nilorg-link-re-with-space24376,173991
(defvar org-link-re-with-space3 nilorg-link-re-with-space34378,174098
(defvar org-angle-link-re nilorg-angle-link-re4380,174209
(defvar org-plain-link-re nilorg-plain-link-re4382,174301
(defvar org-bracket-link-regexp nilorg-bracket-link-regexp4384,174373
(defvar org-bracket-link-analytic-regexp nilorg-bracket-link-analytic-regexp4386,174449
(defvar org-bracket-link-analytic-regexp++ nilorg-bracket-link-analytic-regexp++4394,174637
(defvar org-any-link-re nilorg-any-link-re4396,174763
(defun org-make-link-regexps ()org-make-link-regexps4399,174835
(defconst org-ts-regexp "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [^\r\n>]*?\\)>"org-ts-regexp4458,176644
(defconst org-ts-regexp-both "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [^\r\n>]*?\\)[]>]"org-ts-regexp-both4460,176782
(defconst org-ts-regexp0 "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]-+0-9>\r\n ]*\\)\\( \\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)"org-ts-regexp04462,176931
(defconst org-ts-regexp1 "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) +\\([^]-+0-9>\r\n ]*\\)\\( \\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)"org-ts-regexp14466,177276
(defconst org-ts-regexp2 (concat "<" org-ts-regexp1 "[^>\n]\\{0,16\\}>")org-ts-regexp24468,177495
(defconst org-ts-regexp3 (concat "[[<]" org-ts-regexp1 "[^]>\n]\\{0,16\\}[]>]")org-ts-regexp34470,177627
(defconst org-tr-regexp (concat org-ts-regexp "--?-?" org-ts-regexp)org-tr-regexp4472,177778
(defconst org-tr-regexp-bothorg-tr-regexp-both4474,177900
(defconst org-tsr-regexp (concat org-ts-regexp "\\(--?-?"org-tsr-regexp4477,178039
(defconst org-tsr-regexp-both (concat org-ts-regexp-both "\\(--?-?"org-tsr-regexp-both4480,178191
(defvar org-emph-face nil)org-emph-face4485,178414
(defun org-do-emphasis-faces (limit)org-do-emphasis-faces4487,178442
(defun org-emphasize (&optional char)org-emphasize4512,179347
(defconst org-nonsticky-propsorg-nonsticky-props4564,181426
(defsubst org-rear-nonsticky-at (pos)org-rear-nonsticky-at4567,181538
(defun org-activate-plain-links (limit)org-activate-plain-links4570,181658
(defun org-activate-code (limit)org-activate-code4588,182264
(defun org-fontify-meta-lines-and-blocks (limit)org-fontify-meta-lines-and-blocks4596,182545
(defun org-activate-angle-links (limit)org-activate-angle-links4661,185114
(defun org-activate-footnote-links (limit)org-activate-footnote-links4672,185512
(defun org-activate-bracket-links (limit)org-activate-bracket-links4689,186104
(defun org-activate-dates (limit)org-activate-dates4724,187728
(defvar org-target-link-regexp nilorg-target-link-regexp4739,188307
(defvar org-target-regexp "<<\\([^<>\n\r]+\\)>>"org-target-regexp4742,188457
(defvar org-radio-target-regexp "<<<\\([^<>\n\r]+\\)>>>"org-radio-target-regexp4744,188554
(defvar org-any-target-regexp "<<<?\\([^<>\n\r]+\\)>>>?" ; FIXME, not exact, would match <<<aaa>>  as a radio target.org-any-target-regexp4746,188660
(defun org-activate-target-links (limit)org-activate-target-links4749,188824
(defun org-update-radio-target-regexp ()org-update-radio-target-regexp4764,189392
(defun org-hide-wide-columns (limit)org-hide-wide-columns4772,189688
(defvar org-latex-and-specials-regexp nilorg-latex-and-specials-regexp4782,190008
(defvar org-match-substring-regexp)org-match-substring-regexp4784,190113
(defvar org-match-substring-with-braces-regexp)org-match-substring-with-braces-regexp4785,190149
(defconst org-export-html-special-string-regexpsorg-export-html-special-string-regexps4788,190276
(defun org-compute-latex-and-specials-regexp ()org-compute-latex-and-specials-regexp4796,190512
(defun org-do-latex-and-special-faces (limit)org-do-latex-and-special-faces4849,192463
(defun org-restart-font-lock ()org-restart-font-lock4870,193232
(defun org-all-targets (&optional radio)org-all-targets4876,193422
(defun org-make-target-link-regexp (targets)org-make-target-link-regexp4887,193810
(defun org-activate-tags (limit)org-activate-tags4903,194187
(defun org-outline-level ()org-outline-level4913,194560
(defvar org-font-lock-keywords nil)org-font-lock-keywords4927,195204
(defconst org-property-re (org-re "^[ \t]*\\(:\\([-[:alnum:]_]+\\):\\)[ \t]*\\([^ \t\r\n].*\\)")org-property-re4929,195241
(defvar org-font-lock-hook nilorg-font-lock-hook4932,195389
(defun org-font-lock-hook (limit)org-font-lock-hook4935,195478
(defun org-set-font-lock-defaults ()org-set-font-lock-defaults4938,195563
(defun org-fontify-like-in-org-mode (s &optional odd-levels)org-fontify-like-in-org-mode5033,199285
(defvar org-m nil)org-m5042,199539
(defvar org-l nil)org-l5043,199558
(defvar org-f nil)org-f5044,199577
(defun org-get-level-face (n)org-get-level-face5045,199596
(defun org-get-todo-face (kwd)org-get-todo-face5055,200017
(defun org-font-lock-add-tag-faces (limit)org-font-lock-add-tag-faces5063,200320
(defun org-font-lock-add-priority-faces (limit)org-font-lock-add-priority-faces5072,200671
(defun org-get-tag-face (kwd)org-get-tag-face5082,201033
(defun org-unfontify-region (beg end &optional maybe_loudly)org-unfontify-region5089,201272
(defvar org-cycle-global-status nil)org-cycle-global-status5112,202066
(defvar org-cycle-subtree-status nil)org-cycle-subtree-status5114,202157
(defvar org-inlinetask-min-level)org-inlinetask-min-level5119,202267
(defun org-cycle (&optional arg)org-cycle5121,202302
(defun org-cycle-internal-global ()org-cycle-internal-global5275,207750
(defun org-cycle-internal-local ()org-cycle-internal-local5306,208839
(defun org-global-cycle (&optional arg)org-global-cycle5385,211826
(defun org-set-startup-visibility ()org-set-startup-visibility5403,212439
(defun org-set-visibility-according-to-property (&optional no-cleanup)org-set-visibility-according-to-property5418,213027
(defun org-overview ()org-overview5450,213939
(defun org-content (&optional arg)org-content5465,214525
(defun org-optimize-window-after-visibility-change (state)org-optimize-window-after-visibility-change5485,215129
(defun org-remove-empty-overlays-at (pos)org-remove-empty-overlays-at5496,215616
(defun org-clean-visibility-after-subtree-move ()org-clean-visibility-after-subtree-move5506,215956
(defun org-cycle-show-empty-lines (state)org-cycle-show-empty-lines5537,216936
(defun org-show-empty-lines-in-parent ()org-show-empty-lines-in-parent5585,218716
(defun org-files-list ()org-files-list5591,218963
(defsubst org-entry-beginning-position ()org-entry-beginning-position5604,219462
(defsubst org-entry-end-position ()org-entry-end-position5608,219617
(defun org-cycle-hide-drawers (state)org-cycle-hide-drawers5612,219755
(defun org-flag-drawer (flag)org-flag-drawer5627,220311
(defun org-subtree-end-visible-p ()org-subtree-end-visible-p5639,220718
(defun org-first-headline-recenter (&optional N)org-first-headline-recenter5644,220882
(defun org-outline-overlay-data (&optional use-markers)org-outline-overlay-data5654,221274
(defun org-set-outline-overlay-data (data)org-set-outline-overlay-data5676,222050
(defmacro org-save-outline-visibility (use-markers &rest body)org-save-outline-visibility5689,222411
(defconst org-block-regexporg-block-regexp5710,223108
(defvar org-hide-block-overlays nilorg-hide-block-overlays5715,223269
(defun org-block-map (function &optional start end)org-block-map5719,223389
(defun org-hide-block-toggle-all ()org-hide-block-toggle-all5733,223893
(defun org-hide-block-all ()org-hide-block-all5737,224036
(defun org-show-block-all ()org-show-block-all5743,224197
(defun org-hide-block-toggle-maybe ()org-hide-block-toggle-maybe5748,224363
(defun org-hide-block-toggle (&optional force)org-hide-block-toggle5759,224718
(defvar org-goto-window-configuration nil)org-goto-window-configuration5805,226720
(defvar org-goto-marker nil)org-goto-marker5806,226763
(defvar org-goto-maporg-goto-map5807,226792
(defconst org-goto-helporg-goto-help5840,228339
(defvar org-goto-start-pos) ; dynamically scoped parameterorg-goto-start-pos5845,228590
(defun org-goto (&optional alternative-interface)org-goto5848,228703
(defvar org-goto-selected-point nil) ; dynamically scoped parameterorg-goto-selected-point5886,230284
(defvar org-goto-exit-command nil) ; dynamically scoped parameterorg-goto-exit-command5887,230352
(defvar org-goto-local-auto-isearch-map) ; defined beloworg-goto-local-auto-isearch-map5888,230418
(defun org-get-location (buf help)org-get-location5890,230476
(defvar org-goto-local-auto-isearch-map (make-sparse-keymap))org-goto-local-auto-isearch-map5933,232023
(define-key org-goto-local-auto-isearch-map "\C-i" 'isearch-other-control-char)org-goto-local-auto-isearch-map5935,232154
(define-key org-goto-local-auto-isearch-map "\C-m" 'isearch-other-control-char)org-goto-local-auto-isearch-map5936,232234
(defun org-goto-local-search-headings (string bound noerror)org-goto-local-search-headings5938,232315
(defun org-goto-local-auto-isearch ()org-goto-local-auto-isearch5949,232770
(defun org-goto-ret (&optional arg)org-goto-ret5958,233057
(defun org-goto-left ()org-goto-left5965,233259
(defun org-goto-right ()org-goto-right5976,233541
(defun org-goto-quit ()org-goto-quit5986,233802
(defvar org-indirect-dedicated-frame nilorg-indirect-dedicated-frame5995,234024
(defvar org-last-indirect-buffer nil)org-last-indirect-buffer5997,234126
(defun org-tree-to-indirect-buffer (&optional arg)org-tree-to-indirect-buffer5999,234165
(defun org-get-indirect-buffer (&optional buffer)org-get-indirect-buffer6060,236713
(defun org-set-frame-title (title)org-set-frame-title6070,237106
(defun org-previous-line-empty-p ()org-previous-line-empty-p6080,237407
(defun org-insert-heading (&optional force-heading)org-insert-heading6087,237565
(defun org-get-heading (&optional no-tags)org-get-heading6177,240651
(defun org-heading-components ()org-heading-components6187,240976
(defun org-get-entry ()org-get-entry6206,241769
(defun org-insert-heading-after-current ()org-insert-heading-after-current6212,241960
(defun org-insert-heading-respect-content ()org-insert-heading-respect-content6220,242188
(defun org-insert-todo-heading-respect-content (&optional force-state)org-insert-todo-heading-respect-content6225,242327
(defun org-insert-todo-heading (arg &optional force-heading)org-insert-todo-heading6230,242513
(defun org-insert-subheading (arg)org-insert-subheading6261,243625
(defun org-insert-todo-subheading (arg)org-insert-todo-subheading6270,243896
(defvar org-after-demote-entry-hook nilorg-after-demote-entry-hook6281,244235
(defvar org-after-promote-entry-hook nilorg-after-promote-entry-hook6286,244445
(defun org-promote-subtree ()org-promote-subtree6291,244658
(defun org-demote-subtree ()org-demote-subtree6299,244848
(defun org-do-promote ()org-do-promote6308,245055
(defun org-do-demote ()org-do-demote6319,245404
(defun org-fix-position-after-promote ()org-fix-position-after-promote6330,245749
(defun org-current-level ()org-current-level6341,246147
(defun org-reduced-level (l)org-reduced-level6351,246449
(defun org-get-valid-level (level &optional change)org-get-valid-level6356,246638
(defun org-promote ()org-promote6374,247499
(defun org-demote ()org-demote6389,248177
(defvar org-tab-ind-state nil)org-tab-ind-state6403,248766
(defun org-cycle-level ()org-cycle-level6405,248798
(defun org-map-tree (fun)org-map-tree6428,249520
(defun org-map-region (fun beg end)org-map-region6440,249843
(defun org-fixup-indentation (diff)org-fixup-indentation6455,250266
(defun org-convert-to-odd-levels ()org-convert-to-odd-levels6476,251048
(defun org-convert-to-oddeven-levels ()org-convert-to-oddeven-levels6493,251671
(defun org-tr-level (n)org-tr-level6516,252655
(defun org-move-subtree-up (&optional arg)org-move-subtree-up6522,252810
(defun org-move-subtree-down (&optional arg)org-move-subtree-down6527,253002
(defvar org-subtree-clip ""org-subtree-clip6602,255573
(defvar org-subtree-clip-folded nilorg-subtree-clip-folded6607,255795
(defun org-cut-subtree (&optional n)org-cut-subtree6611,255923
(defun org-copy-subtree (&optional n cut force-store-markers)org-copy-subtree6618,256178
(defun org-paste-subtree (&optional level tree for-yank)org-paste-subtree6654,257624
(defun org-kill-is-subtree-p (&optional txt)org-kill-is-subtree-p6767,261709
(defvar org-markers-to-move nilorg-markers-to-move6791,262708
(defun org-save-markers-in-region (beg end)org-save-markers-in-region6796,262899
(defun org-check-and-save-marker (marker beg end)org-check-and-save-marker6810,263544
(defun org-reinstall-markers-in-region (beg)org-reinstall-markers-in-region6818,263888
(defun org-narrow-to-subtree ()org-narrow-to-subtree6825,264119
(defun org-clone-subtree-with-time-shift (n &optional shift)org-clone-subtree-with-time-shift6834,264372
(defun org-sort (with-case)org-sort6908,267380
(defun org-sort-remove-invisible (s)org-sort-remove-invisible6917,267756
(defvar org-priority-regexp) ; defined later in the fileorg-priority-regexp6925,268015
(defvar org-after-sorting-entries-or-items-hook nilorg-after-sorting-entries-or-items-hook6927,268073
(defun org-sort-entries-or-itemsorg-sort-entries-or-items6933,268394
(defun org-do-sort (table what &optional with-case sorting-type)org-do-sort7170,277051
(defvar orgstruct-mode-map (make-sparse-keymap)orgstruct-mode-map7235,279810
(defvar org-local-vars nilorg-local-vars7238,279903
(define-minor-mode orgstruct-modeorgstruct-mode7242,280004
(defun turn-on-orgstruct ()turn-on-orgstruct7269,280901
(defun orgstruct++-mode (&optional arg)orgstruct++-mode7273,280998
(defvar orgstruct-is-++ nilorgstruct-is-++7297,281968
(defun turn-on-orgstruct++ ()turn-on-orgstruct++7302,282118
(defun orgstruct-error ()orgstruct-error7306,282221
(defun orgstruct-setup ()orgstruct-setup7311,282393
(defun orgstruct-make-binding (fun n &rest keys)orgstruct-make-binding7380,284931
(defun org-context-p (&rest contexts)org-context-p7408,285945
(defun org-get-local-variables ()org-get-local-variables7424,286526
(defun org-run-like-in-org-mode (cmd)org-run-like-in-org-mode7446,287165
(defun org-get-category (&optional pos)org-get-category7459,287634
(defun org-refresh-category-properties ()org-refresh-category-properties7463,287776
(defun org-link-expand-abbrev (link)org-link-expand-abbrev7497,288788
(defvar org-insert-link-history nilorg-insert-link-history7518,289490
(defvar org-stored-links nilorg-stored-links7521,289594
(defvar org-store-link-plist nilorg-store-link-plist7524,289678
(defvar org-link-protocols nilorg-link-protocols7527,289793
(defvar org-store-link-functions nilorg-store-link-functions7530,289890
(defun org-add-link-type (type &optional follow export)org-add-link-type7550,290848
(defvar org-agenda-buffer-name)org-agenda-buffer-name7579,292165
(defun org-store-link (arg)org-store-link7582,292213
(defun org-store-link-props (&rest plist)org-store-link-props7762,298613
(defun org-add-link-props (&rest plist)org-add-link-props7783,299463
(defun org-email-link-description (&optional fmt)org-email-link-description7791,299724
(defun org-make-org-heading-search-string (&optional string heading)org-make-org-heading-search-string7816,300806
(defun org-make-link (&rest strings)org-make-link7837,301729
(defun org-make-link-string (link &optional description)org-make-link-string7841,301819
(defconst org-link-escape-charsorg-link-escape-chars7865,302801
(defvar org-url-encoding-use-url-hexify nil)org-url-encoding-use-url-hexify7887,303368
(defconst org-link-escape-chars-browserorg-link-escape-chars-browser7889,303414
(defun org-link-escape (text &optional table)org-link-escape7894,303637
(defun org-link-unescape (text &optional table)org-link-unescape7911,304166
(defun org-xor (a b)org-xor7926,304645
(defun org-fixup-message-id-for-http (s)org-fixup-message-id-for-http7930,304705
(defun org-insert-link-global ()org-insert-link-global7941,305067
(defun org-insert-link (&optional complete-file link-location)org-insert-link7948,305305
(defun org-link-try-special-completion (type)org-link-try-special-completion8118,312340
(defun org-file-complete-link (&optional arg)org-file-complete-link8125,312627
(defun org-completing-read (&rest args)org-completing-read8146,313446
(defun org-completing-read-no-i (&rest args)org-completing-read-no-i8154,313824
(defun org-iswitchb-completing-read (prompt choices &rest args)org-iswitchb-completing-read8158,313970
(defun org-icompleting-read (&rest args)org-icompleting-read8168,314358
(defun org-extract-attributes (s)org-extract-attributes8191,315187
(defun org-extract-attributes-from-string (tag)org-extract-attributes-from-string8204,315711
(defun org-attributes-to-string (plist)org-attributes-to-string8212,316024
(defvar org-link-search-failed nil)org-link-search-failed8223,316331
(defvar org-open-link-functions nilorg-open-link-functions8225,316368
(defun org-next-link ()org-next-link8242,317188
(defun org-previous-link ()org-previous-link8262,317844
(defun org-translate-link (s)org-translate-link8282,318504
(defun org-translate-link-from-planner (type path)org-translate-link-from-planner8293,318884
(defun org-find-file-at-mouse (ev)org-find-file-at-mouse8315,319810
(defun org-open-at-mouse (ev)org-open-at-mouse8321,319958
(defvar org-window-config-before-follow-link nilorg-window-config-before-follow-link8329,320199
(defvar org-open-link-marker (make-marker)org-open-link-marker8333,320357
(defun org-open-at-point-global ()org-open-at-point-global8337,320491
(defun org-open-link-from-string (s &optional arg reference-buffer)org-open-link-from-string8345,320727
(defun org-open-at-point (&optional in-emacs reference-buffer)org-open-at-point8356,321105
(defun org-offer-links-in-entry (&optional nth zero)org-offer-links-in-entry8542,327506
(defun org-open-file-with-system (path)org-open-file-with-system8609,330063
(defun org-open-file-with-emacs (path)org-open-file-with-emacs8612,330192
(defun org-remove-file-link-modifiers ()org-remove-file-link-modifiers8615,330294
(defun org-get-effort (&optional pom)org-get-effort8627,330717
(defvar org-create-file-search-functions nilorg-create-file-search-functions8633,330867
(defvar org-execute-file-search-functions nilorg-execute-file-search-functions8655,331959
(defun org-link-search (s &optional type avoid-pos)org-link-search8677,333016
(defun org-search-not-self (group &rest args)org-search-not-self8795,337340
(defun org-get-buffer-for-internal-link (buffer)org-get-buffer-for-internal-link8814,338125
(defun org-do-occur (regexp &optional cleanup)org-do-occur8830,338775
(defvar org-mark-ring nilorg-mark-ring8851,339535
(defvar org-mark-ring-last-goto nilorg-mark-ring-last-goto8853,339616
(defun org-mark-ring-push (&optional pos buffer)org-mark-ring-push8862,339975
(defun org-mark-ring-goto (&optional n)org-mark-ring-goto8874,340430
(defun org-remove-angle-brackets (s)org-remove-angle-brackets8892,341169
(defun org-add-angle-brackets (s)org-add-angle-brackets8896,341337
(defun org-remove-double-quotes (s)org-remove-double-quotes8900,341505
(defun org-follow-timestamp-link ()org-follow-timestamp-link8907,341705
(defvar org-wait nil)org-wait8924,342240
(defun org-open-file (path &optional in-emacs line search)org-open-file8925,342262
(defun org-default-apps ()org-default-apps9018,345847
(defun org-apps-regexp-alist (list &optional add-auto-mode)org-apps-regexp-alist9027,346117
(defvar ange-ftp-name-format) ; to silence the XEmacs compiler.ange-ftp-name-format9046,346783
(defun org-file-remote-p (file)org-file-remote-p9047,346847
(defun org-get-org-file ()org-get-org-file9065,347400
(defun org-notes-order-reversed-p ()org-notes-order-reversed-p9072,347673
(defvar org-refile-target-table nilorg-refile-target-table9086,348109
(defvar org-agenda-new-buffers nilorg-agenda-new-buffers9089,348204
(defun org-get-refile-targets (&optional default-buffer)org-get-refile-targets9092,348284
(defun org-protect-slash (s)org-protect-slash9179,351671
(defvar org-olpa (make-vector 20 nil))org-olpa9184,351777
(defun org-get-outline-path (&optional fastp level heading)org-get-outline-path9186,351817
(defun org-format-outline-path (path &optional width prefix)org-format-outline-path9209,352574
(defun org-display-outline-path (&optional file current)org-display-outline-path9247,353890
(defvar org-refile-history nilorg-refile-history9264,354494
(defvar org-after-refile-insert-hook nilorg-after-refile-insert-hook9267,354564
(defun org-refile (&optional goto default-buffer rfloc)org-refile9272,354767
(defun org-refile-goto-last-stored ()org-refile-goto-last-stored9391,359002
(defun org-refile-get-location (&optional prompt default-buffer new-nodes)org-refile-get-location9397,359212
(defun org-refile-new-child (parent-target child)org-refile-new-child9451,361403
(defun org-olpath-completing-read (prompt collection &rest args)org-olpath-completing-read9477,362236
(defun org-find-dblock (name)org-find-dblock9511,363162
(defconst org-dblock-start-reorg-dblock-start-re9523,363535
(defconst org-dblock-end-re "^[ \t]*#\\+END\\([: \t\r\n]\\|$\\)"org-dblock-end-re9527,363691
(defun org-create-dblock (plist)org-create-dblock9530,363798
(defun org-prepare-dblock ()org-prepare-dblock9546,364386
(defun org-map-dblocks (&optional command)org-map-dblocks9571,365321
(defun org-dblock-update (&optional arg)org-dblock-update9587,365901
(defun org-update-dblock ()org-update-dblock9598,366239
(defun org-beginning-of-dblock ()org-beginning-of-dblock9626,367202
(defun org-update-all-dblocks ()org-update-all-dblocks9640,367638
(defconst org-additional-option-like-keywordsorg-additional-option-like-keywords9649,367836
(defcustom org-structure-template-alistorg-structure-template-alist9667,368398
(defun org-try-structure-completion ()org-try-structure-completion9708,370049
(defun org-complete-expand-structure-template (start cell)org-complete-expand-structure-template9721,370551
(defun org-complete (&optional arg)org-complete9748,371409
(defun org-toggle-comment ()org-toggle-comment9875,376054
(defvar org-last-todo-state-is-todo nilorg-last-todo-state-is-todo9889,376470
(defvar org-setting-tags nil) ; dynamically skippedorg-setting-tags9894,376664
(defun org-parse-local-options (string var)org-parse-local-options9896,376717
(defvar org-todo-setup-filter-hook nilorg-todo-setup-filter-hook9917,377348
(defvar org-todo-get-default-hook nilorg-todo-get-default-hook9923,377544
(defvar org-agenda-headline-snapshot-before-repeat)org-agenda-headline-snapshot-before-repeat9929,377760
(defun org-todo (&optional arg)org-todo9931,377813
(defun org-block-todo-from-children-or-siblings-or-parent (change-plist)org-block-todo-from-children-or-siblings-or-parent10143,386271
(defcustom org-track-ordered-property-with-tag nilorg-track-ordered-property-with-tag10206,388939
(defun org-toggle-ordered-property ()org-toggle-ordered-property10225,389782
(defvar org-blocked-by-checkboxes) ; dynamically scopedorg-blocked-by-checkboxes10243,390484
(defun org-block-todo-from-checkboxes (change-plist)org-block-todo-from-checkboxes10244,390540
(defun org-entry-blocked-p ()org-entry-blocked-p10273,391674
(defun org-update-statistics-cookies (all)org-update-statistics-cookies10285,391983
(defvar org-entry-property-inherited-from) ;; defined beloworg-entry-property-inherited-from10324,393333
(defun org-update-parent-todo-statistics ()org-update-parent-todo-statistics10325,393393
(defvar org-after-todo-statistics-hook nilorg-after-todo-statistics-hook10394,395910
(defvar org-todo-statistics-hook nilorg-todo-statistics-hook10410,396643
(defun org-todo-trigger-tag-changes (state)org-todo-trigger-tag-changes10415,396882
(defun org-local-logging (value)org-local-logging10430,397551
(defun org-get-todo-sequence-head (kwd)org-get-todo-sequence-head10447,398148
(defun org-fast-todo-selection ()org-fast-todo-selection10463,398718
(defun org-entry-is-todo-p ()org-entry-is-todo-p10530,400766
(defun org-entry-is-done-p ()org-entry-is-done-p10533,400852
(defun org-get-todo-state ()org-get-todo-state10536,400934
(defun org-at-date-range-p (&optional inactive-ok)org-at-date-range-p10543,401091
(defun org-get-repeat (&optional tagline)org-get-repeat10561,401638
(defvar org-last-changed-timestamp)org-last-changed-timestamp10572,402003
(defvar org-last-inserted-timestamp)org-last-inserted-timestamp10573,402039
(defvar org-log-post-message)org-log-post-message10574,402076
(defvar org-log-note-purpose)org-log-note-purpose10575,402106
(defvar org-log-note-how)org-log-note-how10576,402136
(defvar org-log-note-extra)org-log-note-extra10577,402162
(defun org-auto-repeat-maybe (done-word)org-auto-repeat-maybe10578,402190
(defun org-show-todo-tree (arg)org-show-todo-tree10653,405539
(defun org-deadline (&optional remove time)org-deadline10677,406544
(defun org-schedule (&optional remove time)org-schedule10701,407593
(defun org-get-scheduled-time (pom &optional inherit)org-get-scheduled-time10725,408645
(defun org-get-deadline-time (pom &optional inherit)org-get-deadline-time10733,408969
(defun org-remove-timestamp-with-keyword (keyword)org-remove-timestamp-with-keyword10741,409284
(defun org-add-planning-info (what &optional time &rest remove)org-add-planning-info10759,409953
(defvar org-log-note-marker (make-marker))org-log-note-marker10857,413684
(defvar org-log-note-purpose nil)org-log-note-purpose10858,413727
(defvar org-log-note-state nil)org-log-note-state10859,413761
(defvar org-log-note-previous-state nil)org-log-note-previous-state10860,413793
(defvar org-log-note-how nil)org-log-note-how10861,413834
(defvar org-log-note-extra nil)org-log-note-extra10862,413864
(defvar org-log-note-window-configuration nil)org-log-note-window-configuration10863,413896
(defvar org-log-note-return-to (make-marker))org-log-note-return-to10864,413943
(defvar org-log-post-message nilorg-log-post-message10865,413989
(defun org-add-note ()org-add-note10869,414115
(defvar org-property-end-re)org-property-end-re10875,414302
(defun org-add-log-setup (&optional purpose state prev-stateorg-add-log-setup10876,414331
(defun org-skip-over-state-notes ()org-skip-over-state-notes10935,416591
(defun org-add-log-note (&optional purpose)org-add-log-note10943,416848
(defvar org-note-abort nil) ; dynamically scopedorg-note-abort10979,418403
(defun org-store-log-note ()org-store-log-note10980,418452
(defun org-remove-empty-drawer-at (drawer pos)org-remove-empty-drawer-at11037,420550
(defun org-sparse-tree (&optional arg)org-sparse-tree11049,420941
(defvar org-occur-highlights nilorg-occur-highlights11089,422679
(defvar org-occur-parameters nilorg-occur-parameters11092,422809
(defun org-occur (regexp &optional keep-previous callback)org-occur11104,423415
(defun org-show-context (&optional key)org-show-context11144,425081
(defun org-reveal (&optional siblings)org-reveal11176,426374
(defun org-highlight-new-match (beg end)org-highlight-new-match11191,427033
(defun org-remove-occur-highlights (&optional beg end noremove)org-remove-occur-highlights11197,427280
(defvar org-priority-regexp ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)"org-priority-regexp11212,427826
(defvar org-remove-priority-next-time nil)org-remove-priority-next-time11215,427947
(defun org-priority-up ()org-priority-up11217,427991
(defun org-priority-down ()org-priority-down11222,428103
(defun org-priority (&optional action)org-priority11227,428219
(defun org-get-priority (s)org-get-priority11292,430647
(defvar org-agenda-archives-mode)org-agenda-archives-mode11302,430939
(defvar org-map-continue-from nilorg-map-continue-from11303,430973
(defvar org-scanner-tags nilorg-scanner-tags11307,431134
(defvar org-trust-scanner-tags nilorg-trust-scanner-tags11309,431224
(defun org-scan-tags (action matcher &optional todo-only)org-scan-tags11320,431804
(defun org-remove-uniherited-tags (tags)org-remove-uniherited-tags11455,436889
(defvar todo-only) ;; dynamically scopedtodo-only11476,437555
(defun org-match-sparse-tree (&optional todo-only match)org-match-sparse-tree11478,437597
(defalias 'org-tags-sparse-tree 'org-match-sparse-tree)org-tags-sparse-tree11488,438043
(defvar org-cached-props nil)org-cached-props11490,438100
(defun org-cached-entry-get (pom property)org-cached-entry-get11491,438130
(defun org-global-tags-completion-table (&optional files)org-global-tags-completion-table11504,438715
(defun org-make-tags-matcher (match)org-make-tags-matcher11521,439218
(defun org-op-to-function (op &optional stringp)org-op-to-function11642,443781
(defun org<> (a b) (not (= a b)))org<>11654,444327
(defun org-string<= (a b) (or (string= a b) (string< a b)))org-string<=11655,444361
(defun org-string>= (a b) (not (string< a b)))org-string>=11656,444421
(defun org-string>  (a b) (and (not (string= a b)) (not (string< a b))))org-string>11657,444468
(defun org-string<> (a b) (not (string= a b)))org-string<>11658,444541
(defun org-time=  (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (=     a b)))org-time=11659,444588
(defun org-time<  (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (<     a b)))org-time<11660,444682
(defun org-time<= (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (<=    a b)))org-time<=11661,444776
(defun org-time>  (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (>     a b)))org-time>11662,444870
(defun org-time>= (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (>=    a b)))org-time>=11663,444964
(defun org-time<> (a b) (setq a (org-2ft a) b (org-2ft b)) (and (> a 0) (> b 0) (org<> a b)))org-time<>11664,445058
(defun org-2ft (s)org-2ft11665,445152
(defun org-time-today ()org-time-today11677,445518
(defun org-matcher-time (s)org-matcher-time11684,445770
(defun org-match-any-p (re list)org-match-any-p11700,446354
(defvar org-add-colon-after-tag-completion nil)  ;; dynamically scoped paramorg-add-colon-after-tag-completion11705,446507
(defvar org-tags-overlay (org-make-overlay 1 1))org-tags-overlay11706,446584
(defun org-get-local-tags-at (&optional pos)org-get-local-tags-at11709,446672
(defun org-get-local-tags ()org-get-local-tags11713,446806
(defun org-get-tags-at (&optional pos local)org-get-tags-at11717,446924
(defun org-add-prop-inherited (s)org-add-prop-inherited11759,448315
(defun org-toggle-tag (tag &optional onoff)org-toggle-tag11763,448409
(defun org-align-tags-here (to-col)org-align-tags-here11795,449433
(defun org-set-tags-command (&optional arg just-align)org-set-tags-command11818,450232
(defun org-set-tags-to (data)org-set-tags-to11827,450511
(defun org-set-tags (&optional arg just-align)org-set-tags11859,451504
(defun org-change-tag-in-region (beg end tag off)org-change-tag-in-region11940,454503
(defun org-tags-completion-function (string predicate &optional flag)org-tags-completion-function11979,455908
(defun org-fast-tag-insert (kwd tags face &optional end)org-fast-tag-insert12006,456721
(defun org-fast-tag-show-exit (flag)org-fast-tag-show-exit12012,456980
(defun org-set-current-tags-overlay (current prefix)org-set-current-tags-overlay12022,457316
(defvar org-last-tag-selection-key nil)org-last-tag-selection-key12030,457692
(defun org-fast-tag-selection (current inherited table &optional todo-table)org-fast-tag-selection12031,457732
(defun org-get-tags-string ()org-get-tags-string12224,464372
(defun org-get-tags ()org-get-tags12234,464677
(defun org-get-buffer-tags ()org-get-buffer-tags12238,464809
(defun org-map-entries (func &optional match scope &rest skip)org-map-entries12254,465342
(defconst org-special-propertiesorg-special-properties12367,469872
(defconst org-default-propertiesorg-default-properties12375,470164
(defconst org-property-start-re "^[ \t]*:PROPERTIES:[ \t]*$"org-property-start-re12385,470653
(defconst org-property-end-re "^[ \t]*:END:[ \t]*$"org-property-end-re12388,470785
(defconst org-clock-drawer-start-re "^[ \t]*:CLOCK:[ \t]*$"org-clock-drawer-start-re12391,470908
(defconst org-clock-drawer-end-re "^[ \t]*:END:[ \t]*$"org-clock-drawer-end-re12394,471039
(defconst org-property-drawer-reorg-property-drawer-re12397,471166
(defconst org-clock-drawer-reorg-clock-drawer-re12402,471328
(defun org-property-action ()org-property-action12407,471488
(defun org-set-effort (&optional value)org-set-effort12425,472066
(defun org-at-property-p ()org-at-property-p12465,473442
(defun org-get-property-block (&optional beg end force)org-get-property-block12474,473805
(defun org-entry-properties (&optional pom which specific)org-entry-properties12503,474838
(defun org-entry-get (pom property &optional inherit)org-entry-get12594,478813
(defun org-property-or-variable-value (var &optional inherit)org-property-or-variable-value12622,480039
(defun org-entry-delete (pom property)org-entry-delete12630,480402
(defun org-entry-add-to-multivalued-property (pom property value)org-entry-add-to-multivalued-property12648,481060
(defun org-entry-remove-from-multivalued-property (pom property value)org-entry-remove-from-multivalued-property12658,481501
(defun org-entry-member-in-multivalued-property (pom property value)org-entry-member-in-multivalued-property12668,481948
(defun org-entry-get-multivalued-property (pom property)org-entry-get-multivalued-property12675,482271
(defun org-entry-put-multivalued-property (pom property &rest values)org-entry-put-multivalued-property12681,482534
(defun org-entry-protect-space (s)org-entry-protect-space12690,482963
(defun org-entry-restore-space (s)org-entry-restore-space12698,483193
(defvar org-entry-property-inherited-from (make-marker)org-entry-property-inherited-from12706,483423
(defun org-entry-get-with-inheritance (property)org-entry-get-with-inheritance12714,483820
(defvar org-property-changed-functions nilorg-property-changed-functions12733,484465
(defun org-entry-put (pom property value)org-entry-put12738,484660
(defun org-buffer-property-keys (&optional include-specials include-defaults include-columns)org-buffer-property-keys12793,486814
(defun org-property-values (key)org-property-values12841,488513
(defun org-insert-property-drawer ()org-insert-property-drawer12853,488871
(defun org-set-property (property value)org-set-property12893,490150
(defun org-delete-property (property)org-delete-property12927,491562
(defun org-delete-property-globally (property)org-delete-property-globally12939,491937
(defvar org-columns-current-fmt-compiled) ; defined in org-colview.elorg-columns-current-fmt-compiled12959,492527
(defun org-compute-property-at-point ()org-compute-property-at-point12961,492598
(defvar org-property-allowed-value-functions nilorg-property-allowed-value-functions12974,493135
(defun org-property-get-allowed-values (pom property &optional table)org-property-get-allowed-values12983,493597
(defun org-property-previous-allowed-value (&optional previous)org-property-previous-allowed-value13015,494786
(defun org-property-next-allowed-value (&optional previous)org-property-next-allowed-value13020,494962
(defun org-find-entry-with-id (ident)org-find-entry-with-id13046,495935
(defvar org-last-changed-timestamp nil)org-last-changed-timestamp13070,496746
(defvar org-last-inserted-timestamp nilorg-last-inserted-timestamp13071,496786
(defvar org-time-was-given) ; dynamically scoped parameterorg-time-was-given13073,496890
(defvar org-end-time-was-given) ; dynamically scoped parameterorg-end-time-was-given13074,496949
(defvar org-ts-what) ; dynamically scoped parameterorg-ts-what13075,497012
(defun org-time-stamp (arg &optional inactive)org-time-stamp13077,497065
(defun org-get-compact-tod (s)org-get-compact-tod13127,499372
(defun org-time-stamp-inactive (&optional arg)org-time-stamp-inactive13143,500020
(defvar org-date-ovl (org-make-overlay 1 1))org-date-ovl13152,500437
(defvar org-ans1) ; dynamically scoped parameterorg-ans113156,500567
(defvar org-ans2) ; dynamically scoped parameterorg-ans213157,500616
(defvar org-plain-time-of-day-regexp) ; defined beloworg-plain-time-of-day-regexp13159,500666
(defvar org-overriding-default-time nil) ; dynamically scopedorg-overriding-default-time13161,500721
(defvar org-read-date-overlay nil)org-read-date-overlay13162,500783
(defvar org-dcst nil) ; dynamically scopedorg-dcst13163,500818
(defvar org-read-date-history nil)org-read-date-history13164,500861
(defvar org-read-date-final-answer nil)org-read-date-final-answer13165,500896
(defun org-read-date (&optional with-time to-time from-string promptorg-read-date13167,500937
(defvar def)def13337,508316
(defvar defdecode)defdecode13338,508329
(defvar with-time)with-time13339,508348
(defvar org-read-date-analyze-futurep nil)org-read-date-analyze-futurep13340,508367
(defun org-read-date-display ()org-read-date-display13341,508410
(defun org-read-date-analyze (ans def defdecode)org-read-date-analyze13376,509743
(defvar parse-time-weekdays)parse-time-weekdays13528,516208
(defun org-read-date-get-relative (s today default)org-read-date-get-relative13530,516238
(defun org-order-calendar-date-args (arg1 arg2 arg3)org-order-calendar-date-args13564,517663
(defun org-eval-in-calendar (form &optional keepdate)org-eval-in-calendar13581,518344
(defun org-calendar-select ()org-calendar-select13596,519020
(defun org-insert-time-stamp (time &optional with-hm inactive pre post extra)org-insert-time-stamp13606,519475
(defun org-toggle-time-stamp-overlays ()org-toggle-time-stamp-overlays13634,520673
(defun org-display-custom-time (beg end)org-display-custom-time13655,521528
(defun org-translate-time (string)org-translate-time13682,522602
(defun org-fix-decoded-time (time)org-fix-decoded-time13709,523548
(defun org-days-to-time (timestamp-string)org-days-to-time13715,523751
(defun org-deadline-close (timestamp-string &optional ndays)org-deadline-close13720,523952
(defun org-get-wdays (ts)org-get-wdays13726,524226
(defun org-calendar-select-mouse (ev)org-calendar-select-mouse13741,524773
(defun org-check-deadlines (ndays)org-check-deadlines13752,525263
(defun org-check-before-date (date)org-check-before-date13773,526119
(defun org-check-after-date (date)org-check-after-date13787,526606
(defun org-evaluate-time-range (&optional to-buffer)org-evaluate-time-range13802,527105
(defun org-make-tdiff-string (y d h m)org-make-tdiff-string13866,529399
(defun org-time-string-to-time (s)org-time-string-to-time13879,529891
(defun org-time-string-to-seconds (s)org-time-string-to-seconds13881,529976
(defun org-time-string-to-absolute (s &optional daynr prefer show-all)org-time-string-to-absolute13884,530063
(defun org-days-to-iso-week (days)org-days-to-iso-week13901,530813
(defun org-small-year-to-year (year)org-small-year-to-year13906,530945
(defun org-time-from-absolute (d)org-time-from-absolute13917,531288
(defun org-calendar-holiday ()org-calendar-holiday13923,531559
(defun org-diary-sexp-entry (sexp entry date)org-diary-sexp-entry13931,531838
(defun org-diary-to-ical-string (frombuf)org-diary-to-ical-string13951,532556
(defun org-closest-date (start current change prefer show-all)org-closest-date13975,533401
(defun org-date-to-gregorian (date)org-date-to-gregorian14044,536176
(defun org-parse-time-string (s &optional nodefault)org-parse-time-string14054,536576
(defun org-timestamp-up (&optional arg)org-timestamp-up14071,537321
(defun org-timestamp-down (&optional arg)org-timestamp-down14079,537623
(defun org-timestamp-up-day (&optional arg)org-timestamp-up-day14087,537931
(defun org-timestamp-down-day (&optional arg)org-timestamp-down-day14096,538234
(defun org-at-timestamp-p (&optional inactive-ok)org-at-timestamp-p14105,538545
(defun org-toggle-timestamp-type ()org-toggle-timestamp-type14134,539588
(defun org-timestamp-change (n &optional what)org-timestamp-change14148,540107
(defun org-modify-ts-extra (s pos n dm)org-modify-ts-extra14221,543119
(defun org-recenter-calendar (date)org-recenter-calendar14258,544650
(defun org-goto-calendar (&optional arg)org-goto-calendar14269,545013
(defun org-get-date-from-calendar ()org-get-date-from-calendar14292,545832
(defun org-date-from-calendar ()org-date-from-calendar14298,546027
(defun org-minutes-to-hh:mm-string (m)org-minutes-to-hh:mm-string14308,546448
(defun org-hh:mm-string-to-minutes (s)org-hh:mm-string-to-minutes14314,546625
(defun org-save-all-org-buffers ()org-save-all-org-buffers14330,547180
(defun org-revert-all-org-buffers ()org-revert-all-org-buffers14338,547473
(defun org-iswitchb (&optional arg)org-iswitchb14369,548497
(defalias 'org-ido-switchb 'org-iswitchb)org-ido-switchb14383,549138
(defun org-buffer-list (&optional predicate exclude-tmp)org-buffer-list14385,549181
(defun org-agenda-files (&optional unrestricted archives)org-agenda-files14423,550412
(defun org-edit-agenda-file-list ()org-edit-agenda-file-list14454,551541
(defun org-store-new-agenda-file-list (list)org-store-new-agenda-file-list14477,552466
(defun org-read-agenda-file-list ()org-read-agenda-file-list14489,552980
(defun org-cycle-agenda-files ()org-cycle-agenda-files14500,553364
(defun org-agenda-file-to-front (&optional to-end)org-agenda-file-to-front14519,554062
(defun org-remove-file (&optional file)org-remove-file14542,555018
(defun org-file-menu-entry (file)org-file-menu-entry14564,555839
(defun org-check-agenda-file (file)org-check-agenda-file14567,555916
(defun org-get-agenda-file-buffer (file)org-get-agenda-file-buffer14579,556313
(defun org-release-buffers (blist)org-release-buffers14590,556718
(defun org-prepare-agenda-buffers (files)org-prepare-agenda-buffers14603,557205
(defvar org-cdlatex-mode-map (make-sparse-keymap)org-cdlatex-mode-map14653,559059
(defvar org-cdlatex-texmathp-advice-is-done nilorg-cdlatex-texmathp-advice-is-done14662,559478
(define-minor-mode org-cdlatex-modeorg-cdlatex-mode14665,559600
(defun turn-on-org-cdlatex ()turn-on-org-cdlatex14694,560724
(defun org-inside-LaTeX-fragment-p ()org-inside-LaTeX-fragment-p14698,560827
(defun org-inside-latex-macro-p ()org-inside-latex-macro-p14742,562792
(defun org-try-cdlatex-tab ()org-try-cdlatex-tab14748,562986
(defun org-cdlatex-underscore-caret (&optional arg)org-cdlatex-underscore-caret14765,563533
(defun org-cdlatex-math-modify (&optional arg)org-cdlatex-math-modify14774,563910
(defvar org-latex-fragment-image-overlays nilorg-latex-fragment-image-overlays14783,564274
(defun org-remove-latex-fragment-image-overlays ()org-remove-latex-fragment-image-overlays14787,564447
(defun org-preview-latex-fragment (&optional subtree)org-preview-latex-fragment14792,564680
(defvar org-latex-regexpsorg-latex-regexps14833,566314
(defun org-format-latex (prefix &optional dir overlays msg at forbuffer)org-format-latex14844,567047
(defun org-create-formula-image (string tofile options buffer)org-create-formula-image14927,570223
(defun org-dvipng-color (attr)org-dvipng-color14990,572489
(defun org-normalize-color (value)org-normalize-color14996,572690
(define-key org-mode-map [backtab] 'org-shifttab)org-mode-map15016,573486
(define-key org-mode-map "\C-c\C-x\C-c" 'org-columns)org-mode-map15181,582782
(define-key org-mode-map "\C-c\C-x!" 'org-reload)org-mode-map15183,582837
(define-key org-mode-map "\C-c\C-xg" 'org-feed-update-all)org-mode-map15185,582888
(define-key org-mode-map "\C-c\C-xG" 'org-feed-goto-inbox)org-mode-map15186,582947
(define-key org-mode-map "\C-c\C-x[" 'org-reftex-citation)org-mode-map15188,583007
(defconst org-speed-commands-defaultorg-speed-commands-default15195,583152
(defun org-print-speed-command (e)org-print-speed-command15242,584620
(defun org-speed-command-help ()org-speed-command-help15257,584938
(defun org-speed-move-safe (cmd)org-speed-move-safe15271,585545
(defvar org-self-insert-command-undo-counter 0)org-self-insert-command-undo-counter15281,585909
(defvar org-table-auto-blank-field) ; defined in org-table.elorg-table-auto-blank-field15283,585958
(defvar org-speed-command nil)org-speed-command15284,586020
(defun org-self-insert-command (N)org-self-insert-command15285,586051
(defun org-fix-tags-on-the-fly ()org-fix-tags-on-the-fly15345,588455
(defun org-delete-backward-char (N)org-delete-backward-char15350,588612
(defun org-delete-char (N)org-delete-char15374,589573
(defun org-remap (map &rest commands)org-remap15420,591406
(defvar org-ctrl-c-ctrl-c-hook nilorg-ctrl-c-ctrl-c-hook15439,592159
(defvar org-tab-first-hook nilorg-tab-first-hook15448,592607
(defvar org-tab-after-check-for-table-hook nilorg-tab-after-check-for-table-hook15457,593033
(defvar org-tab-after-check-for-cycling-hook nilorg-tab-after-check-for-cycling-hook15466,593449
(defvar org-tab-before-tab-emulation-hook nilorg-tab-before-tab-emulation-hook15473,593811
(defvar org-metaleft-hook nilorg-metaleft-hook15479,594085
(defvar org-metaright-hook nilorg-metaright-hook15482,594224
(defvar org-metaup-hook nilorg-metaup-hook15485,594365
(defvar org-metadown-hook nilorg-metadown-hook15488,594500
(defvar org-shiftmetaleft-hook nilorg-shiftmetaleft-hook15491,594639
(defvar org-shiftmetaright-hook nilorg-shiftmetaright-hook15494,594785
(defvar org-shiftmetaup-hook nilorg-shiftmetaup-hook15497,594933
(defvar org-shiftmetadown-hook nilorg-shiftmetadown-hook15500,595075
(defvar org-metareturn-hook nilorg-metareturn-hook15503,595221
(defun org-modifier-cursor-error ()org-modifier-cursor-error15507,595362
(defun org-shiftselect-error ()org-shiftselect-error15511,595562
(defun org-call-for-shift-select (cmd)org-call-for-shift-select15517,595910
(defun org-shifttab (&optional arg)org-shifttab15521,596029
(defun org-shiftmetaleft ()org-shiftmetaleft15536,596638
(defun org-shiftmetaright ()org-shiftmetaright15549,597181
(defun org-shiftmetaup (&optional arg)org-shiftmetaup15562,597721
(defun org-shiftmetadown (&optional arg)org-shiftmetadown15575,598263
(defun org-metaleft (&optional arg)org-metaleft15588,598826
(defun org-metaright (&optional arg)org-metaright15611,599678
(defun org-metaup (&optional arg)org-metaup15634,600522
(defun org-metadown (&optional arg)org-metadown15647,601076
(defun org-shiftup (&optional arg)org-shiftup15660,601664
(defun org-shiftdown (&optional arg)org-shiftdown15682,602590
(defun org-shiftright (&optional arg)org-shiftright15704,603509
(defun org-shiftleft (&optional arg)org-shiftleft15738,604975
(defun org-shiftcontrolright ()org-shiftcontrolright15772,606460
(defun org-shiftcontrolleft ()org-shiftcontrolleft15785,606878
(defun org-ctrl-c-ret ()org-ctrl-c-ret15798,607305
(defun org-copy-special ()org-copy-special15805,607551
(defun org-cut-special ()org-cut-special15813,607853
(defun org-paste-special (arg)org-paste-special15821,608149
(defun org-edit-special ()org-edit-special15830,608494
(defun org-ctrl-c-ctrl-c (&optional arg)org-ctrl-c-ctrl-c15849,609219
(defun org-mode-restart ()org-mode-restart15957,613443
(defun org-kill-note-or-show-branches ()org-kill-note-or-show-branches15964,613635
(defun org-return (&optional indent)org-return15972,613918
(defun org-return-indent ()org-return-indent15993,614635
(defun org-ctrl-c-star ()org-ctrl-c-star16000,614879
(defun org-ctrl-c-minus ()org-ctrl-c-minus16012,615234
(defun org-toggle-item ()org-toggle-item16028,615777
(defun org-toggle-heading (&optional nstars)org-toggle-heading16070,617251
(defun org-meta-return (&optional arg)org-meta-return16126,619164
(defun org-info (&optional node)org-info16402,630989
(defun org-submit-bug-report ()org-submit-bug-report16409,631198
(defun org-install-agenda-files-menu ()org-install-agenda-files-menu16468,633594
(defun org-require-autoloaded-modules ()org-require-autoloaded-modules16490,634263
(defun org-reload (&optional uncompiled)org-reload16500,634567
(defun org-customize ()org-customize16533,635679
(defun org-create-customize-menu ()org-create-customize-menu16540,635863
(defun org-get-at-bol (property)org-get-at-bol16564,636628
(defun org-find-text-property-in-string (prop s)org-find-text-property-in-string16568,636762
(defun org-display-warning (message) ;; Copied from Emacs-Museorg-display-warning16574,636997
(defun org-in-commented-line ()org-in-commented-line16590,637545
(defun org-in-verbatim-emphasis ()org-in-verbatim-emphasis16594,637662
(defun org-goto-marker-or-bmk (marker &optional bookmark)org-goto-marker-or-bmk16598,637796
(defun org-quote-csv-field (s)org-quote-csv-field16612,638278
(defun org-plist-delete (plist property)org-plist-delete16618,638472
(defun org-force-self-insert (N)org-force-self-insert16628,638757
(defun org-string-width (s)org-string-width16633,638889
(defun org-get-indentation (&optional line)org-get-indentation16655,639853
(defun org-remove-tabs (s &optional width)org-remove-tabs16666,640229
(defun org-fix-indentation (line ind)org-fix-indentation16678,640591
(defun org-remove-indentation (code &optional n)org-remove-indentation16691,641052
(defun org-do-remove-indentation (&optional n)org-do-remove-indentation16699,641314
(defun org-fill-template (template alist)org-fill-template16716,641860
(defun org-base-buffer (buffer)org-base-buffer16729,642298
(defun org-trim (s)org-trim16736,642488
(defun org-wrap (string &optional width lines)org-wrap16742,642716
(defun org-do-wrap (words width)org-do-wrap16767,643669
(defun org-split-string (string &optional separators)org-split-string16777,644027
(defun org-quote-vert (s)org-quote-vert16805,644902
(defun org-uuidgen-p (s)org-uuidgen-p16811,645044
(defun org-context ()org-context16815,645225
(defun org-in-regexp (re &optional nlines visually)org-in-regexp16914,649052
(defun org-at-regexp-p (regexp)org-at-regexp-p16931,649770
(defun org-occur-in-agenda-files (regexp &optional nlines)org-occur-in-agenda-files16943,650113
(defun org-occur-link-in-agenda-files ()org-occur-link-in-agenda-files16988,651558
(defun org-uniquify (list)org-uniquify16998,651917
(defun org-delete-all (elts list)org-delete-all17004,652067
(defun org-back-over-empty-lines ()org-back-over-empty-lines17010,652209
(defun org-skip-whitespace ()org-skip-whitespace17019,652517
(defun org-point-in-group (point group &optional context)org-point-in-group17022,652582
(defun org-switch-to-buffer-other-window (&rest args)org-switch-to-buffer-other-window17034,653037
(defun org-combine-plists (&rest plists)org-combine-plists17041,653356
(defun org-move-line-down (arg)org-move-line-down17055,653843
(defun org-move-line-up (arg)org-move-line-up17068,654295
(defun org-replace-escapes (string table)org-replace-escapes17081,654741
(defun org-sublist (list start end)org-sublist17098,655460
(defun org-find-base-buffer-visiting (file)org-find-base-buffer-visiting17108,655737
(defun org-image-file-name-regexp (&optional extensions)org-image-file-name-regexp17117,656010
(defun org-file-image-p (file &optional extensions)org-file-image-p17133,656553
(defun org-get-cursor-date ()org-get-cursor-date17138,656731
(defvar org-agenda-action-marker (make-marker)org-agenda-action-marker17155,657347
(defun org-mark-entry-for-agenda-action ()org-mark-entry-for-agenda-action17158,657457
(defun org-indent-line-function ()org-indent-line-function17172,657990
(defun org-set-autofill-regexps ()org-set-autofill-regexps17249,660822
(defun org-fill-paragraph (&optional justify)org-fill-paragraph17295,662590
(defun org-adaptive-fill-function ()org-adaptive-fill-function17310,663220
(defun org-toggle-fixed-width-section (arg)org-toggle-fixed-width-section17331,663882
(defun org-reftex-citation ()org-reftex-citation17376,665407
(defun org-beginning-of-line (&optional arg)org-beginning-of-line17408,666483
(defun org-end-of-line (&optional arg)org-end-of-line17459,668216
(define-key org-mode-map "\C-a" 'org-beginning-of-line)org-mode-map17492,669459
(define-key org-mode-map "\C-e" 'org-end-of-line)org-mode-map17493,669515
(define-key org-mode-map [home] 'org-beginning-of-line)org-mode-map17494,669565
(define-key org-mode-map [end]  'org-end-of-line)org-mode-map17495,669621
(defun org-backward-sentence (&optional arg)org-backward-sentence17497,669672
(defun org-forward-sentence (&optional arg)org-forward-sentence17506,670022
(define-key org-mode-map "\M-a" 'org-backward-sentence)org-mode-map17515,670345
(define-key org-mode-map "\M-e" 'org-forward-sentence)org-mode-map17516,670401
(defun org-kill-line (&optional arg)org-kill-line17518,670457
(define-key org-mode-map "\C-k" 'org-kill-line)org-mode-map17531,670863
(defun org-yank (&optional arg)org-yank17533,670912
(defun org-yank-generic (command arg)org-yank-generic17560,672124
(defun org-yank-folding-would-swallow-text (beg end)org-yank-folding-would-swallow-text17617,673847
(define-key org-mode-map "\C-y" 'org-yank)org-mode-map17633,674394
(defun org-invisible-p ()org-invisible-p17635,674438
(defun org-invisible-p2 ()org-invisible-p217642,674701
(defun org-back-to-heading (&optional invisible-ok)org-back-to-heading17651,675038
(defun org-before-first-heading-p ()org-before-first-heading-p17658,675333
(defun org-on-heading-p (&optional ignored)org-on-heading-p17663,675464
(defun org-at-heading-p (&optional ignored)org-at-heading-p17665,675536
(defun org-at-heading-or-item-p ()org-at-heading-or-item-p17668,675609
(defun org-on-target-p ()org-on-target-p17671,675688
(defun org-up-heading-all (arg)org-up-heading-all17675,675803
(defun org-up-heading-safe ()org-up-heading-safe17683,676189
(defun org-first-sibling-p ()org-first-sibling-p17700,676908
(defun org-goto-sibling (&optional previous)org-goto-sibling17714,677288
(defun org-show-siblings ()org-show-siblings17734,678042
(defun org-show-hidden-entry ()org-show-hidden-entry17742,678281
(defun org-flag-heading (flag &optional entry)org-flag-heading17747,678407
(defun org-get-next-sibling ()org-get-next-sibling17763,678913
(defun org-get-last-sibling ()org-get-last-sibling17775,679352
(defun org-end-of-subtree (&optional invisible-OK to-heading)org-end-of-subtree17789,679812
(defadvice outline-end-of-subtree (around prefer-org-version activate compile)outline-end-of-subtree17823,681267
(defun org-forward-same-level (arg &optional invisible-ok)org-forward-same-level17831,681527
(defun org-backward-same-level (arg &optional invisible-ok)org-backward-same-level17851,682219
(defun org-show-subtree ()org-show-subtree17869,682828
(defun org-show-entry ()org-show-entry17877,683006
(defun org-make-options-regexp (kwds &optional extra)org-make-options-regexp17896,683503
(defun org-isearch-end ()org-isearch-end17907,683796
(defun org-isearch-post-command ()org-isearch-post-command17923,684486
(defvar org-imenu-markers nilorg-imenu-markers17933,684738
(defun org-imenu-new-marker (&optional pos)org-imenu-new-marker17937,684859
(defun org-imenu-get-tree ()org-imenu-get-tree17944,685074
(defun org-link-display-format (link)org-link-display-format17979,686197
(defvar org-speedbar-restriction-lock-overlay (org-make-overlay 1 1)org-speedbar-restriction-lock-overlay17993,686606
(defun org-speedbar-set-agenda-restriction ()org-speedbar-set-agenda-restriction18001,687007
(defun org-mode-flyspell-verify ()org-mode-flyspell-verify18049,689021
(defun org-remove-flyspell-overlays-in (beg end)org-remove-flyspell-overlays-in18054,689221
(defun org-bookmark-jump-unhide ()org-bookmark-jump-unhide18084,690439
(defun org-closed-in-range ()org-closed-in-range18098,690878

vendor/org-6.34c/Makefile,1709
EMACS=emacsEMACS14,482
prefix=/usr/localprefix17,527
lispdir = $(prefix)/share/emacs/site-lisplispdir20,575
infodir = $(prefix)/share/infoinfodir23,641
BATCH=$(EMACS) -batch -q -no-site-file -eval                             \BATCH31,880
ELC= $(BATCH) -f batch-byte-compileELC35,1135
TEXI2PDF = texi2pdfTEXI2PDF38,1217
MKDIR = mkdir -pMKDIR41,1266
MAKEINFO = makeinfoMAKEINFO44,1337
TEXI2HTML = makeinfo --html --number-sectionsTEXI2HTML47,1388
CP = cp -pCP50,1500
INSTALL_INFO=install-infoINSTALL_INFO53,1556
LISPF      = 	org.el			\LISPF60,1831
LISPFILES0 = $(LISPF:%=lisp/%)LISPFILES0114,2896
LISPFILES  = $(LISPFILES0) lisp/org-install.elLISPFILES115,2927
ELCFILES0  = $(LISPFILES0:.el=.elc)ELCFILES0116,2974
ELCFILES   = $(LISPFILES:.el=.elc)ELCFILES117,3010
DOCFILES   = doc/org.texi doc/org.pdf doc/org doc/dir doc/.nosearchDOCFILES118,3045
CARDFILES  = doc/orgcard.tex doc/orgcard.pdf doc/orgcard_letter.pdfCARDFILES119,3113
TEXIFILES  = doc/org.texiTEXIFILES120,3181
INFOFILES  = doc/orgINFOFILES121,3207
SHELL = /bin/shSHELL125,3256
DISTFILES_extra=  Makefile ChangeLog request-assign-future.txt contribDISTFILES_extra128,3305
DISTFILES_xemacs=  xemacs/noutline.el xemacs/ps-print-invisible.el xemacs/READMEDISTFILES_xemacs129,3376
	dvips -q -f -t landscape doc/orgcard.dvi | gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=doc/orgcard.pdf -c .setpdfwrite -sDEVICE199,5174
	perl -pe 's/letterpaper=0/letterpaper=1/' doc/orgcard.tex > doc/orgcard_letter.texletterpaper205,5436
	dvips -q -f -t landscape doc/orgcard_letter.dvi | gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=doc/orgcard_letter.pdf -c .setpdfwrite -sDEVICE209,5602

vendor/org-6.34c/xemacs/noutline.el,4837
(defalias 'match-string-no-properties 'match-string)match-string-no-properties52,1801
(defvar font-lock-warning-face)font-lock-warning-face71,2534
(defgroup outlines niloutlines74,2568
(defcustom outline-regexp "[*\^L]+"outline-regexp79,2672
(defcustom outline-heading-end-regexp "\n"outline-heading-end-regexp89,3169
(defvar outline-mode-prefix-mapoutline-mode-prefix-map98,3537
(defvar outline-mode-menu-headingoutline-mode-menu-heading127,4700
(defvar outline-mode-menu-showoutline-mode-menu-show141,5298
(defvar outline-mode-menu-hideoutline-mode-menu-hide149,5515
(defvar outline-mode-mapoutline-mode-map160,5766
(defvar outline-font-lock-keywordsoutline-font-lock-keywords165,5890
(defface outline-1outline-1172,6141
(defface outline-2outline-2177,6225
(defface outline-3outline-3182,6317
(defface outline-4outline-4187,6402
(defface outline-5outline-5192,6490
(defface outline-6outline-6197,6580
(defface outline-7outline-7202,6668
(defface outline-8outline-8207,6753
(defvar outline-font-lock-facesoutline-font-lock-faces214,6843
(defvar outline-font-lock-levels nil)outline-font-lock-levels218,6964
(defun outline-font-lock-face ()outline-font-lock-face221,7058
(defvar outline-view-change-hook niloutline-view-change-hook248,8015
(defvar outline-mode-hook niloutline-mode-hook251,8114
(defvar outline-blank-line niloutline-blank-line254,8193
(define-derived-mode outline-mode text-mode "Outline"outline-mode258,8304
(defcustom outline-minor-mode-prefix "\C-c@"outline-minor-mode-prefix318,11426
(define-minor-mode outline-minor-modeoutline-minor-mode326,11727
(defvar outline-level 'outline-leveloutline-level353,12847
(defvar outline-heading-alist ()outline-heading-alist358,13073
(defun outline-level ()outline-level384,14357
(defun outline-next-preface ()outline-next-preface392,14737
(defun outline-next-heading ()outline-next-heading402,15120
(defun outline-previous-heading ()outline-previous-heading411,15445
(defsubst outline-invisible-p (&optional pos)outline-invisible-p417,15638
(defun outline-visible ()outline-visible421,15805
(defun outline-back-to-heading (&optional invisible-ok)outline-back-to-heading425,15917
(defun outline-on-heading-p (&optional invisible-ok)outline-on-heading-p441,16479
(defun outline-insert-heading ()outline-insert-heading449,16789
(defun outline-invent-heading (head up)outline-invent-heading469,17436
(defun outline-promote (&optional children)outline-promote483,18062
(defun outline-demote (&optional children)outline-demote519,19385
(defun outline-head-from-level (level head &optional alist)outline-head-from-level559,20902
(defun outline-map-region (fun beg end)outline-map-region594,22547
(defun outline-move-subtree-up (&optional arg)outline-move-subtree-up612,23085
(defun outline-move-subtree-down (&optional arg)outline-move-subtree-down617,23263
(defun outline-end-of-heading ()outline-end-of-heading654,24468
(defun outline-next-visible-heading (arg)outline-next-visible-heading658,24591
(defun outline-previous-visible-heading (arg)outline-previous-visible-heading681,25333
(defun outline-mark-subtree ()outline-mark-subtree689,25618
(defvar outline-isearch-open-invisible-function niloutline-isearch-open-invisible-function705,26093
(defun outline-discard-extents (&optional beg end)outline-discard-extents710,26337
(defun outline-flag-region (from to flag)outline-flag-region733,27262
(defun outline-isearch-open-invisible (overlay)outline-isearch-open-invisible754,28206
(defun hide-entry ()hide-entry758,28344
(defun show-entry ()show-entry766,28587
(defun hide-body ()hide-body775,28874
(defun hide-region-body (start end)hide-region-body780,29022
(defun show-all ()show-all801,29752
(defun hide-subtree ()hide-subtree806,29881
(defun hide-leaves ()hide-leaves811,30006
(defun show-subtree ()show-subtree819,30251
(defun outline-show-heading ()outline-show-heading824,30378
(defun hide-sublevels (levels)hide-sublevels834,30700
(defun hide-other ()hide-other854,31399
(defun outline-toggle-children ()outline-toggle-children869,31890
(defun outline-flag-subtree (flag)outline-flag-subtree879,32169
(defun outline-end-of-subtree ()outline-end-of-subtree887,32372
(defun show-branches ()show-branches904,32893
(defun show-children (&optional level)show-children909,33022
(defun outline-up-heading (arg &optional invisible-ok)outline-up-heading938,33932
(defun outline-forward-same-level (arg)outline-forward-same-level960,34817
(defun outline-get-next-sibling ()outline-get-next-sibling976,35310
(defun outline-backward-same-level (arg)outline-backward-same-level986,35681
(defun outline-get-last-sibling ()outline-get-last-sibling1002,36175
(defun outline-headers-as-kill (beg end)outline-headers-as-kill1013,36549

vendor/org-6.34c/xemacs/ps-print-invisible.el,227
(defun ps-generate-postscript-with-faces (from to)ps-generate-postscript-with-faces30,1209
(defun ps-print-find-invisible-xmas (from to)ps-print-find-invisible-xmas182,6423
(defun ps-mapper (extent list)ps-mapper200,6983

vendor/rhtml/rhtml-erb.el,2080
(defconst rhtml-erb-open-delimrhtml-erb-open-delim56,2154
(defconst rhtml-erb-close-delimrhtml-erb-close-delim62,2344
(defconst rhtml-erb-open-delim-lenrhtml-erb-open-delim-len67,2446
(defconst rhtml-erb-close-delim-lenrhtml-erb-close-delim-len70,2515
(defconst rhtml-erb-delim-rerhtml-erb-delim-re73,2585
(defconst rhtml-erb-tag-open-rerhtml-erb-tag-open-re76,2676
(defconst rhtml-erb-exec-tag-open-rerhtml-erb-exec-tag-open-re80,2782
(defconst rhtml-erb-out-tag-open-rerhtml-erb-out-tag-open-re83,2957
(defconst rhtml-erb-comment-tag-open-rerhtml-erb-comment-tag-open-re86,3040
(defconst rhtml-erb-tag-body-rerhtml-erb-tag-body-re90,3128
(defconst rhtml-erb-tag-close-rerhtml-erb-tag-close-re93,3183
(defconst rhtml-erb-tag-rerhtml-erb-tag-re96,3256
(defun rhtml-erb-delim-type (start-delim)rhtml-erb-delim-type101,3419
(defun rhtml-erb-middle-offset (prev-line-start cur-line-start)rhtml-erb-middle-offset112,3834
(defconst rhtml-erb-block-open-rerhtml-erb-block-open-re125,4380
(defconst rhtml-erb-brace-block-open-rerhtml-erb-brace-block-open-re128,4500
(defmacro rhtml-erb-block-open-p ()rhtml-erb-block-open-p132,4672
(defmacro rhtml-erb-brace-block-open-p ()rhtml-erb-brace-block-open-p137,4861
(defun rhtml-at-erb-tag-p ()rhtml-at-erb-tag-p142,5068
(defun rhtml-skip-erb-tag ()rhtml-skip-erb-tag147,5245
(defun rhtml-erb-tag-type-p (type)rhtml-erb-tag-type-p154,5493
(defun rhtml-scan-for-erb-tags (tags)rhtml-scan-for-erb-tags157,5586
(defun rhtml-scan-erb-tag ()rhtml-scan-erb-tag169,5900
(defun rhtml-erb-tag-region (&optional point)rhtml-erb-tag-region209,7741
(defun rhtml-erb-regions (begin end)rhtml-erb-regions229,8701
(defun rhtml-erb-regions2 (begin end)rhtml-erb-regions2250,9492
(defun rhtml-union-region-containing-erb-tags (r-start r-end)rhtml-union-region-containing-erb-tags282,10607
(defun rhtml-widen-to-erb-tag ()rhtml-widen-to-erb-tag292,11119
(defun rhtml-region-has-erb-tag-p (start end)rhtml-region-has-erb-tag-p306,11610
(defun skip-whitespace-forward ()skip-whitespace-forward316,11849

vendor/rhtml/rhtml-fonts.el,1029
(defvar rhtml-in-erb-keywordsrhtml-in-erb-keywords27,983
(defvar rhtml-font-lock-syntactic-keywordsrhtml-font-lock-syntactic-keywords34,1556
(defun rhtml-activate-fontification ()rhtml-activate-fontification41,1784
(defun rhtml-fontify-buffer ()rhtml-fontify-buffer56,2356
(defun rhtml-fontify-erb-block (type begin end)rhtml-fontify-erb-block60,2428
(defun rhtml-font-unfontify-region (beg end)rhtml-font-unfontify-region78,3243
(defun rhtml-fontify-region (begin end)rhtml-fontify-region88,3612
(defface erb-faceerb-face109,4377
(defface erb-delim-faceerb-delim-face127,4963
(defface erb-exec-faceerb-exec-face132,5127
(defface erb-exec-delim-faceerb-exec-delim-face137,5246
(defface erb-out-faceerb-out-face142,5390
(defface erb-out-delim-faceerb-out-delim-face147,5508
(defface erb-comment-faceerb-comment-face153,5743
(defface erb-comment-delim-faceerb-comment-delim-face159,5953
(defvar erb-type-to-faceerb-type-to-face166,6176
(defvar erb-type-to-delim-faceerb-type-to-delim-face171,6289

vendor/rhtml/rhtml-mode.el,281
(define-derived-mode rhtml-moderhtml-mode48,1914
(define-key ruby-mode-mapruby-mode-map58,2166
(define-key rhtml-mode-maprhtml-mode-map60,2260
(defun extract-partial (begin end partial-name)extract-partial63,2326
(defun rhtml-dashize (&optional mode)rhtml-dashize73,2690

vendor/rhtml/rhtml-navigation.el,367
(defun rhtml-controller-name-from-view ()rhtml-controller-name-from-view9,179
(defun rhtml-find-action ()rhtml-find-action19,524
(defun rinari-find-by-context ()rinari-find-by-context27,801
(defun rhtml-find-partial (partial)rhtml-find-partial39,1392
(defun current-line ()current-line45,1532
(defun match-strings (string &optional n)match-strings52,1697

vendor/rhtml/rhtml-ruby-hook.el,355
(defvar rhtml-ruby-temp-buffer-namerhtml-ruby-temp-buffer-name56,2103
(defun rhtml-ruby-temp-buffer ()rhtml-ruby-temp-buffer61,2292
(defun rhtml-copy-to-ruby-temp (begin end)rhtml-copy-to-ruby-temp70,2621
(defun rhtml-ruby-indent-at (indent-pos)rhtml-ruby-indent-at79,3051
(defun rthml-insert-from-ruby-temp ()rthml-insert-from-ruby-temp87,3352

vendor/rhtml/rhtml-sgml-hacks.el,656
(defun rhtml-disable-sgml-hacks ()rhtml-disable-sgml-hacks67,2198
(defun rhtml-enable-sgml-hacks ()rhtml-enable-sgml-hacks72,2365
(defun rhtml-remove-feature (feature)rhtml-remove-feature78,2560
(defun rhtml-reload-feature (feature)rhtml-reload-feature80,2641
(defun sgml-get-context (&optional until)sgml-get-context127,4095
(defun sgml-calculate-indent (&optional lcon)sgml-calculate-indent231,8126
(defun sgml-parse-tag-backward (&optional limit)sgml-parse-tag-backward367,13000
(defun sgml-beginning-of-tag (&optional top-level)sgml-beginning-of-tag444,15730
(defun sgml-lexical-context (&optional limit)sgml-lexical-context462,16381

vendor/rinari/rinari-merb.el,2244
(defcustom rinari-merb-tags-file-namerinari-merb-tags-file-name70,2242
(defvar rinari-merb-minor-mode-hook nilrinari-merb-minor-mode-hook75,2393
(defadvice ruby-compilation-run (around rinari-merb-compilation-run activate)ruby-compilation-run78,2474
(defadvice ruby-compilation-rake (around rinari-merb-compilation-rake activate)ruby-compilation-rake85,2760
(defun rinari-merb-parse-yaml ()rinari-merb-parse-yaml92,3048
(defun rinari-merb-root (&optional dir home)rinari-merb-root101,3351
(defun rinari-merb-rake (&optional task edit-cmd-args)rinari-merb-rake114,3842
(defun rinari-merb-script (&optional script)rinari-merb-script122,4192
(defun rinari-merb-test (&optional edit-cmd-args)rinari-merb-test136,4839
(defun rinari-merb-console (&optional edit-cmd-args)rinari-merb-console160,5807
(defun rinari-merb-sql ()rinari-merb-sql167,6123
(defun rinari-merb-merb (&optional name args edit-cmd-args)rinari-merb-merb199,7575
(defun rinari-merb-insert-erb-skeleton (no-equals)rinari-merb-insert-erb-skeleton215,8161
(defun rinari-merb-extract-partial (begin end partial-name)rinari-merb-extract-partial222,8407
(defvar rinari-merb-rgrep-file-endingsrinari-merb-rgrep-file-endings240,9214
(defun rinari-merb-rgrep (&optional arg)rinari-merb-rgrep244,9335
(defun rinari-merb-generate (type name)rinari-merb-generate257,9850
(defvar rinari-merb-ruby-hash-regexprinari-merb-ruby-hash-regexp262,10061
(defun rinari-merb-ruby-values-from-render (controller action)rinari-merb-ruby-values-from-render266,10280
(defun rinari-merb-which-render (renders)rinari-merb-which-render282,10954
(defun rinari-merb-follow-controller-and-action (controller action)rinari-merb-follow-controller-and-action291,11242
(defvar rinari-merb-minor-mode-maprinari-merb-minor-mode-map493,22017
(defun rinari-merb-bind-key-to-func (key func)rinari-merb-bind-key-to-func498,22139
(defvar rinari-merb-minor-mode-keybindingsrinari-merb-minor-mode-keybindings504,22358
(defun rinari-merb-launch ()rinari-merb-launch519,23101
(defvar rinari-merb-major-modesrinari-merb-major-modes531,23630
(defadvice cd (after rinari-merb-on-cd activate)cd540,23907
(define-minor-mode rinari-merb-minor-moderinari-merb-minor-mode546,24099

vendor/rinari/rinari.el,2762
(defgroup rinari nilrinari88,2911
(defcustom rinari-tags-file-namerinari-tags-file-name93,2998
(defvar rinari-minor-mode-hook nilrinari-minor-mode-hook98,3139
(defcustom rinari-rails-env nilrinari-rails-env101,3210
(defvar rinari-minor-mode-prefixesrinari-minor-mode-prefixes106,3431
(defvar rinari-partial-regex "render :partial *=> *[@'\"]?\\([A-Za-z/_]+\\)['\"]?"rinari-partial-regex110,3586
(defadvice ruby-compilation-do (around rinari-compilation-do activate)ruby-compilation-do113,3720
(defadvice ruby-compilation-rake (around rinari-compilation-rake activate)ruby-compilation-rake120,3989
(defadvice ruby-compilation-cap (around rinari-compilation-cap activate)ruby-compilation-cap127,4262
(defun rinari-parse-yaml ()rinari-parse-yaml134,4532
(defun rinari-root (&optional dir home)rinari-root143,4833
(defun rinari-rake (&optional task edit-cmd-args)rinari-rake156,5376
(defun rinari-cap (&optional task edit-cmd-args)rinari-cap165,5790
(defun rinari-script (&optional script)rinari-script174,6206
(defun rinari-test (&optional edit-cmd-args)rinari-test188,6843
(defun rinari-console (&optional edit-cmd-args)rinari-console214,8034
(defun rinari-sql ()rinari-sql244,9137
(defun rinari-web-server (&optional edit-cmd-args)rinari-web-server277,10652
(defun rinari-insert-erb-skeleton (no-equals)rinari-insert-erb-skeleton304,11682
(defun rinari-extract-partial (begin end partial-name)rinari-extract-partial311,11967
(defun rinari-insert-partial (partial-name ending)rinari-insert-partial329,12852
(defun rinari-goto-partial ()rinari-goto-partial344,13366
(defvar rinari-rgrep-file-endingsrinari-rgrep-file-endings356,13957
(defun rinari-rgrep (&optional arg)rinari-rgrep360,14068
(defun rinari-ending ()rinari-ending373,14582
(defun rinari-script-path ()rinari-script-path381,14846
(defun rinari-generate (type name)rinari-generate388,15112
(defvar rinari-ruby-hash-regexprinari-ruby-hash-regexp399,15550
(defun rinari-ruby-values-from-render (controller action)rinari-ruby-values-from-render403,15764
(defun rinari-which-render (renders)rinari-which-render425,16646
(defun rinari-follow-controller-and-action (controller action)rinari-follow-controller-and-action434,16929
(defun rinari-apply-jump-schema (schema)rinari-apply-jump-schema642,28129
(defvar rinari-minor-mode-maprinari-minor-mode-map665,28872
(defun rinari-bind-key-to-func (key func)rinari-bind-key-to-func670,28984
(defvar rinari-minor-mode-keybindingsrinari-minor-mode-keybindings675,29173
(defun rinari-launch ()rinari-launch693,29944
(defvar rinari-major-modesrinari-major-modes706,30477
(defadvice cd (after rinari-on-cd activate)cd715,30775
(define-minor-mode rinari-minor-moderinari-minor-mode721,30952

vendor/rinari/test/elunit.el,2328
(defstruct test-suite name children tests setup-hook teardown-hook)test-suite76,2618
(defstruct test name body file line message problem)test77,2686
(defvar elunit-default-suiteelunit-default-suite81,2796
(defvar elunit-suites (list (make-test-suite :name 'default-suite))elunit-suites85,2922
(defvar elunit-test-count 0)elunit-test-count88,3039
(defvar elunit-failures nilelunit-failures89,3068
(defvar elunit-done-running-hook nilelunit-done-running-hook92,3136
(defun elunit-clear-suites ()elunit-clear-suites95,3260
(defmacro* defsuite (suite-name suite-ancestor &key setup-hook teardown-hook)defsuite102,3432
(defun elunit-get-suite (suite)elunit-get-suite111,3889
(defun elunit-delete-suite (name)elunit-delete-suite118,4131
(defmacro deftest (name suite &rest body)deftest122,4270
(defun elunit-get-test (name suite)elunit-get-test136,4886
(defun elunit-delete-test (name suite)elunit-delete-test142,5119
(defun elunit-total-test-count (suite)elunit-total-test-count148,5331
(defun elunit-test-docstring (test)elunit-test-docstring155,5602
(defun elunit (suite)elunit164,5832
(defun elunit-run-suite (suite)elunit-run-suite186,6822
(defun elunit-run-test (test)elunit-run-test196,7318
(defun elunit-failure (test err output)elunit-failure208,7594
(defun elunit-report-failures ()elunit-report-failures220,8003
(defmacro with-test-buffer (&rest body)with-test-buffer239,8607
(defun elunit-quiet (suite)elunit-quiet246,8819
(defun fail (&rest args)fail258,9368
(defun assert-that (actual)assert-that267,9655
(defun assert-nil (actual)assert-nil271,9749
(defun assert-equal (expected actual)assert-equal275,9836
(defun assert-not-equal (expected actual)assert-not-equal279,9961
(defun assert-member (elt list)assert-member283,10092
(defun assert-match (regex string)assert-match287,10203
(defmacro assert-error (&rest body)assert-error291,10329
(defmacro assert-changed (form &rest body)assert-changed298,10477
(defmacro assert-not-changed (form &rest body)assert-not-changed304,10610
(defun assert-in-buffer (target &optional buffer)assert-in-buffer312,10774
(defun assert-background (target face &optional buffer)assert-background319,11031
(defun assert-overlay (pos)assert-overlay328,11428
(defun assert-no-overlay (pos)assert-no-overlay332,11536

vendor/rinari/test/init.el,368
(defsuite rinari-suite nilrinari-suite10,266
(deftest rinari-move-test rinari-suiterinari-move-test16,420
(deftest rinari-console-test rinari-suiterinari-console-test48,1665
(deftest rinari-server-test rinari-suiterinari-server-test59,2093
(deftest rinari-test-test rinari-suiterinari-test-test70,2525
(deftest rinari-hooks rinari-suiterinari-hooks87,3243

vendor/rinari/test/rails-app/app/controllers/application.rb,81
class ApplicationController < ActionController::BaseApplicationController4,154

vendor/rinari/test/rails-app/app/controllers/example_controller.rb,115
class ExampleController < ApplicationControllerExampleController1,0
  def showshow3,49
  def writewrite7,125

vendor/rinari/test/rails-app/app/controllers/newone_controller.rb,68
class NewoneController < ApplicationControllerNewoneController1,0

vendor/rinari/test/rails-app/app/controllers/units_controller.rb,87
class UnitsController < ApplicationControllerUnitsController1,0
  def fallfall3,49

vendor/rinari/test/rails-app/app/helpers/application_helper.rb,48
module ApplicationHelperApplicationHelper2,86

vendor/rinari/test/rails-app/app/helpers/example_helper.rb,39
module ExampleHelperExampleHelper1,0

vendor/rinari/test/rails-app/app/helpers/newone_helper.rb,37
module NewoneHelperNewoneHelper1,0

vendor/rinari/test/rails-app/app/helpers/units_helper.rb,35
module UnitsHelperUnitsHelper1,0

vendor/rinari/test/rails-app/app/models/example.rb,68
class Example < ActiveRecord::BaseExample1,0
  def to_sto_s3,36

vendor/rinari/test/rails-app/config/boot.rb,795
module RailsRails6,175
    def boot!boot!8,204
    def booted?booted?15,302
    def pick_bootpick_boot19,361
    def vendor_rails?vendor_rails?23,437
    def preinitializepreinitialize27,516
    def preinitializer_pathpreinitializer_path31,615
  class BootBoot36,705
    def runrun37,718
  class VendorBoot < BootVendorBoot43,813
    def load_initializerload_initializer44,839
  class GemBoot < BootGemBoot50,1001
    def load_initializerload_initializer51,1024
    def load_rails_gemload_rails_gem57,1138
      def rubygems_versionrubygems_version69,1629
      def gem_versiongem_version73,1729
      def load_rubygemsload_rubygems83,1985
      def parse_gem_version(text)parse_gem_version96,2421
        def read_environment_rbread_environment_rb101,2562

vendor/rinari/test/rails-app/config/environment.rb,0

vendor/rinari/test/rails-app/config/environments/development.rb,0

vendor/rinari/test/rails-app/config/environments/production.rb,0

vendor/rinari/test/rails-app/config/environments/test.rb,0

vendor/rinari/test/rails-app/config/initializers/inflections.rb,0

vendor/rinari/test/rails-app/config/initializers/mime_types.rb,0

vendor/rinari/test/rails-app/config/initializers/new_rails_defaults.rb,0

vendor/rinari/test/rails-app/config/routes.rb,0

vendor/rinari/test/rails-app/public/404.html,0

vendor/rinari/test/rails-app/public/422.html,0

vendor/rinari/test/rails-app/public/500.html,0

vendor/rinari/test/rails-app/public/dispatch.rb,0

vendor/rinari/test/rails-app/public/index.html,40
      function about() {about184,4074

vendor/rinari/test/rails-app/public/javascripts/application.js,0

vendor/rinari/test/rails-app/public/javascripts/controls.js,492
});Autocompleter.Base333,11047
Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function(newS, oldS) {Autocompleter.Base.getTokenBounds335,11052
});Field.scrollFreeActivate465,16079
});Ajax.InPlaceEditor848,30426
Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function(options) {Ajax.InPlaceEditor.initialize855,30676
Ajax.InPlaceCollectionEditor.DefaultOptions = {Ajax.InPlaceCollectionEditor.DefaultOptions.loadingCollectionText936,33850

vendor/rinari/test/rails-app/public/javascripts/dragdrop.js,1097
var Droppables = {Droppables.drops10,462
    var drop, affected = [];drop89,2565
var Draggables = {Draggables.drags126,3611
    var pointer = [Event.pointerX(event), Event.pointerY(event)];pointer171,5122
var Draggable = Class.create({Draggable225,6884
var SortableObserver = Class.create({SortableObserver574,18684
var Sortable = {Sortable.SERIALIZE_RULE592,19127
    var options_for_draggable = {options_for_draggable.revert657,21100
      revert:      true,options_for_draggable.quiet658,21134
    var options_for_droppable = {options_for_droppable.overlap686,22026
    var options_for_tree = {options_for_tree.onHover694,22255
    var droponOptions = Sortable.options(dropon);droponOptions781,25279
    var offsets = Position.cumulativeOffset(dropon);offsets827,26926
      var child = {child.id847,27608
    var root = {root.id877,28435
      id: null,root.parent878,28452
      parent: null,root.children879,28468
    var name = encodeURIComponent(name929,29896
}Element.isParent943,30481
}Element.findChildren950,30744
}Element.offsetSize968,31391

vendor/rinari/test/rails-app/public/javascripts/effects.js,1770
// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)String0,0
String.prototype.parseColor = function() {  String.parseColor12,482
};Element.collectTextNodes24,1007
};Element.collectTextNodesIgnoreClass33,1344
};Element.setContentZoom41,1697
};Element.getInlineOpacity48,1910
};Element.forceRerendering52,2001
var Effect = {var.Effect._elementDoesNotExistError65,2285
    var masterDelay = options.delay;masterDelay142,4527
Effect.Queues = {Effect.Queues.instances222,7000
});Effect.MoveBy391,12801
});Effect.ScrollTo506,17443
};Effect.Fade522,17972
};Effect.Appear538,18448
  var oldStyle = { Effect.Puff.oldStyle.opacity557,19012
};Effect.Puff553,18950
};Effect.BlindUp577,19762
};Effect.BlindDown591,20121
};Effect.SwitchOff609,20718
  var oldStyle = {Effect.DropOut.oldStyle.top635,21538
};Effect.DropOut631,21473
  var oldStyle = {Effect.Shake.oldStyle.top661,22398
};Effect.Shake651,22143
};Effect.SlideDown678,23322
};Effect.SlideUp706,24526
};Effect.Squish735,25627
  var oldStyle = {Effect.Grow.oldStyle.top758,26322
};Effect.Grow748,26030
  var oldStyle = {Effect.Shrink.oldStyle.top832,28752
};Effect.Shrink822,28458
  var reverser   = function(pos){ return transition(1-Effect.Transitions.pulse(pos, options.pulses)) };Effect.Pulsate.reverser883,30378
};Effect.Pulsate876,30156
  var oldStyle = {Effect.Fold.oldStyle.top893,30809
};Effect.Fold889,30747
String.prototype.parseStyle = function(){String.parseStyle1046,36488
if (document.defaultView && document.defaultView.getComputedStyle) {Element.getStyles1065,37090
Effect.Methods = {Effect.Methods.morph1086,37783
  },Effect.Methods.visualEffect1091,37969
  },Effect.Methods.highlight1097,38208

vendor/rinari/test/rails-app/public/javascripts/prototype.js,330
var Prototype = {Prototype.Version9,323
  Version: '1.6.0.1',Prototype.Browser10,341
var Class = {Class.create41,1312
      var subclass = function() { };var.subclass56,1672
      var subclass = function() { };subclass56,1672
Class.Methods = {Class.Methods.addMethods74,2090
var Abstract = { };Object.extend100,2960

vendor/rinari/test/rails-app/script/about,0

vendor/rinari/test/rails-app/script/console,0

vendor/rinari/test/rails-app/script/dbconsole,0

vendor/rinari/test/rails-app/script/destroy,0

vendor/rinari/test/rails-app/script/generate,0

vendor/rinari/test/rails-app/script/performance/benchmarker,0

vendor/rinari/test/rails-app/script/performance/profiler,0

vendor/rinari/test/rails-app/script/performance/request,0

vendor/rinari/test/rails-app/script/plugin,0

vendor/rinari/test/rails-app/script/process/inspector,0

vendor/rinari/test/rails-app/script/process/reaper,0

vendor/rinari/test/rails-app/script/process/spawner,0

vendor/rinari/test/rails-app/script/runner,0

vendor/rinari/test/rails-app/script/server,0

vendor/rinari/test/rails-app/test/functional/example_controller_test.rb,118
class ExampleControllerTest < ActionController::TestCaseExampleControllerTest3,52
  def test_truthtest_truth5,148

vendor/rinari/test/rails-app/test/functional/newone_controller_test.rb,116
class NewoneControllerTest < ActionController::TestCaseNewoneControllerTest3,23
  def test_truthtest_truth5,118

vendor/rinari/test/rails-app/test/functional/units_controller_test.rb,112
class UnitsControllerTest < ActionController::TestCaseUnitsControllerTest3,52
  def test_falltest_fall6,149

vendor/rinari/test/rails-app/test/test_helper.rb,38
class Test::Unit::TestCaseTest5,123

vendor/rinari/test/rails-app/test/unit/example_test.rb,93
class ExampleTest < ActiveSupport::TestCaseExampleTest3,52
  def test_to_stest_to_s6,136

vendor/rinari/test/rails-app/test/unit/newone_test.rb,93
class NewoneTest < ActiveSupport::TestCaseNewoneTest3,23
  def test_truthtest_truth5,105

vendor/rinari/util/cucumber-mode-compilation.el,1754
(defvar cucumber-compilation-executable "cucumber"cucumber-compilation-executable52,1595
(defvar cucumber-compilation-error-regexpcucumber-compilation-error-regexp55,1724
(defvar cucumber-compilation-error-regexp-alistcucumber-compilation-error-regexp-alist59,1929
(defvar cucumber-compilation-clear-between tcucumber-compilation-clear-between64,2151
(defvar cucumber-compilation-reuse-buffers tcucumber-compilation-reuse-buffers67,2256
(defadvice cucumber-compilation-do (around cucumber-compilation-do activate)cucumber-compilation-do70,2368
(defun cucumber-compilation-this-buffer ()cucumber-compilation-this-buffer78,2662
(defun cucumber-compilation-this-scenario ()cucumber-compilation-this-scenario84,2843
(defun cucumber-compilation-this-test-buffer-name (scenario-name)cucumber-compilation-this-test-buffer-name96,3399
(defun cucumber-compilation-run (cmd)cucumber-compilation-run106,3765
(defun cucumber-compilation-do (name cmdlist)cucumber-compilation-do117,4224
(defun cucumber-compilation-sentinel (proc msg)cucumber-compilation-sentinel137,5161
(defun cucumber-compilation-previous-error-group ()cucumber-compilation-previous-error-group141,5316
(defun cucumber-compilation-next-error-group ()cucumber-compilation-next-error-group149,5638
(defun cucumber-compilation-insertion-filter (proc string)cucumber-compilation-insertion-filter156,5932
(defun cucumber-compilation-this-scenario-name ()cucumber-compilation-this-scenario-name166,6350
(defun cucumber-compilation-profile-name ()cucumber-compilation-profile-name172,6554
(defvar cucumber-compilation-minor-mode-mapcucumber-compilation-minor-mode-map182,6980
(define-minor-mode cucumber-compilation-minor-modecucumber-compilation-minor-mode193,7465

vendor/rinari/util/inf-ruby.el,2180
(defvar inf-ruby-default-implementation "ruby"inf-ruby-default-implementation37,1192
(defvar inf-ruby-first-prompt-pattern "^irb(.*)[0-9:]+0> *"inf-ruby-first-prompt-pattern40,1300
(defvar inf-ruby-prompt-pattern "^\\(irb(.*)[0-9:]+[>*\"'] *\\)+"inf-ruby-prompt-pattern43,1414
(defvar inf-ruby-mode-hook nilinf-ruby-mode-hook46,1528
(defvar inf-ruby-mode-mapinf-ruby-mode-map49,1602
(defvar inf-ruby-implementationsinf-ruby-implementations57,1890
(defvar ruby-source-modes '(ruby-mode)ruby-source-modes65,2262
(defvar ruby-prev-l/c-dir/file nilruby-prev-l/c-dir/file71,2531
(defconst inf-ruby-error-regexp-alistinf-ruby-error-regexp-alist77,2725
(defun inf-ruby-keys ()inf-ruby-keys82,2923
(defvar inf-ruby-buffer nil "Current irb process buffer.")inf-ruby-buffer96,3670
(defun inf-ruby-mode ()inf-ruby-mode98,3730
(defvar inf-ruby-filter-regexp "\\`\\s *\\S ?\\S ?\\s *\\'"inf-ruby-filter-regexp145,5656
(defun inf-ruby-input-filter (str)inf-ruby-input-filter149,5849
(defun inf-ruby-remove-in-string (str regexp)inf-ruby-remove-in-string154,6046
(defun inf-ruby-get-old-input ()inf-ruby-get-old-input163,6445
(defun inf-ruby (&optional impl)inf-ruby172,6754
(defun run-ruby (&optional command name)run-ruby189,7412
(defun inf-ruby-proc ()inf-ruby-proc209,8337
(defconst ruby-send-terminator "--inf-ruby-%x-%d-%d-%d--"ruby-send-terminator218,8704
(defconst ruby-eval-separator "")ruby-eval-separator222,8850
(defun ruby-send-region (start end)ruby-send-region224,8885
(defun ruby-send-definition ()ruby-send-definition248,9883
(defun ruby-send-last-sexp ()ruby-send-last-sexp257,10132
(defun ruby-send-block ()ruby-send-block262,10307
(defun ruby-switch-to-inf (eob-p)ruby-switch-to-inf272,10564
(defun ruby-send-region-and-go (start end)ruby-send-region-and-go283,10925
(defun ruby-send-definition-and-go ()ruby-send-definition-and-go290,11139
(defun ruby-send-block-and-go ()ruby-send-block-and-go297,11334
(defun ruby-load-file (file-name)ruby-load-file304,11514
(defun inf-ruby-completions (seed)inf-ruby-completions315,12161
(defun inf-ruby-complete-or-tab (&optional command)inf-ruby-complete-or-tab328,12868

vendor/rinari/util/jump/findr.el,1332
(defgroup findr nilfindr110,4262
(defcustom findr-skip-directory-regexp "^\\.backups$\\|^_darcs$\\|^\\.git$\\|^CVS$\\|^\\.svn$"findr-skip-directory-regexp124,4669
(defcustom findr-skip-file-regexp "^[#\\.]"findr-skip-file-regexp129,4918
(defvar findr-search-regexp-history nil)findr-search-regexp-history134,5123
(defvar findr-search-replacement-history nil)findr-search-replacement-history135,5164
(defvar findr-file-name-regexp-history nil)findr-file-name-regexp-history136,5210
(defvar findr-directory-history nil)findr-directory-history137,5254
(defun findr-read-search-regexp (&optional prompt)findr-read-search-regexp139,5292
(defun findr-read-file-regexp (&optional prompt)findr-read-file-regexp144,5467
(defun findr-read-starting-directory (&optional prompt)findr-read-starting-directory150,5676
(defun* findr (name dir &key (prompt-p (interactive-p)) (skip-symlinks t))findr160,6008
(defun findr-query-replace (from to name dir)findr-query-replace205,8160
(defun findr-search (regexp files dir)findr-search217,8876
(defun findr-find-files (files dir)findr-find-files227,9284
(defun findr-make-queue ()findr-make-queue236,9604
(defun findr-enqueue (item q)findr-enqueue242,9730
(defun findr-dequeue (q)findr-dequeue249,9884
(defsubst findr-queue-contents (q)findr-queue-contents255,10032

vendor/rinari/util/jump/inflections.el,512
(defvar inflection-singulars    nil)inflection-singulars31,1148
(defvar inflection-plurals      nil)inflection-plurals32,1186
(defvar inflection-irregulars   nil)inflection-irregulars33,1224
(defvar inflection-uncountables nil)inflection-uncountables34,1262
(defmacro define-inflectors (&rest specs)define-inflectors36,1302
(defmacro string=~ (regex string &rest body)string=~45,1701
(defun singularize-string (str)singularize-string131,5265
(defun pluralize-string (str)pluralize-string141,5657

vendor/rinari/util/jump/jump.el,1118
(defvar jump-ignore-file-regexp ;; TODO actually start using thisjump-ignore-file-regexp76,3021
(defun jump-completing-read (prompt choices &optional predicate require-match initial-input hist def)jump-completing-read80,3213
(defun jump-find-file-in-dir (dir)jump-find-file-in-dir88,3708
(defun jump-method ()jump-method94,3969
(defun jump-uniqueify (file-cons)jump-uniqueify101,4188
(defun jump-select-and-find-file (files)jump-select-and-find-file107,4415
(defun jump-remove-unwanted-files (files)jump-remove-unwanted-files117,4770
(defun jump-to-file (&optional file)jump-to-file123,4960
(defun jump-to-method (&optional method)jump-to-method148,5971
(defun jump-to-path (path)jump-to-path160,6419
(defun jump-insert-matches (spec matches)jump-insert-matches172,6858
(defun jump-inflections (terms)jump-inflections184,7200
(defun jump-to-all-inflections (spec matches)jump-to-all-inflections205,7844
(defun jump-to (spec &optional matches make)jump-to213,8134
(defun jump-from (spec)jump-from233,9092
(defun defjump (name specs root &optional doc make method-command)defjump254,9818

vendor/rinari/util/jump/test/elunit.el,2328
(defstruct test-suite name children tests setup-hook teardown-hook)test-suite76,2618
(defstruct test name body file line message problem)test77,2686
(defvar elunit-default-suiteelunit-default-suite81,2796
(defvar elunit-suites (list (make-test-suite :name 'default-suite))elunit-suites85,2922
(defvar elunit-test-count 0)elunit-test-count88,3039
(defvar elunit-failures nilelunit-failures89,3068
(defvar elunit-done-running-hook nilelunit-done-running-hook92,3136
(defun elunit-clear-suites ()elunit-clear-suites95,3260
(defmacro* defsuite (suite-name suite-ancestor &key setup-hook teardown-hook)defsuite102,3432
(defun elunit-get-suite (suite)elunit-get-suite111,3889
(defun elunit-delete-suite (name)elunit-delete-suite118,4131
(defmacro deftest (name suite &rest body)deftest122,4270
(defun elunit-get-test (name suite)elunit-get-test136,4886
(defun elunit-delete-test (name suite)elunit-delete-test142,5119
(defun elunit-total-test-count (suite)elunit-total-test-count148,5331
(defun elunit-test-docstring (test)elunit-test-docstring155,5602
(defun elunit (suite)elunit164,5832
(defun elunit-run-suite (suite)elunit-run-suite186,6822
(defun elunit-run-test (test)elunit-run-test196,7318
(defun elunit-failure (test err output)elunit-failure208,7594
(defun elunit-report-failures ()elunit-report-failures220,8003
(defmacro with-test-buffer (&rest body)with-test-buffer239,8607
(defun elunit-quiet (suite)elunit-quiet246,8819
(defun fail (&rest args)fail258,9368
(defun assert-that (actual)assert-that267,9655
(defun assert-nil (actual)assert-nil271,9749
(defun assert-equal (expected actual)assert-equal275,9836
(defun assert-not-equal (expected actual)assert-not-equal279,9961
(defun assert-member (elt list)assert-member283,10092
(defun assert-match (regex string)assert-match287,10203
(defmacro assert-error (&rest body)assert-error291,10329
(defmacro assert-changed (form &rest body)assert-changed298,10477
(defmacro assert-not-changed (form &rest body)assert-not-changed304,10610
(defun assert-in-buffer (target &optional buffer)assert-in-buffer312,10774
(defun assert-background (target face &optional buffer)assert-background319,11031
(defun assert-overlay (pos)assert-overlay328,11430
(defun assert-no-overlay (pos)assert-no-overlay332,11538

vendor/rinari/util/jump/test/init.el,418
(defsuite jump-suite niljump-suite13,353
(deftest jump-to-file-test jump-suite ;; test failing but method seems to workjump-to-file-test46,1491
(deftest jump-method-test jump-suitejump-method-test61,2148
(deftest jump-to-method-test jump-suitejump-to-method-test73,2588
(deftest jump-to-path-test jump-suitejump-to-path-test85,2987
(deftest jump-from-function-test jump-suitejump-from-function-test98,3395

vendor/rinari/util/jump/test/jump-fake-app/animals/chicken.rb,55
class ChickenChicken1,0
  def gizzardsgizzards3,17

vendor/rinari/util/jump/test/jump-fake-app/animals/pig.rb,136
class PigPig1,0
  def stomachstomach3,13
  def buttbutt7,73
  def outer_backouter_back11,127
  def inner_backinner_back15,185

vendor/rinari/util/jump/test/jump-fake-app/foods/pork.rb,177
class PorkPork1,0
  def cook_stomachcook_stomach3,12
  def cook_buttcook_butt7,52
  def cook_outer_backcook_outer_back11,94
  def cook_inner_backcook_inner_back15,140

vendor/rinari/util/jump/which-func.el,1303
(defvar which-func-unknown "???"which-func-unknown70,2566
(defgroup which-func nilwhich-func73,2674
(defcustom which-func-modeswhich-func-modes78,2798
(defcustom which-func-non-auto-modes nilwhich-func-non-auto-modes88,3248
(defcustom which-func-maxout 500000which-func-maxout97,3671
(defvar which-func-keymapwhich-func-keymap103,3881
(defface which-funcwhich-func116,4250
(defcustom which-func-formatwhich-func-format143,5473
(defvar which-func-cleanup-function nilwhich-func-cleanup-function156,5914
(defvar which-func-table (make-hash-table :test 'eq :weakness 'key))which-func-table172,6552
(defconst which-func-currentwhich-func-current174,6622
(defvar which-func-mode nilwhich-func-mode178,6793
(defun which-func-ff-hook ()which-func-ff-hook186,7091
(defun which-func-update ()which-func-update205,7709
(defun which-func-update-1 (window)which-func-update-1210,7899
(defalias 'which-func-mode 'which-function-mode)which-func-mode224,8370
(defvar which-func-update-timer nil)which-func-update-timer226,8420
(define-minor-mode which-function-modewhich-function-mode230,8523
(defvar which-function-imenu-failed nilwhich-function-imenu-failed255,9480
(defvar which-func-functions nilwhich-func-functions258,9598
(defun which-function ()which-function263,9823

vendor/rinari/util/ruby-compilation-rspec.el,162
(defun ruby-compilation-this-test-name ()ruby-compilation-this-test-name21,744
(defun ruby-compilation-this-spec-name ()ruby-compilation-this-spec-name26,920

vendor/rinari/util/ruby-compilation.el,2224
(defvar ruby-compilation-error-regexpruby-compilation-error-regexp62,2067
(defvar ruby-compilation-error-regexp-alistruby-compilation-error-regexp-alist66,2264
(defvar ruby-compilation-executable "ruby"ruby-compilation-executable71,2473
(defvar ruby-compilation-executable-rake "rake"ruby-compilation-executable-rake74,2590
(defvar ruby-compilation-test-name-flag "-n"ruby-compilation-test-name-flag77,2707
(defvar ruby-compilation-clear-between truby-compilation-clear-between80,2822
(defvar ruby-compilation-reuse-buffers truby-compilation-reuse-buffers83,2923
(defun pcomplete/rake ()pcomplete/rake87,3046
(defun pcmpl-rake-tasks ()pcmpl-rake-tasks90,3111
(defun pcomplete/cap ()pcomplete/cap99,3505
(defun pcmpl-cap-tasks ()pcmpl-cap-tasks102,3568
(defun ruby-compilation-run (cmd &optional ruby-options)ruby-compilation-run111,3957
(defun ruby-compilation-rake (&optional edit task env-vars)ruby-compilation-rake121,4410
(defun ruby-compilation-cap (&optional edit task env-vars)ruby-compilation-cap139,5048
(defvar ruby-capistrano-minor-mode-mapruby-capistrano-minor-mode-map164,6192
(define-minor-mode ruby-capistrano-minor-moderuby-capistrano-minor-mode172,6505
(defun ruby-compilation-this-buffer ()ruby-compilation-this-buffer180,6732
(defun ruby-compilation-this-test ()ruby-compilation-this-test185,6886
(defun ruby-compilation-this-test-buffer-name (test-name)ruby-compilation-this-test-buffer-name195,7330
(defun ruby-compilation-this-test-name ()ruby-compilation-this-test-name204,7661
(defun ruby-compilation-do (name cmdlist)ruby-compilation-do213,8008
(defun ruby-compilation-insertion-filter (proc string)ruby-compilation-insertion-filter235,9001
(defun ruby-compilation-adjust-paths (string)ruby-compilation-adjust-paths245,9426
(defun ruby-compilation-sentinel (proc msg)ruby-compilation-sentinel250,9593
(defun ruby-compilation-previous-error-group ()ruby-compilation-previous-error-group254,9744
(defun ruby-compilation-next-error-group ()ruby-compilation-next-error-group263,10058
(defvar ruby-compilation-minor-mode-mapruby-compilation-minor-mode-map271,10344
(define-minor-mode ruby-compilation-minor-moderuby-compilation-minor-mode282,10813

vendor/rinari/util/ruby-mode.el,5173
(defconst ruby-keyword-end-reruby-keyword-end-re31,873
(defconst ruby-block-beg-keywordsruby-block-beg-keywords36,964
(defconst ruby-block-beg-reruby-block-beg-re40,1125
(defconst ruby-non-block-do-reruby-non-block-do-re44,1239
(defconst ruby-indent-beg-reruby-indent-beg-re48,1407
(defconst ruby-modifier-beg-keywordsruby-modifier-beg-keywords53,1642
(defconst ruby-modifier-beg-reruby-modifier-beg-re57,1776
(defconst ruby-modifier-reruby-modifier-re61,1914
(defconst ruby-block-mid-keywordsruby-block-mid-keywords65,2032
(defconst ruby-block-mid-reruby-block-mid-re69,2201
(defconst ruby-block-op-keywordsruby-block-op-keywords73,2358
(defconst ruby-block-hanging-reruby-block-hanging-re77,2453
(defconst ruby-block-end-re "\\<end\\>")ruby-block-end-re81,2606
(defconst ruby-here-doc-beg-reruby-here-doc-beg-re83,2648
(defconst ruby-here-doc-end-reruby-here-doc-end-re87,2818
(defun ruby-here-doc-end-match ()ruby-here-doc-end-match95,3121
(defun ruby-here-doc-beg-match ()ruby-here-doc-beg-match106,3464
(defconst ruby-delimiterruby-delimiter118,4028
(defconst ruby-negativeruby-negative124,4227
(defconst ruby-operator-re "[-,.+*/%&|^~=<>:]"ruby-operator-re129,4412
(defconst ruby-symbol-chars "a-zA-Z0-9_"ruby-symbol-chars132,4492
(defconst ruby-symbol-re (concat "[" ruby-symbol-chars "]")ruby-symbol-re134,4588
(defvar ruby-mode-abbrev-table nilruby-mode-abbrev-table137,4679
(define-abbrev-table 'ruby-mode-abbrev-table ())ruby-mode-abbrev-table140,4762
(defvar ruby-mode-mapruby-mode-map142,4812
(defvar ruby-mode-syntax-tableruby-mode-syntax-table161,5665
(defcustom ruby-indent-tabs-mode nilruby-indent-tabs-mode192,6820
(defcustom ruby-indent-level 2ruby-indent-level196,6954
(defcustom ruby-comment-column 32ruby-comment-column200,7053
(defcustom ruby-deep-arglist truby-deep-arglist204,7155
(defcustom ruby-deep-indent-paren '(?\( ?\[ ?\] t)ruby-deep-indent-paren209,7305
(defcustom ruby-deep-indent-paren-style 'spaceruby-deep-indent-paren-style214,7500
(defcustom ruby-encoding-map '((shift_jis . cp932) (shift-jis . cp932))ruby-encoding-map218,7619
(defcustom ruby-insert-encoding-magic-comment truby-insert-encoding-magic-comment222,7759
(defcustom ruby-use-encoding-map truby-use-encoding-map226,7912
(defun ruby-imenu-create-index-in-block (prefix beg end)ruby-imenu-create-index-in-block236,8311
(defun ruby-imenu-create-index ()ruby-imenu-create-index274,9897
(defun ruby-accurate-end-of-block (&optional end)ruby-accurate-end-of-block278,10057
(defun ruby-mode-variables ()ruby-mode-variables285,10302
(defun ruby-mode-set-encoding ()ruby-mode-set-encoding302,11234
(defun ruby-mode ()ruby-mode340,12963
(defun ruby-current-indentation ()ruby-current-indentation377,14354
(defun ruby-indent-line (&optional flag)ruby-indent-line384,14533
(defun ruby-indent-to (column)ruby-indent-to389,14689
(defun ruby-special-char-p (&optional pnt)ruby-special-char-p411,15370
(defun ruby-expr-beg (&optional option)ruby-expr-beg422,15847
(defun ruby-forward-string (term &optional end no-error expand)ruby-forward-string459,17315
(defun ruby-deep-indent-paren-p (c)ruby-deep-indent-paren-p475,17990
(defun ruby-parse-partial (&optional end in-string nest depth pcol indent)ruby-parse-partial486,18444
(defun ruby-parse-region (start end)ruby-parse-region691,26306
(defun ruby-indent-size (pos nest)ruby-indent-size709,26910
(defun ruby-calculate-indent (&optional parse-start)ruby-calculate-indent713,27064
(defun ruby-electric-brace (arg)ruby-electric-brace875,34401
(defun-region-command ruby-beginning-of-defun (&optional arg)ruby-beginning-of-defun895,35127
(defun-region-command ruby-end-of-defun (&optional arg)ruby-end-of-defun904,35499
(defun ruby-beginning-of-indent ()ruby-beginning-of-indent914,35889
(defun ruby-move-to-block (n)ruby-move-to-block923,36341
(defun-region-command ruby-beginning-of-block (&optional arg)ruby-beginning-of-block958,37554
(defun-region-command ruby-end-of-block (&optional arg)ruby-end-of-block964,37768
(defun-region-command ruby-forward-sexp (&optional arg)ruby-forward-sexp971,38036
(defun-region-command ruby-backward-sexp (&optional arg)ruby-backward-sexp1013,39987
(defun ruby-insert-end ()ruby-insert-end1059,42003
(defun ruby-mark-defun ()ruby-mark-defun1065,42103
(defun ruby-indent-exp (&optional shutup-p)ruby-indent-exp1074,42355
(defun ruby-add-log-current-method ()ruby-add-log-current-method1097,43279
(defconst ruby-font-lock-syntactic-keywordsruby-font-lock-syntactic-keywords1170,46071
(defun ruby-comment-beg-syntax ()ruby-comment-beg-syntax1210,47859
(defun ruby-in-ppss-context-p (context &optional ppss)ruby-in-ppss-context-p1223,48311
(defun ruby-in-here-doc-p ()ruby-in-here-doc-p1247,49187
(defun ruby-here-doc-find-end (&optional limit)ruby-here-doc-find-end1258,49615
(defun ruby-here-doc-beg-syntax ()ruby-here-doc-beg-syntax1286,50755
(defun ruby-here-doc-end-syntax ()ruby-here-doc-end-syntax1299,51270
(defvar ruby-font-lock-syntax-tableruby-font-lock-syntax-table1326,52574
(defconst ruby-font-lock-keywordsruby-font-lock-keywords1333,52808

vendor/rinari/util/test/ert/ert-functional.el,365
(defmacro buffer-changes-p (&rest body)buffer-changes-p39,1373
(defun buffer-contains-p (regexp &optional buffer)buffer-contains-p46,1636
(defun correctly-indented-p (filename)correctly-indented-p52,1876
(defun ert-test-buffer-substitute (string fn)ert-test-buffer-substitute64,2368
(defmacro with-test-buffer (contents &rest body)with-test-buffer79,2876

vendor/rinari/util/test/ert/ert.el,6230
(defvar ert-debug-on-error nilert-debug-on-error45,1515
(defstruct ert-testert-test51,1713
(defun ert-test-boundp (symbol)ert-test-boundp58,1861
(defun ert-get-test (symbol)ert-get-test62,1971
(defun ert-set-test (symbol definition)ert-set-test67,2134
(defun ert-make-test-unbound (symbol)ert-make-test-unbound72,2290
(defun ert-test-result-expected-p (test result)ert-test-result-expected-p77,2414
(defvar ert-find-test-regexpert-find-test-regexp81,2590
(defmacro* ert-deftest (name () &body keys-and-body)ert-deftest116,3989
(defun ert-read-test-name (prompt &optional default-value history)ert-read-test-name145,5387
(defun ert-find-test-other-window (test-name)ert-find-test-other-window152,5769
(defun ert-delete-test (test-name)ert-delete-test157,6022
(defun ert-delete-all-tests ()ert-delete-all-tests175,7029
(defun ert-select-tests (selector universe)ert-select-tests187,7321
(defun ert-insert-human-readable-selector (selector)ert-insert-human-readable-selector297,12358
(defun ert-pass ()ert-pass331,13744
(defun ert-fail (data)ert-fail335,13858
(defstruct ert-test-resultert-test-result341,14134
(defun ert-record-backtrace ()ert-record-backtrace353,14655
(defstruct ert-test-execution-infoert-test-execution-info374,15627
(defun ert-run-test-debugger (info debugger-args)ert-run-test-debugger389,16254
(defun ert-run-test-internal (ert-test-execution-info)ert-run-test-internal427,18037
(defun ert-make-marker-in-messages-buffer ()ert-make-marker-in-messages-buffer449,19087
(defun ert-force-message-log-buffer-truncation ()ert-force-message-log-buffer-truncation453,19234
(defun ert-run-test (test)ert-run-test470,19949
(defmacro* should (form &environment env)should550,23693
(defmacro* should-not (form &environment env)should-not559,24055
(defun ert-should-error-handle-error (form-description-fnert-should-error-handle-error568,24421
(defmacro* should-error (form &rest keys &key type exclude-subtypes testshould-error603,26018
(defun ert-proper-list-p (x)ert-proper-list-p645,27915
(defun ert-explain-not-equal (a b)ert-explain-not-equal657,28326
(defstruct ert-statsert-stats713,30744
(defstruct ert-ewoc-entryert-ewoc-entry737,31535
(defvar ert-results-ewoc)ert-results-ewoc758,32216
(defvar ert-results-stats)ert-results-stats760,32263
(defvar ert-results-progress-bar-string)ert-results-progress-bar-string764,32484
(defvar ert-results-progress-bar-button-begin)ert-results-progress-bar-button-begin766,32579
(defvar ert-results-listener)ert-results-listener768,32698
(defvar ert-current-run-stats nil)ert-current-run-stats772,32835
(defun ert-format-time-iso8601 (time)ert-format-time-iso8601774,32871
(defun ert-insert-test-name-button (test-name)ert-insert-test-name-button778,33037
(defun ert-results-update-ewoc-hf (ewoc stats)ert-results-update-ewoc-hf783,33230
(defun ert-results-update-stats-display (ewoc stats)ert-results-update-stats-display875,37230
(defun ert-char-for-test-result (result expectedp)ert-char-for-test-result881,37429
(defun ert-string-for-test-result (result expectedp)ert-string-for-test-result894,37811
(defun ert-tests-running-mode-line-indicator ()ert-tests-running-mode-line-indicator903,38112
(defun ert-pp-with-indentation-and-newline (object)ert-pp-with-indentation-and-newline922,39017
(defun ert-print-test-for-ewoc (entry)ert-print-test-for-ewoc932,39336
(defun ert-setup-results-buffer (stats listener buffer-name)ert-setup-results-buffer976,41435
(defun ert-run-or-rerun-test (stats test listener)ert-run-or-rerun-test998,42426
(defun ert-run-tests (selector listener)ert-run-tests1049,44959
(defun ert-stats-test-index (stats test)ert-stats-test-index1081,46478
(defvar ert-selector-history nilert-selector-history1085,46653
(defun ert-run-tests-interactively (selectorert-run-tests-interactively1092,46939
(defalias 'ert 'ert-run-tests-interactively)ert1180,51578
(defvar ert-batch-backtrace-right-margin 70ert-batch-backtrace-right-margin1182,51624
(defun ert-run-tests-batch (selector)ert-run-tests-batch1185,51749
(define-derived-mode ert-results-mode fundamental-mode "ERT-Results"ert-results-mode1270,55728
(define-button-type 'ert-results-progress-bar-buttonert-results-progress-bar-button1288,56478
(define-button-type 'ert-test-name-buttonert-test-name-button1292,56632
(define-button-type 'ert-results-expand-collapse-buttonert-results-expand-collapse-button1296,56766
(defun ert-results-test-node-or-null-at-point ()ert-results-test-node-or-null-at-point1300,56935
(defun ert-results-test-node-at-point ()ert-results-test-node-at-point1314,57480
(defun ert-results-expand-collapse-button-action (button)ert-results-expand-collapse-button-action1321,57719
(defun ert-results-find-test-at-point-other-window ()ert-results-find-test-at-point-other-window1332,58172
(defun ert-test-name-button-action (button)ert-test-name-button-action1343,58551
(defun ert-ewoc-position (ewoc node)ert-ewoc-position1348,58761
(defun ert-results-jump-between-summary-and-result ()ert-results-jump-between-summary-and-result1356,59060
(defun ert-button-action-position ()ert-button-action-position1388,60622
(defun ert-results-progress-bar-button-action (button)ert-results-progress-bar-button-action1396,60905
(defun ert-results-rerun-test-at-point ()ert-results-rerun-test-at-point1401,61135
(defun ert-results-rerun-test-at-point-debugging-errors ()ert-results-rerun-test-at-point-debugging-errors1439,62780
(defun ert-print-backtrace (backtrace)ert-print-backtrace1447,63034
(defun ert-results-pop-to-backtrace-for-test-at-point ()ert-results-pop-to-backtrace-for-test-at-point1473,63976
(defun ert-results-pop-to-messages-for-test-at-point ()ert-results-pop-to-messages-for-test-at-point1503,65182
(defun ert-results-toggle-printer-limits-for-test-at-point ()ert-results-toggle-printer-limits-for-test-at-point1525,66008
(defun ert-activate-font-lock-keywords ()ert-activate-font-lock-keywords1537,66471
(defun* ert-remove-from-list (list-var element &key key test)ert-remove-from-list1544,66685
(defun ert-unload-function ()ert-unload-function1566,67467
(defvar ert-unload-hook '())ert-unload-hook1573,67786

vendor/rinari/util/test/ert/test/badly-indented.el,0

vendor/rinari/util/test/ert/test/ert-selftests.el,278
(defvar ert-test-rootert-test-root6,134
(defvar ert-test-body-was-run nil)ert-test-body-was-run18,406
(defmacro ert-test-my-list (&rest args)ert-test-my-list282,12420
(defun ert-call-with-temporary-messages-buffer (thunk)ert-call-with-temporary-messages-buffer321,14125

vendor/rinari/util/test/ert/test/well-indented.el,0

vendor/rinari/util/test/ruby-mode-test.el,132
(defmacro with-ruby-buffer (contents &rest body)with-ruby-buffer8,204
(defmacro test-here-doc-p (contents)test-here-doc-p15,429

vendor/ruby-complexity/ruby-complexity.el,1552
(defconst ruby-complexity-version "0.1")ruby-complexity-version45,1415
(defvar complexity-bad-score 30complexity-bad-score47,1457
(defvar complexity-good-score 15complexity-good-score50,1596
(defvar complexity-last-change 0 "Time last change to some ruby buffer happened.")complexity-last-change55,1737
(defvar complexity-data nil "Calcuated code complexity information for this buffer.")complexity-data56,1820
(defgroup ruby-complexity nilruby-complexity59,1953
(defface ruby-complexity-complexity-lowruby-complexity-complexity-low63,2062
(defface ruby-complexity-complexity-normalruby-complexity-complexity-normal68,2193
(defface ruby-complexity-complexity-highruby-complexity-complexity-high73,2327
(defcustom ruby-complexity-delay 20ruby-complexity-delay78,2460
(defcustom ruby-complexity-ruby "ruby"ruby-complexity-ruby83,2596
(defcustom ruby-complexity-scriptruby-complexity-script88,2747
(define-minor-mode ruby-complexity-moderuby-complexity-mode96,2989
(defun ruby-complexity-get-complexity (line data)ruby-complexity-get-complexity108,3548
(defun ruby-complexity-line-format (line)ruby-complexity-line-format124,4416
(defun ruby-complexity-make-buffer-copy ()ruby-complexity-make-buffer-copy131,4682
(defun ruby-complexity-get-raw-complexity-data (file-name)ruby-complexity-get-raw-complexity-data138,4977
(defun ruby-complexity-on-change-force (&optional beg end len)ruby-complexity-on-change-force144,5245
(defun ruby-complexity-on-change (&optional beg end len force)ruby-complexity-on-change149,5493

vendor/ruby-complexity/ruby-complexity.rb,19
def runrun18,322

vendor/rvm.el,1380
(defcustom rvm-executablervm-executable26,969
(defcustom rvm-configuration-file-namervm-configuration-file-name32,1105
(defvar rvm--gemset-default "*default*"rvm--gemset-default38,1219
(defvar rvm--gemset-separator "@"rvm--gemset-separator41,1305
(defvar rvm--current-ruby-binary-path nilrvm--current-ruby-binary-path44,1404
(defvar rvm--current-gem-binary-path nilrvm--current-gem-binary-path48,1570
(defun rvm-use-default ()rvm-use-default52,1740
(defun rvm-activate-corresponding-ruby ()rvm-activate-corresponding-ruby57,1893
(defun rvm-use (new-ruby new-gemset)rvm-use67,2387
(defun rvm-autodetect-ruby ()rvm-autodetect-ruby80,3122
(defun rvm-autodetect-ruby-stop ()rvm-autodetect-ruby-stop85,3291
(defun rvm/list (&optional default-ruby)rvm/list90,3471
(defun rvm/gemset-list (ruby-version)rvm/gemset-list105,4155
(defun rvm/info (&optional ruby-version)rvm/info115,4633
(defun rvm--change-path (current-binary-var new-binary)rvm--change-path126,5052
(defun rvm--set-ruby (ruby-binary)rvm--set-ruby139,5650
(defun rvm--rvmrc-locate (&optional path)rvm--rvmrc-locate142,5751
(defun rvm--rvmrc-read-version (path-to-rvmrc)rvm--rvmrc-read-version152,6212
(defun rvm--set-gemhome (gemhome gemset)rvm--set-gemhome161,6513
(defun rvm--ruby-default ()rvm--ruby-default177,7264
(defun rvm--call-process (&rest args)rvm--call-process180,7315

vendor/sass-mode.el,1082
(defgroup sass nilsass30,692
(defcustom sass-mode-hook nilsass-mode-hook35,795
(defcustom sass-indent-offset 2sass-indent-offset40,894
(defvar sass-non-block-openerssass-non-block-openers45,1007
(defconst sass-selector-font-lock-keywordssass-selector-font-lock-keywords54,1300
(defconst sass-script-font-lock-keywordssass-script-font-lock-keywords65,1827
(defconst sass-syntax-tablesass-syntax-table76,2332
(defconst sass-script-syntax-tablesass-script-syntax-table82,2476
(defconst sass-font-lock-keywordssass-font-lock-keywords87,2609
(defconst sass-line-keywordssass-line-keywords90,2684
(defun sass-highlight-line (limit)sass-highlight-line108,3684
(defun sass-highlight-selector ()sass-highlight-selector127,4474
(defun sass-highlight-script (beg end)sass-highlight-script135,4758
(defun sass-highlight-script-after-match ()sass-highlight-script-after-match144,5117
(defun sass-highlight-directive ()sass-highlight-directive149,5287
(define-derived-mode sass-mode haml-mode "Sass"sass-mode182,6461
(defun sass-indent-p ()sass-indent-p195,6984

vendor/tabbar.el,11154
(defconst tabbar-version "2.0")tabbar-version11,310
(defgroup tabbar niltabbar193,8303
(defcustom tabbar-cycle-scope niltabbar-cycle-scope197,8390
(defcustom tabbar-auto-scroll-flag ttabbar-auto-scroll-flag213,8922
(defvar tabbar-inhibit-functions '(tabbar-default-inhibit-function)tabbar-inhibit-functions221,9194
(defvar tabbar-current-tabset-function niltabbar-current-tabset-function227,9474
(defvar tabbar-tab-label-function niltabbar-tab-label-function231,9633
(defvar tabbar-select-tab-function niltabbar-select-tab-function235,9794
(defvar tabbar-help-on-tab-function niltabbar-help-on-tab-function240,9952
(defvar tabbar-button-label-function niltabbar-button-label-function246,10187
(defvar tabbar-home-function niltabbar-home-function251,10381
(defvar tabbar-home-help-function niltabbar-home-help-function255,10527
(defvar tabbar-scroll-left-function 'tabbar-scroll-lefttabbar-scroll-left-function260,10739
(defvar tabbar-scroll-left-help-function 'tabbar-scroll-left-helptabbar-scroll-left-help-function265,10965
(defvar tabbar-scroll-right-function 'tabbar-scroll-righttabbar-scroll-right-function270,11204
(defvar tabbar-scroll-right-help-function 'tabbar-scroll-right-helptabbar-scroll-right-help-function275,11434
(defsubst tabbar-click-p (event)tabbar-click-p288,11878
(defun tabbar-shorten (str width)tabbar-shorten292,12005
(defsubst tabbar-make-tab (object tabset)tabbar-make-tab338,13586
(defsubst tabbar-tab-value (tab)tabbar-tab-value343,13735
(defsubst tabbar-tab-tabset (tab)tabbar-tab-tabset347,13815
(defvar tabbar-tabsets niltabbar-tabsets351,13902
(defvar tabbar-tabsets-tabset niltabbar-tabsets-tabset354,13955
(defvar tabbar-current-tabset niltabbar-current-tabset357,14037
(defvar tabbar-init-hook niltabbar-init-hook361,14177
(defsubst tabbar-init-tabsets-store ()tabbar-init-tabsets-store365,14317
(defvar tabbar-quit-hook niltabbar-quit-hook372,14574
(defsubst tabbar-free-tabsets-store ()tabbar-free-tabsets-store376,14703
(defun tabbar-make-tabset (name &rest objects)tabbar-make-tabset399,15522
(defsubst tabbar-get-tabset (name)tabbar-get-tabset411,15964
(defsubst tabbar-delete-tabset (tabset)tabbar-delete-tabset416,16116
(defsubst tabbar-tabs (tabset)tabbar-tabs421,16268
(defsubst tabbar-tab-values (tabset)tabbar-tab-values425,16364
(defsubst tabbar-get-tab (object tabset)tabbar-get-tab429,16498
(defsubst tabbar-member (tab tabset)tabbar-member434,16672
(defsubst tabbar-template (tabset)tabbar-template439,16832
(defsubst tabbar-set-template (tabset template)tabbar-set-template445,17021
(defsubst tabbar-selected-tab (tabset)tabbar-selected-tab451,17254
(defsubst tabbar-selected-value (tabset)tabbar-selected-value455,17357
(defsubst tabbar-selected-p (tab tabset)tabbar-selected-p459,17502
(defvar tabbar--track-selected nil)tabbar--track-selected463,17642
(defsubst tabbar-select-tab (tab tabset)tabbar-select-tab465,17679
(defsubst tabbar-select-tab-value (object tabset)tabbar-select-tab-value475,18051
(defsubst tabbar-start (tabset)tabbar-start481,18348
(defsubst tabbar-view (tabset)tabbar-view485,18461
(defun tabbar-add-tab (tabset object &optional append)tabbar-add-tab490,18660
(defun tabbar-delete-tab (tab)tabbar-delete-tab504,19246
(defun tabbar-scroll (tabset count)tabbar-scroll517,19771
(defun tabbar-tab-next (tabset tab &optional before)tabbar-tab-next527,20188
(defun tabbar-current-tabset (&optional update)tabbar-current-tabset537,20594
(defun tabbar-get-tabsets-tabset ()tabbar-get-tabsets-tabset547,21024
(defface tabbar-defaulttabbar-default556,21326
(defface tabbar-unselectedtabbar-unselected591,22129
(defface tabbar-selectedtabbar-selected599,22318
(defface tabbar-highlighttabbar-highlight608,22529
(defface tabbar-separatortabbar-separator615,22660
(defface tabbar-buttontabbar-button623,22809
(defface tabbar-button-highlighttabbar-button-highlight632,23022
(defcustom tabbar-background-color niltabbar-background-color639,23174
(defsubst tabbar-background-color ()tabbar-background-color648,23508
(defconst tabbar-button-widgettabbar-button-widget661,23942
(defvar tabbar-home-button-value niltabbar-home-button-value688,24952
(defconst tabbar-home-button-enabled-imagetabbar-home-button-enabled-image691,25021
(defconst tabbar-home-button-disabled-imagetabbar-home-button-disabled-image706,25778
(defcustom tabbar-home-buttontabbar-home-button721,26549
(defvar tabbar-scroll-left-button-value niltabbar-scroll-left-button-value735,27023
(defconst tabbar-scroll-left-button-enabled-imagetabbar-scroll-left-button-enabled-image738,27106
(defcustom tabbar-scroll-left-buttontabbar-scroll-left-button754,27950
(defvar tabbar-scroll-right-button-value niltabbar-scroll-right-button-value768,28421
(defconst tabbar-scroll-right-button-enabled-imagetabbar-scroll-right-button-enabled-image771,28506
(defcustom tabbar-scroll-right-buttontabbar-scroll-right-button787,29361
(defconst tabbar-separator-widgettabbar-separator-widget801,29826
(defvar tabbar-separator-value niltabbar-separator-value815,30429
(defcustom tabbar-separator (list 0.2)tabbar-separator818,30512
(defcustom tabbar-use-images ttabbar-use-images830,30892
(defsubst tabbar-find-image (specs)tabbar-find-image843,31388
(defsubst tabbar-disable-image (image)tabbar-disable-image851,31680
(defsubst tabbar-normalize-image (image &optional margin)tabbar-normalize-image857,31886
(defun tabbar-make-mouse-keymap (callback)tabbar-make-mouse-keymap874,32482
(defsubst tabbar-make-mouse-event (&optional type)tabbar-make-mouse-event887,33082
(defconst tabbar-default-button-keymaptabbar-default-button-keymap900,33512
(defun tabbar-help-on-button (window object position)tabbar-help-on-button904,33645
(defsubst tabbar-click-on-button (name &optional type)tabbar-click-on-button918,34293
(defun tabbar-select-button-callback (event)tabbar-select-button-callback929,34792
(defun tabbar-make-button-keymap (name)tabbar-make-button-keymap939,35162
(defun tabbar-scroll-left (event)tabbar-scroll-left952,35582
(defun tabbar-scroll-left-help ()tabbar-scroll-left-help957,35765
(defun tabbar-scroll-right (event)tabbar-scroll-right961,35897
(defun tabbar-scroll-right-help ()tabbar-scroll-right-help966,36081
(defconst tabbar-default-tab-keymaptabbar-default-tab-keymap972,36228
(defun tabbar-help-on-tab (window object position)tabbar-help-on-tab976,36352
(defsubst tabbar-click-on-tab (tab &optional type)tabbar-click-on-tab986,36827
(defun tabbar-select-tab-callback (event)tabbar-select-tab-callback997,37279
(defun tabbar-make-tab-keymap (tab)tabbar-make-tab-keymap1007,37631
(defun tabbar-button-label (name)tabbar-button-label1020,38037
(defun tabbar-line-button (name)tabbar-line-button1041,38914
(defun tabbar-line-separator ()tabbar-line-separator1063,39872
(defsubst tabbar-line-buttons (tabset)tabbar-line-buttons1088,40876
(defsubst tabbar-line-tab (tab)tabbar-line-tab1104,41472
(defun tabbar-line-format (tabset)tabbar-line-format1123,42200
(defun tabbar-line ()tabbar-line1186,44680
(defconst tabbar-header-line-format '(:eval (tabbar-line))tabbar-header-line-format1199,45216
(defun tabbar-default-inhibit-function ()tabbar-default-inhibit-function1202,45313
(defun tabbar-cycle (&optional backward type)tabbar-cycle1214,45765
(defun tabbar-backward ()tabbar-backward1271,48225
(defun tabbar-forward ()tabbar-forward1278,48400
(defun tabbar-backward-group ()tabbar-backward-group1285,48568
(defun tabbar-forward-group ()tabbar-forward-group1292,48749
(defun tabbar-backward-tab ()tabbar-backward-tab1299,48923
(defun tabbar-forward-tab ()tabbar-forward-tab1306,49081
(defsubst tabbar--mouse (number)tabbar--mouse1314,49247
(defun tabbar-press-home (&optional arg)tabbar-press-home1323,49520
(defun tabbar-press-scroll-left (&optional arg)tabbar-press-scroll-left1332,49858
(defun tabbar-press-scroll-right (&optional arg)tabbar-press-scroll-right1341,50217
(defconst tabbar--mwheel-up-eventtabbar--mwheel-up-event1355,50632
(defconst tabbar--mwheel-down-eventtabbar--mwheel-down-event1360,50804
(defsubst tabbar--mwheel-key (event-type)tabbar--mwheel-key1365,50984
(defsubst tabbar--mwheel-up-p (event)tabbar--mwheel-up-p1373,51273
(defun tabbar-mwheel-backward (event)tabbar-mwheel-backward1384,51586
(defun tabbar-mwheel-forward (event)tabbar-mwheel-forward1392,51839
(defun tabbar-mwheel-backward-group (event)tabbar-mwheel-backward-group1400,52088
(defun tabbar-mwheel-forward-group (event)tabbar-mwheel-forward-group1410,52472
(defun tabbar-mwheel-backward-tab (event)tabbar-mwheel-backward-tab1420,52848
(defun tabbar-mwheel-forward-tab (event)tabbar-mwheel-forward-tab1429,53146
(defun tabbar-mwheel-switch-tab (event)tabbar-mwheel-switch-tab1440,53505
(defun tabbar-mwheel-switch-group (event)tabbar-mwheel-switch-group1448,53753
(defsubst tabbar-mode-on-p ()tabbar-mode-on-p1457,54022
(defvar tabbar--local-hlf nil)tabbar--local-hlf1464,54195
(define-minor-mode tabbar-local-modetabbar-local-mode1467,54242
(defvar tabbar-prefix-key [(control ?c)]tabbar-prefix-key1505,55849
(defvar tabbar-prefix-maptabbar-prefix-map1508,55939
(defvar tabbar-mode-maptabbar-mode-map1521,56529
(defvar tabbar--global-hlf nil)tabbar--global-hlf1527,56689
(define-minor-mode tabbar-modetabbar-mode1530,56737
(defvar tabbar-mwheel-mode-maptabbar-mwheel-mode-map1564,57838
(define-minor-mode tabbar-mwheel-modetabbar-mwheel-mode1590,58855
(defun tabbar-mwheel-follow ()tabbar-mwheel-follow1604,59287
(defgroup tabbar-buffer niltabbar-buffer1613,59586
(defcustom tabbar-buffer-home-buttontabbar-buffer-home-button1617,59669
(defvar tabbar-buffer-list-function 'tabbar-buffer-listtabbar-buffer-list-function1632,60314
(defvar tabbar-buffer-groups-function 'tabbar-buffer-groupstabbar-buffer-groups-function1637,60512
(defun tabbar-buffer-list ()tabbar-buffer-list1642,60780
(defun tabbar-buffer-mode-derived-p (mode parents)tabbar-buffer-mode-derived-p1656,61350
(defun tabbar-buffer-groups ()tabbar-buffer-groups1665,61639
(defvar tabbar--buffers nil)tabbar--buffers1708,63021
(defun tabbar-buffer-update-groups ()tabbar-buffer-update-groups1710,63051
(defvar tabbar--buffer-show-groups nil)tabbar--buffer-show-groups1761,65336
(defsubst tabbar-buffer-show-groups (flag)tabbar-buffer-show-groups1763,65377
(defun tabbar-buffer-tabs ()tabbar-buffer-tabs1769,65593
(defun tabbar-buffer-button-label (name)tabbar-buffer-button-label1778,65964
(defun tabbar-buffer-tab-label (tab)tabbar-buffer-tab-label1806,67242
(defun tabbar-buffer-help-on-tab (tab)tabbar-buffer-help-on-tab1822,67920
(defun tabbar-buffer-select-tab (event tab)tabbar-buffer-select-tab1834,68425
(defun tabbar-buffer-click-on-home (event)tabbar-buffer-click-on-home1849,68840
(defun tabbar-buffer-help-on-home ()tabbar-buffer-help-on-home1861,69264
(defun tabbar-buffer-track-killed ()tabbar-buffer-track-killed1869,69545
(defun tabbar-buffer-init ()tabbar-buffer-init1895,70667
(defun tabbar-buffer-quit ()tabbar-buffer-quit1910,71324

vendor/yasnippet/dropdown-list.el,1097
(defface dropdown-list-facedropdown-list-face64,2233
(defface dropdown-list-selection-facedropdown-list-selection-face68,2367
(defvar dropdown-list-overlays nil)dropdown-list-overlays72,2497
(defun dropdown-list-hide ()dropdown-list-hide74,2534
(defun dropdown-list-put-overlay (beg end &optional prop value prop2 value2)dropdown-list-put-overlay78,2648
(defun dropdown-list-line (start replacement &optional no-insert)dropdown-list-line86,2902
(defun dropdown-list-start-column (display-width)dropdown-list-start-column118,4387
(defun dropdown-list-move-to-start-line (candidate-count)dropdown-list-move-to-start-line126,4724
(defun dropdown-list-at-point (candidates &optional selidx)dropdown-list-at-point140,5321
(defun dropdown-list (candidates)dropdown-list167,6694
(defun define-key* (keymap key command)define-key*206,8563
(defun combine-command (command defs)combine-command211,8810
(defvar command-selector-last-command nil "$$$$$ FIXME - no doc string")command-selector-last-command225,9338
(defun command-selector (&rest candidates)command-selector227,9412

vendor/yasnippet/yasnippet.el,14658
(defgroup yasnippet nilyasnippet149,5307
(defcustom yas/root-directory nilyas/root-directory154,5400
(defcustom yas/prompt-functions '(yas/x-promptyas/prompt-functions174,6250
(defcustom yas/indent-line 'autoyas/indent-line205,7254
(defcustom yas/also-auto-indent-first-line nilyas/also-auto-indent-first-line222,7815
(defcustom yas/snippet-revival tyas/snippet-revival229,8029
(defcustom yas/trigger-key "TAB"yas/trigger-key234,8163
(defcustom yas/next-field-key '("TAB" "<tab>")yas/next-field-key250,8785
(defcustom yas/prev-field-key '("<backtab>" "<S-tab>")yas/prev-field-key266,9342
(defcustom yas/skip-and-clear-key "C-d"yas/skip-and-clear-key281,9899
(defcustom yas/triggers-in-field nilyas/triggers-in-field296,10422
(defcustom yas/fallback-behavior 'call-other-commandyas/fallback-behavior304,10640
(defcustom yas/choose-keys-first nilyas/choose-keys-first321,11335
(defcustom yas/choose-tables-first nilyas/choose-tables-first330,11592
(defcustom yas/use-menu 'real-modesyas/use-menu340,11894
(defcustom yas/trigger-symbol " =>"yas/trigger-symbol358,12510
(defcustom yas/wrap-around-region nilyas/wrap-around-region363,12649
(defcustom yas/good-grace tyas/good-grace371,12897
(defcustom yas/ignore-filenames-as-triggers nilyas/ignore-filenames-as-triggers378,13081
(defcustom yas/visit-from-menu nilyas/visit-from-menu386,13304
(defface yas/field-highlight-faceyas/field-highlight-face393,13512
(defface yas/field-debug-faceyas/field-debug-face399,13743
(defun yas/define-some-keys (keys keymap definition)yas/define-some-keys407,13970
(defvar yas/keymapyas/keymap414,14250
(defvar yas/key-syntaxes (list "w" "w_" "w_." "^ ")yas/key-syntaxes425,14740
(defvar yas/after-exit-snippet-hookyas/after-exit-snippet-hook434,15060
(defvar yas/before-expand-snippet-hookyas/before-expand-snippet-hook447,15415
(defvar yas/buffer-local-conditionyas/buffer-local-condition451,15512
(defvar yas/version "0.6.1b")yas/version518,17776
(defvar yas/menu-table (make-hash-table)yas/menu-table520,17807
(defvar yas/active-keybindings nilyas/active-keybindings523,17906
(defvar yas/known-modesyas/known-modes526,18007
(defvar yas/escaped-charactersyas/escaped-characters530,18133
(defconst yas/field-regexpyas/field-regexp534,18245
(defconst yas/multi-dollar-lisp-expression-regexpyas/multi-dollar-lisp-expression-regexp538,18351
(defconst yas/backquote-lisp-expression-regexpyas/backquote-lisp-expression-regexp542,18491
(defconst yas/transform-mirror-regexpyas/transform-mirror-regexp546,18621
(defconst yas/simple-mirror-regexpyas/simple-mirror-regexp550,18773
(defvar yas/snippet-id-seed 0yas/snippet-id-seed554,18871
(defun yas/snippet-next-id ()yas/snippet-next-id557,18943
(defvar last-buffer-undo-list nil)last-buffer-undo-list567,19209
(defvar yas/minor-mode-menu nilyas/minor-mode-menu569,19245
(defun yas/init-minor-keymap ()yas/init-minor-keymap572,19308
(defvar yas/minor-mode-map (yas/init-minor-keymap)yas/minor-mode-map696,25901
(defun yas/trigger-key-reload (&optional unbind-key)yas/trigger-key-reload699,26007
(define-minor-mode yas/minor-modeyas/minor-mode714,26591
(defvar yas/dont-activate #'(lambda ()yas/dont-activate740,27376
(defun yas/minor-mode-on ()yas/minor-mode-on751,27798
(defun yas/minor-mode-off ()yas/minor-mode-off763,28211
(define-globalized-minor-mode yas/global-mode yas/minor-mode yas/minor-mode-onyas/global-mode768,28315
(defvar yas/font-lock-keywordsyas/font-lock-keywords775,28522
(defun yas/init-major-keymap ()yas/init-major-keymap792,29147
(defvar snippet-mode-mapsnippet-mode-map807,29735
(define-derived-mode snippet-mode text-mode "Snippet"snippet-mode812,29839
(defvar yas/snippet-tables (make-hash-table)yas/snippet-tables832,30470
(defvar yas/better-guess-for-replacements nilyas/better-guess-for-replacements860,31341
(defun yas/store (table name key template)yas/store863,31451
(defun yas/fetch (table key)yas/fetch908,33581
(defun yas/eval-condition (condition)yas/eval-condition923,34006
(defun yas/filter-templates-by-condition (templates)yas/filter-templates-by-condition935,34345
(defun yas/require-template-specific-condition-p ()yas/require-template-specific-condition-p950,34977
(defun yas/template-can-expand-p (condition &optional requirement)yas/template-can-expand-p966,35691
(defun yas/snippet-table-get-all-parents (table)yas/snippet-table-get-all-parents983,36441
(defun yas/snippet-table-templates (table)yas/snippet-table-templates989,36667
(defun yas/current-key ()yas/current-key999,37043
(defun yas/snippet-table-all-keys (table)yas/snippet-table-all-keys1026,37834
(defun yas/real-mode? (mode)yas/real-mode?1039,38204
(defun yas/read-and-eval-string (string)yas/read-and-eval-string1048,38589
(defvar yas/mode-symbol nilyas/mode-symbol1070,39571
(defun yas/snippet-table-get-create (mode)yas/snippet-table-get-create1074,39715
(defun yas/get-snippet-tables (&optional mode-symbol dont-search-parents)yas/get-snippet-tables1087,40178
(defun yas/menu-keymap-get-create (mode)yas/menu-keymap-get-create1116,41423
(defun yas/parse-template (&optional file)yas/parse-template1124,41720
(defun yas/calculate-group (file)yas/calculate-group1190,44076
(defun yas/subdirs (directory &optional file?)yas/subdirs1235,46129
(defun yas/make-menu-binding (template)yas/make-menu-binding1247,46647
(defun yas/expand-or-visit-from-menu (template)yas/expand-or-visit-from-menu1250,46760
(defun yas/prompt-for-template (templates &optional prompt)yas/prompt-for-template1263,47254
(defun yas/prompt-for-keys (keys &optional prompt)yas/prompt-for-keys1274,47630
(defun yas/prompt-for-table (tables &optional prompt)yas/prompt-for-table1281,47884
(defun yas/x-prompt (prompt choices &optional display-fn)yas/x-prompt1289,48158
(defun yas/ido-prompt (prompt choices &optional display-fn)yas/ido-prompt1311,49184
(defun yas/dropdown-prompt (prompt choices &optional display-fn)yas/dropdown-prompt1328,49975
(defun yas/completing-prompt (prompt choices &optional display-fn)yas/completing-prompt1338,50399
(defun yas/no-prompt (prompt choices &optional display-fn)yas/no-prompt1352,51045
(defun yas/load-directory-1 (directory &optional parents no-hierarchy-parents making-groups-sym)yas/load-directory-11358,51219
(defun yas/load-directory (directory)yas/load-directory1392,53148
(defun yas/kill-snippet-keybindings ()yas/kill-snippet-keybindings1409,53807
(defun yas/reload-all (&optional reset-root-directory)yas/reload-all1416,54069
(defun yas/quote-string (string)yas/quote-string1461,55559
(defun yas/initialize ()yas/initialize1473,55944
(defun yas/compile-bundleyas/compile-bundle1477,56058
(defun yas/compile-textmate-bundle ()yas/compile-textmate-bundle1584,60923
(defun yas/about ()yas/about1598,61455
(defun yas/define-snippets (mode snippets &optional parent-mode)yas/define-snippets1604,61655
(defun yas/show-menu-p (mode)yas/show-menu-p1763,68746
(defun yas/delete-from-keymap (keymap name)yas/delete-from-keymap1774,69093
(defun yas/define (mode key template &optional name condition group)yas/define1809,70817
(defun yas/hippie-try-expand (first-time?)yas/hippie-try-expand1819,71295
(defun yas/expand ()yas/expand1828,71554
(defun yas/expand-1 (&optional field)yas/expand-11836,71745
(defun yas/all-templates (tables)yas/all-templates1887,74286
(defun yas/insert-snippet (&optional no-condition)yas/insert-snippet1904,74959
(defun yas/visit-snippet-file ()yas/visit-snippet-file1929,76110
(defun yas/visit-snippet-file-1 (template)yas/visit-snippet-file-11946,76840
(defun yas/guess-snippet-directories-1 (table &optional suffix)yas/guess-snippet-directories-11956,77201
(defun yas/guess-snippet-directories ()yas/guess-snippet-directories1967,77652
(defun yas/make-directory-maybe (table-and-dirs &optional main-table-string)yas/make-directory-maybe1996,78893
(defun yas/new-snippet (&optional choose-instead-of-guess)yas/new-snippet2014,79904
(defun yas/find-snippets (&optional same-window )yas/find-snippets2062,82132
(defun yas/compute-major-mode-and-parents (file &optional prompt-if-failed no-hierarchy-parents)yas/compute-major-mode-and-parents2106,84050
(defun yas/load-snippet-buffer (&optional kill)yas/load-snippet-buffer2136,85874
(defun yas/tryout-snippet (&optional debug)yas/tryout-snippet2163,87117
(defvar yas/modified-p nilyas/modified-p2199,88849
(defvar yas/moving-away-p nilyas/moving-away-p2202,88944
(defvar yas/text nilyas/text2205,89020
(defun yas/substr (str pattern &optional subexp)yas/substr2208,89076
(defun yas/choose-value (possibilities)yas/choose-value2219,89445
(defun yas/key-to-value (alist)yas/key-to-value2227,89725
(defun yas/throw (text)yas/throw2236,90034
(defun yas/verify-value (possibilities)yas/verify-value2240,90163
(defun yas/field-value (number)yas/field-value2247,90457
(defun yas/default-from-field (number)yas/default-from-field2254,90692
(defun yas/inside-string ()yas/inside-string2258,90788
(defvar yas/active-field-overlay nilyas/active-field-overlay2265,90997
(defvar yas/field-protection-overlays nilyas/field-protection-overlays2268,91077
(defconst yas/prefix nilyas/prefix2271,91172
(defvar yas/deleted-text nilyas/deleted-text2274,91259
(defvar yas/selected-text nilyas/selected-text2277,91342
(defvar yas/start-column nilyas/start-column2280,91437
(defun yas/apply-transform (field-or-mirror field)yas/apply-transform2321,92437
(defsubst yas/replace-all (from to &optional text)yas/replace-all2340,93355
(defun yas/snippet-find-field (snippet number)yas/snippet-find-field2350,93679
(defun yas/snippet-sort-fields (snippet)yas/snippet-sort-fields2355,93851
(defun yas/snippet-field-compare (field1 field2)yas/snippet-field-compare2362,94127
(defun yas/field-probably-deleted-p (snippet field)yas/field-probably-deleted-p2377,94599
(defun yas/snippets-at-point (&optional all-snippets)yas/snippets-at-point2384,94976
(defun yas/next-field-or-maybe-expand ()yas/next-field-or-maybe-expand2396,95539
(defun yas/next-field (&optional arg)yas/next-field2408,95970
(defun yas/place-overlays (snippet field)yas/place-overlays2440,97433
(defun yas/move-to-field (snippet field)yas/move-to-field2445,97637
(defun yas/prev-field ()yas/prev-field2460,98228
(defun yas/abort-snippet (&optional snippet)yas/abort-snippet2465,98357
(defun yas/exit-snippet (snippet)yas/exit-snippet2472,98571
(defun yas/exit-all-snippets ()yas/exit-all-snippets2480,98875
(defun yas/markers-to-points (snippet)yas/markers-to-points2502,99578
(defun yas/points-to-markers (snippet)yas/points-to-markers2526,100922
(defun yas/commit-snippet (snippet &optional no-hooks)yas/commit-snippet2544,102065
(defun yas/check-commit-snippet ()yas/check-commit-snippet2603,104231
(defun yas/field-contains-point-p (field &optional point)yas/field-contains-point-p2632,105616
(defun yas/field-text-for-display (field)yas/field-text-for-display2638,105819
(defun yas/undo-in-progress ()yas/undo-in-progress2642,105989
(defun yas/make-control-overlay (snippet start end)yas/make-control-overlay2648,106151
(defun yas/skip-and-clear-or-delete-char (&optional field)yas/skip-and-clear-or-delete-char2660,106569
(defun yas/skip-and-clear (field)yas/skip-and-clear2677,107271
(defun yas/make-move-active-field-overlay (snippet field)yas/make-move-active-field-overlay2682,107475
(defun yas/on-field-overlay-modification (overlay after? beg end &optional length)yas/on-field-overlay-modification2704,108565
(defun yas/make-move-field-protection-overlays (snippet field)yas/make-move-field-protection-overlays2746,110510
(defvar yas/protection-violation nilyas/protection-violation2778,111990
(defun yas/on-protection-overlay-modification (overlay after? beg end &optional length)yas/on-protection-overlay-modification2786,112288
(defun yas/expand-snippet (template &optional start end expand-env)yas/expand-snippet2821,113743
(defun yas/take-care-of-redo (beg end snippet)yas/take-care-of-redo2908,117343
(defun yas/snippet-revive (beg end snippet)yas/snippet-revive2918,117682
(defun yas/snippet-create (begin end)yas/snippet-create2948,118856
(defun yas/fom-start (fom)yas/fom-start2990,120302
(defun yas/fom-end (fom)yas/fom-end2998,120495
(defun yas/fom-next (fom)yas/fom-next3006,120682
(defun yas/calculate-adjacencies (snippet)yas/calculate-adjacencies3014,120870
(defun yas/advance-end-maybe (fom newend)yas/advance-end-maybe3044,122198
(defun yas/advance-start-maybe (fom newstart)yas/advance-start-maybe3060,122732
(defvar yas/dollar-regions nilyas/dollar-regions3068,123032
(defun yas/snippet-parse-create (snippet)yas/snippet-parse-create3072,123156
(defun yas/indent-according-to-mode (snippet-markers)yas/indent-according-to-mode3123,124624
(defun yas/indent (snippet)yas/indent3160,126160
(defun yas/collect-snippet-markers (snippet)yas/collect-snippet-markers3188,127408
(defun yas/real-line-beginning ()yas/real-line-beginning3203,128025
(defun yas/escape-string (escaped)yas/escape-string3212,128259
(defun yas/protect-escapes (&optional text escaped)yas/protect-escapes3215,128356
(defun yas/restore-escapes (&optional text escaped)yas/restore-escapes3229,128944
(defun yas/replace-backquotes ()yas/replace-backquotes3243,129522
(defun yas/scan-sexps (from count)yas/scan-sexps3252,129946
(defun yas/make-marker (pos)yas/make-marker3259,130109
(defun yas/field-parse-create (snippet &optional parent-field)yas/field-parse-create3265,130306
(defun yas/transform-mirror-parse-create (snippet)yas/transform-mirror-parse-create3330,133769
(defun yas/simple-mirror-parse-create (snippet)yas/simple-mirror-parse-create3348,134778
(defun yas/delete-regions (regions)yas/delete-regions3383,136531
(defun yas/update-mirrors (snippet)yas/update-mirrors3391,136808
(defun yas/mirror-update-display (mirror field)yas/mirror-update-display3409,137582
(defun yas/field-update-display (field snippet)yas/field-update-display3423,138335
(defun yas/pre-command-handler () )yas/pre-command-handler3445,139288
(defun yas/post-command-handler ()yas/post-command-handler3447,139325
(defun yas/debug-tables ()yas/debug-tables3483,140869
(defun yas/debug-snippet-vars ()yas/debug-snippet-vars3500,141579
(defun yas/debug-format-fom-concise (fom)yas/debug-format-fom-concise3553,144765
(defun yas/exterminate-package ()yas/exterminate-package3569,145361
(defun yas/debug-test (&optional quiet)yas/debug-test3578,145620
(defadvice c-neutralize-syntax-in-CPPc-neutralize-syntax-in-CPP3659,149463
